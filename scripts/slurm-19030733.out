==========================================
SLURM_JOB_ID = 19030733
SLURM_NODELIST = bigmem1
==========================================
Module slurm/17.11.5 loaded 
Module openmpi/3.0.1 loaded 
Module gcc/7.3.0 loaded 
	-> Version of fname:../DADI/safs/NA.saf.idx is:2
	-> Assuming .saf.gz file: ../DADI/safs/NA.saf.gz
	-> Assuming .saf.pos.gz: ../DADI/safs/NA.saf.pos.gz
	-> Version of fname:../DADI/safs/HAW.saf.idx is:2
	-> Assuming .saf.gz file: ../DADI/safs/HAW.saf.gz
	-> Assuming .saf.pos.gz: ../DADI/safs/HAW.saf.pos.gz
	-> Version of fname:../DADI/safs/GUA.saf.idx is:2
	-> Assuming .saf.gz file: ../DADI/safs/GUA.saf.gz
	-> Assuming .saf.pos.gz: ../DADI/safs/GUA.saf.pos.gz
	-> args: tole:0.000001 nthreads:8 maxiter:100 nsites:0 start:(null) chr:(null) start:-1 stop:-1 fname:../DADI/safs/GUA.saf.idx fstout:(null) oldout:0 seed:1524504457 bootstrap:0 whichFst:0
	-> Multi SFS is 'still' under development. Please report strange behaviour
	-> nSites: 60178503
	-> The choice of -nSites will require atleast: 62211.511719 megabyte memory, that is at least: 12.06% of total memory
	-> dim(../DADI/safs/NA.saf.idx):189
	-> dim(../DADI/safs/HAW.saf.idx):27
	-> dim(../DADI/safs/GUA.saf.idx):49
	-> Dimension of parameter space: 250047
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300001
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300001] from pop0:	588856
	-> Sites to keep[DPSCF300001] from pop1:	588856
	-> Sites to keep[DPSCF300001] from pop2:	588856
	-> [readdata] lastread:588856 posi:5759
	-> Comparing positions: 1 with 0 has:588856
	-> Comparing positions: 2 with 0 has:588856
	-> Only read nSites: 588856 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300002
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300002] from pop0:	183859
	-> Sites to keep[DPSCF300002] from pop1:	183859
	-> Sites to keep[DPSCF300002] from pop2:	183859
	-> [readdata] lastread:183859 posi:5759
	-> Comparing positions: 1 with 0 has:772715
	-> Comparing positions: 2 with 0 has:772715
	-> Only read nSites: 772715 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300003
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300003] from pop0:	170992
	-> Sites to keep[DPSCF300003] from pop1:	170992
	-> Sites to keep[DPSCF300003] from pop2:	170992
	-> [readdata] lastread:170992 posi:5759
	-> Comparing positions: 1 with 0 has:943707
	-> Comparing positions: 2 with 0 has:943707
	-> Only read nSites: 943707 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300004
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300004] from pop0:	140232
	-> Sites to keep[DPSCF300004] from pop1:	140232
	-> Sites to keep[DPSCF300004] from pop2:	140232
	-> [readdata] lastread:140232 posi:5759
	-> Comparing positions: 1 with 0 has:1083939
	-> Comparing positions: 2 with 0 has:1083939
	-> Only read nSites: 1083939 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300005
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300005] from pop0:	152270
	-> Sites to keep[DPSCF300005] from pop1:	152270
	-> Sites to keep[DPSCF300005] from pop2:	152270
	-> [readdata] lastread:152270 posi:5759
	-> Comparing positions: 1 with 0 has:1236209
	-> Comparing positions: 2 with 0 has:1236209
	-> Only read nSites: 1236209 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300006
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300006] from pop0:	192649
	-> Sites to keep[DPSCF300006] from pop1:	192649
	-> Sites to keep[DPSCF300006] from pop2:	192649
	-> [readdata] lastread:192649 posi:5759
	-> Comparing positions: 1 with 0 has:1428858
	-> Comparing positions: 2 with 0 has:1428858
	-> Only read nSites: 1428858 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300007
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300007] from pop0:	159548
	-> Sites to keep[DPSCF300007] from pop1:	159548
	-> Sites to keep[DPSCF300007] from pop2:	159548
	-> [readdata] lastread:159548 posi:5759
	-> Comparing positions: 1 with 0 has:1588406
	-> Comparing positions: 2 with 0 has:1588406
	-> Only read nSites: 1588406 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300008
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300008] from pop0:	159869
	-> Sites to keep[DPSCF300008] from pop1:	159869
	-> Sites to keep[DPSCF300008] from pop2:	159869
	-> [readdata] lastread:159869 posi:5759
	-> Comparing positions: 1 with 0 has:1748275
	-> Comparing positions: 2 with 0 has:1748275
	-> Only read nSites: 1748275 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300009
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300009] from pop0:	196451
	-> Sites to keep[DPSCF300009] from pop1:	196451
	-> Sites to keep[DPSCF300009] from pop2:	196451
	-> [readdata] lastread:196451 posi:5759
	-> Comparing positions: 1 with 0 has:1944726
	-> Comparing positions: 2 with 0 has:1944726
	-> Only read nSites: 1944726 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300010
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300010] from pop0:	347098
	-> Sites to keep[DPSCF300010] from pop1:	347098
	-> Sites to keep[DPSCF300010] from pop2:	347098
	-> [readdata] lastread:347098 posi:5759
	-> Comparing positions: 1 with 0 has:2291824
	-> Comparing positions: 2 with 0 has:2291824
	-> Only read nSites: 2291824 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300011
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300011] from pop0:	180892
	-> Sites to keep[DPSCF300011] from pop1:	180892
	-> Sites to keep[DPSCF300011] from pop2:	180892
	-> [readdata] lastread:180892 posi:5759
	-> Comparing positions: 1 with 0 has:2472716
	-> Comparing positions: 2 with 0 has:2472716
	-> Only read nSites: 2472716 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300012
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300012] from pop0:	139840
	-> Sites to keep[DPSCF300012] from pop1:	139840
	-> Sites to keep[DPSCF300012] from pop2:	139840
	-> [readdata] lastread:139840 posi:5759
	-> Comparing positions: 1 with 0 has:2612556
	-> Comparing positions: 2 with 0 has:2612556
	-> Only read nSites: 2612556 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300013
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300013] from pop0:	154473
	-> Sites to keep[DPSCF300013] from pop1:	154473
	-> Sites to keep[DPSCF300013] from pop2:	154473
	-> [readdata] lastread:154473 posi:5759
	-> Comparing positions: 1 with 0 has:2767029
	-> Comparing positions: 2 with 0 has:2767029
	-> Only read nSites: 2767029 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300014
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300014] from pop0:	288354
	-> Sites to keep[DPSCF300014] from pop1:	288354
	-> Sites to keep[DPSCF300014] from pop2:	288354
	-> [readdata] lastread:288354 posi:5759
	-> Comparing positions: 1 with 0 has:3055383
	-> Comparing positions: 2 with 0 has:3055383
	-> Only read nSites: 3055383 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300015
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300015] from pop0:	156965
	-> Sites to keep[DPSCF300015] from pop1:	156965
	-> Sites to keep[DPSCF300015] from pop2:	156965
	-> [readdata] lastread:156965 posi:5759
	-> Comparing positions: 1 with 0 has:3212348
	-> Comparing positions: 2 with 0 has:3212348
	-> Only read nSites: 3212348 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300016
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300016] from pop0:	137943
	-> Sites to keep[DPSCF300016] from pop1:	137943
	-> Sites to keep[DPSCF300016] from pop2:	137943
	-> [readdata] lastread:137943 posi:5759
	-> Comparing positions: 1 with 0 has:3350291
	-> Comparing positions: 2 with 0 has:3350291
	-> Only read nSites: 3350291 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300017
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300017] from pop0:	180574
	-> Sites to keep[DPSCF300017] from pop1:	180574
	-> Sites to keep[DPSCF300017] from pop2:	180574
	-> [readdata] lastread:180574 posi:5759
	-> Comparing positions: 1 with 0 has:3530865
	-> Comparing positions: 2 with 0 has:3530865
	-> Only read nSites: 3530865 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300018
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300018] from pop0:	186024
	-> Sites to keep[DPSCF300018] from pop1:	186024
	-> Sites to keep[DPSCF300018] from pop2:	186024
	-> [readdata] lastread:186024 posi:5759
	-> Comparing positions: 1 with 0 has:3716889
	-> Comparing positions: 2 with 0 has:3716889
	-> Only read nSites: 3716889 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300019
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300019] from pop0:	149268
	-> Sites to keep[DPSCF300019] from pop1:	149268
	-> Sites to keep[DPSCF300019] from pop2:	149268
	-> [readdata] lastread:149268 posi:5759
	-> Comparing positions: 1 with 0 has:3866157
	-> Comparing positions: 2 with 0 has:3866157
	-> Only read nSites: 3866157 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300020
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300020] from pop0:	120184
	-> Sites to keep[DPSCF300020] from pop1:	120184
	-> Sites to keep[DPSCF300020] from pop2:	120184
	-> [readdata] lastread:120184 posi:5759
	-> Comparing positions: 1 with 0 has:3986341
	-> Comparing positions: 2 with 0 has:3986341
	-> Only read nSites: 3986341 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300021
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300021] from pop0:	124992
	-> Sites to keep[DPSCF300021] from pop1:	124992
	-> Sites to keep[DPSCF300021] from pop2:	124992
	-> [readdata] lastread:124992 posi:5759
	-> Comparing positions: 1 with 0 has:4111333
	-> Comparing positions: 2 with 0 has:4111333
	-> Only read nSites: 4111333 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300022
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300022] from pop0:	210184
	-> Sites to keep[DPSCF300022] from pop1:	210184
	-> Sites to keep[DPSCF300022] from pop2:	210184
	-> [readdata] lastread:210184 posi:5759
	-> Comparing positions: 1 with 0 has:4321517
	-> Comparing positions: 2 with 0 has:4321517
	-> Only read nSites: 4321517 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300023
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300023] from pop0:	92502
	-> Sites to keep[DPSCF300023] from pop1:	92502
	-> Sites to keep[DPSCF300023] from pop2:	92502
	-> [readdata] lastread:92502 posi:5759
	-> Comparing positions: 1 with 0 has:4414019
	-> Comparing positions: 2 with 0 has:4414019
	-> Only read nSites: 4414019 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300024
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300024] from pop0:	98486
	-> Sites to keep[DPSCF300024] from pop1:	98486
	-> Sites to keep[DPSCF300024] from pop2:	98486
	-> [readdata] lastread:98486 posi:5759
	-> Comparing positions: 1 with 0 has:4512505
	-> Comparing positions: 2 with 0 has:4512505
	-> Only read nSites: 4512505 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300025
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300025] from pop0:	130203
	-> Sites to keep[DPSCF300025] from pop1:	130203
	-> Sites to keep[DPSCF300025] from pop2:	130203
	-> [readdata] lastread:130203 posi:5759
	-> Comparing positions: 1 with 0 has:4642708
	-> Comparing positions: 2 with 0 has:4642708
	-> Only read nSites: 4642708 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300026
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300026] from pop0:	115884
	-> Sites to keep[DPSCF300026] from pop1:	115884
	-> Sites to keep[DPSCF300026] from pop2:	115884
	-> [readdata] lastread:115884 posi:5759
	-> Comparing positions: 1 with 0 has:4758592
	-> Comparing positions: 2 with 0 has:4758592
	-> Only read nSites: 4758592 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300027
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300027] from pop0:	136939
	-> Sites to keep[DPSCF300027] from pop1:	136939
	-> Sites to keep[DPSCF300027] from pop2:	136939
	-> [readdata] lastread:136939 posi:5759
	-> Comparing positions: 1 with 0 has:4895531
	-> Comparing positions: 2 with 0 has:4895531
	-> Only read nSites: 4895531 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300028
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300028] from pop0:	204500
	-> Sites to keep[DPSCF300028] from pop1:	204500
	-> Sites to keep[DPSCF300028] from pop2:	204500
	-> Has read 5.000000mio sites now at: 5000000      	-> Has read 5.000000mio sites now at: 5000000      	-> Has read 5.000000mio sites now at: 5000000      	-> [readdata] lastread:204500 posi:5759
	-> Comparing positions: 1 with 0 has:5100031
	-> Comparing positions: 2 with 0 has:5100031
	-> Only read nSites: 5100031 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300029
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300029] from pop0:	111521
	-> Sites to keep[DPSCF300029] from pop1:	111521
	-> Sites to keep[DPSCF300029] from pop2:	111521
	-> [readdata] lastread:111521 posi:5759
	-> Comparing positions: 1 with 0 has:5211552
	-> Comparing positions: 2 with 0 has:5211552
	-> Only read nSites: 5211552 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300030
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300030] from pop0:	124790
	-> Sites to keep[DPSCF300030] from pop1:	124790
	-> Sites to keep[DPSCF300030] from pop2:	124790
	-> [readdata] lastread:124790 posi:5759
	-> Comparing positions: 1 with 0 has:5336342
	-> Comparing positions: 2 with 0 has:5336342
	-> Only read nSites: 5336342 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300031
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300031] from pop0:	118132
	-> Sites to keep[DPSCF300031] from pop1:	118132
	-> Sites to keep[DPSCF300031] from pop2:	118132
	-> [readdata] lastread:118132 posi:5759
	-> Comparing positions: 1 with 0 has:5454474
	-> Comparing positions: 2 with 0 has:5454474
	-> Only read nSites: 5454474 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300032
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300032] from pop0:	106789
	-> Sites to keep[DPSCF300032] from pop1:	106789
	-> Sites to keep[DPSCF300032] from pop2:	106789
	-> [readdata] lastread:106789 posi:5759
	-> Comparing positions: 1 with 0 has:5561263
	-> Comparing positions: 2 with 0 has:5561263
	-> Only read nSites: 5561263 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300033
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300033] from pop0:	137240
	-> Sites to keep[DPSCF300033] from pop1:	137240
	-> Sites to keep[DPSCF300033] from pop2:	137240
	-> [readdata] lastread:137240 posi:5759
	-> Comparing positions: 1 with 0 has:5698503
	-> Comparing positions: 2 with 0 has:5698503
	-> Only read nSites: 5698503 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300034
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300034] from pop0:	104185
	-> Sites to keep[DPSCF300034] from pop1:	104185
	-> Sites to keep[DPSCF300034] from pop2:	104185
	-> [readdata] lastread:104185 posi:5759
	-> Comparing positions: 1 with 0 has:5802688
	-> Comparing positions: 2 with 0 has:5802688
	-> Only read nSites: 5802688 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300035
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300035] from pop0:	156072
	-> Sites to keep[DPSCF300035] from pop1:	156072
	-> Sites to keep[DPSCF300035] from pop2:	156072
	-> [readdata] lastread:156072 posi:5759
	-> Comparing positions: 1 with 0 has:5958760
	-> Comparing positions: 2 with 0 has:5958760
	-> Only read nSites: 5958760 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300036
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300036] from pop0:	113319
	-> Sites to keep[DPSCF300036] from pop1:	113319
	-> Sites to keep[DPSCF300036] from pop2:	113319
	-> [readdata] lastread:113319 posi:5759
	-> Comparing positions: 1 with 0 has:6072079
	-> Comparing positions: 2 with 0 has:6072079
	-> Only read nSites: 6072079 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300037
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300037] from pop0:	88516
	-> Sites to keep[DPSCF300037] from pop1:	88516
	-> Sites to keep[DPSCF300037] from pop2:	88516
	-> [readdata] lastread:88516 posi:5759
	-> Comparing positions: 1 with 0 has:6160595
	-> Comparing positions: 2 with 0 has:6160595
	-> Only read nSites: 6160595 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300038
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300038] from pop0:	138035
	-> Sites to keep[DPSCF300038] from pop1:	138035
	-> Sites to keep[DPSCF300038] from pop2:	138035
	-> [readdata] lastread:138035 posi:5759
	-> Comparing positions: 1 with 0 has:6298630
	-> Comparing positions: 2 with 0 has:6298630
	-> Only read nSites: 6298630 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300039
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300039] from pop0:	83197
	-> Sites to keep[DPSCF300039] from pop1:	83197
	-> Sites to keep[DPSCF300039] from pop2:	83197
	-> [readdata] lastread:83197 posi:5759
	-> Comparing positions: 1 with 0 has:6381827
	-> Comparing positions: 2 with 0 has:6381827
	-> Only read nSites: 6381827 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300040
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300040] from pop0:	78547
	-> Sites to keep[DPSCF300040] from pop1:	78547
	-> Sites to keep[DPSCF300040] from pop2:	78547
	-> [readdata] lastread:78547 posi:5759
	-> Comparing positions: 1 with 0 has:6460374
	-> Comparing positions: 2 with 0 has:6460374
	-> Only read nSites: 6460374 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300041
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300041] from pop0:	245138
	-> Sites to keep[DPSCF300041] from pop1:	245138
	-> Sites to keep[DPSCF300041] from pop2:	245138
	-> [readdata] lastread:245138 posi:5759
	-> Comparing positions: 1 with 0 has:6705512
	-> Comparing positions: 2 with 0 has:6705512
	-> Only read nSites: 6705512 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300042
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300042] from pop0:	201304
	-> Sites to keep[DPSCF300042] from pop1:	201304
	-> Sites to keep[DPSCF300042] from pop2:	201304
	-> [readdata] lastread:201304 posi:5759
	-> Comparing positions: 1 with 0 has:6906816
	-> Comparing positions: 2 with 0 has:6906816
	-> Only read nSites: 6906816 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300043
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300043] from pop0:	115285
	-> Sites to keep[DPSCF300043] from pop1:	115285
	-> Sites to keep[DPSCF300043] from pop2:	115285
	-> [readdata] lastread:115285 posi:5759
	-> Comparing positions: 1 with 0 has:7022101
	-> Comparing positions: 2 with 0 has:7022101
	-> Only read nSites: 7022101 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300044
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300044] from pop0:	88943
	-> Sites to keep[DPSCF300044] from pop1:	88943
	-> Sites to keep[DPSCF300044] from pop2:	88943
	-> [readdata] lastread:88943 posi:5759
	-> Comparing positions: 1 with 0 has:7111044
	-> Comparing positions: 2 with 0 has:7111044
	-> Only read nSites: 7111044 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300045
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300045] from pop0:	124942
	-> Sites to keep[DPSCF300045] from pop1:	124942
	-> Sites to keep[DPSCF300045] from pop2:	124942
	-> [readdata] lastread:124942 posi:5759
	-> Comparing positions: 1 with 0 has:7235986
	-> Comparing positions: 2 with 0 has:7235986
	-> Only read nSites: 7235986 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300046
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300046] from pop0:	114630
	-> Sites to keep[DPSCF300046] from pop1:	114630
	-> Sites to keep[DPSCF300046] from pop2:	114630
	-> [readdata] lastread:114630 posi:5759
	-> Comparing positions: 1 with 0 has:7350616
	-> Comparing positions: 2 with 0 has:7350616
	-> Only read nSites: 7350616 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300047
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300047] from pop0:	95268
	-> Sites to keep[DPSCF300047] from pop1:	95268
	-> Sites to keep[DPSCF300047] from pop2:	95268
	-> [readdata] lastread:95268 posi:5759
	-> Comparing positions: 1 with 0 has:7445884
	-> Comparing positions: 2 with 0 has:7445884
	-> Only read nSites: 7445884 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300048
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300048] from pop0:	181622
	-> Sites to keep[DPSCF300048] from pop1:	181622
	-> Sites to keep[DPSCF300048] from pop2:	181622
	-> [readdata] lastread:181622 posi:5759
	-> Comparing positions: 1 with 0 has:7627506
	-> Comparing positions: 2 with 0 has:7627506
	-> Only read nSites: 7627506 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300049
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300049] from pop0:	80735
	-> Sites to keep[DPSCF300049] from pop1:	80735
	-> Sites to keep[DPSCF300049] from pop2:	80735
	-> [readdata] lastread:80735 posi:5759
	-> Comparing positions: 1 with 0 has:7708241
	-> Comparing positions: 2 with 0 has:7708241
	-> Only read nSites: 7708241 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300050
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300050] from pop0:	113381
	-> Sites to keep[DPSCF300050] from pop1:	113381
	-> Sites to keep[DPSCF300050] from pop2:	113381
	-> [readdata] lastread:113381 posi:5759
	-> Comparing positions: 1 with 0 has:7821622
	-> Comparing positions: 2 with 0 has:7821622
	-> Only read nSites: 7821622 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300051
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300051] from pop0:	113952
	-> Sites to keep[DPSCF300051] from pop1:	113952
	-> Sites to keep[DPSCF300051] from pop2:	113952
	-> [readdata] lastread:113952 posi:5759
	-> Comparing positions: 1 with 0 has:7935574
	-> Comparing positions: 2 with 0 has:7935574
	-> Only read nSites: 7935574 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300052
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300052] from pop0:	83765
	-> Sites to keep[DPSCF300052] from pop1:	83765
	-> Sites to keep[DPSCF300052] from pop2:	83765
	-> [readdata] lastread:83765 posi:5759
	-> Comparing positions: 1 with 0 has:8019339
	-> Comparing positions: 2 with 0 has:8019339
	-> Only read nSites: 8019339 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300053
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300053] from pop0:	115084
	-> Sites to keep[DPSCF300053] from pop1:	115084
	-> Sites to keep[DPSCF300053] from pop2:	115084
	-> [readdata] lastread:115084 posi:5759
	-> Comparing positions: 1 with 0 has:8134423
	-> Comparing positions: 2 with 0 has:8134423
	-> Only read nSites: 8134423 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300054
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300054] from pop0:	72202
	-> Sites to keep[DPSCF300054] from pop1:	72202
	-> Sites to keep[DPSCF300054] from pop2:	72202
	-> [readdata] lastread:72202 posi:5759
	-> Comparing positions: 1 with 0 has:8206625
	-> Comparing positions: 2 with 0 has:8206625
	-> Only read nSites: 8206625 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300055
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300055] from pop0:	114426
	-> Sites to keep[DPSCF300055] from pop1:	114426
	-> Sites to keep[DPSCF300055] from pop2:	114426
	-> [readdata] lastread:114426 posi:5759
	-> Comparing positions: 1 with 0 has:8321051
	-> Comparing positions: 2 with 0 has:8321051
	-> Only read nSites: 8321051 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300056
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300056] from pop0:	75680
	-> Sites to keep[DPSCF300056] from pop1:	75680
	-> Sites to keep[DPSCF300056] from pop2:	75680
	-> [readdata] lastread:75680 posi:5759
	-> Comparing positions: 1 with 0 has:8396731
	-> Comparing positions: 2 with 0 has:8396731
	-> Only read nSites: 8396731 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300057
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300057] from pop0:	94925
	-> Sites to keep[DPSCF300057] from pop1:	94925
	-> Sites to keep[DPSCF300057] from pop2:	94925
	-> [readdata] lastread:94925 posi:5759
	-> Comparing positions: 1 with 0 has:8491656
	-> Comparing positions: 2 with 0 has:8491656
	-> Only read nSites: 8491656 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300058
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300058] from pop0:	46157
	-> Sites to keep[DPSCF300058] from pop1:	46157
	-> Sites to keep[DPSCF300058] from pop2:	46157
	-> [readdata] lastread:46157 posi:5759
	-> Comparing positions: 1 with 0 has:8537813
	-> Comparing positions: 2 with 0 has:8537813
	-> Only read nSites: 8537813 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300059
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300059] from pop0:	61378
	-> Sites to keep[DPSCF300059] from pop1:	61378
	-> Sites to keep[DPSCF300059] from pop2:	61378
	-> [readdata] lastread:61378 posi:5759
	-> Comparing positions: 1 with 0 has:8599191
	-> Comparing positions: 2 with 0 has:8599191
	-> Only read nSites: 8599191 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300060
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300060] from pop0:	63906
	-> Sites to keep[DPSCF300060] from pop1:	63906
	-> Sites to keep[DPSCF300060] from pop2:	63906
	-> [readdata] lastread:63906 posi:5759
	-> Comparing positions: 1 with 0 has:8663097
	-> Comparing positions: 2 with 0 has:8663097
	-> Only read nSites: 8663097 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300061
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300061] from pop0:	133001
	-> Sites to keep[DPSCF300061] from pop1:	133001
	-> Sites to keep[DPSCF300061] from pop2:	133001
	-> [readdata] lastread:133001 posi:5759
	-> Comparing positions: 1 with 0 has:8796098
	-> Comparing positions: 2 with 0 has:8796098
	-> Only read nSites: 8796098 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300062
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300062] from pop0:	83682
	-> Sites to keep[DPSCF300062] from pop1:	83682
	-> Sites to keep[DPSCF300062] from pop2:	83682
	-> [readdata] lastread:83682 posi:5759
	-> Comparing positions: 1 with 0 has:8879780
	-> Comparing positions: 2 with 0 has:8879780
	-> Only read nSites: 8879780 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300063
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300063] from pop0:	119408
	-> Sites to keep[DPSCF300063] from pop1:	119408
	-> Sites to keep[DPSCF300063] from pop2:	119408
	-> [readdata] lastread:119408 posi:5759
	-> Comparing positions: 1 with 0 has:8999188
	-> Comparing positions: 2 with 0 has:8999188
	-> Only read nSites: 8999188 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300064
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300064] from pop0:	191506
	-> Sites to keep[DPSCF300064] from pop1:	191506
	-> Sites to keep[DPSCF300064] from pop2:	191506
	-> [readdata] lastread:191506 posi:5759
	-> Comparing positions: 1 with 0 has:9190694
	-> Comparing positions: 2 with 0 has:9190694
	-> Only read nSites: 9190694 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300065
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300065] from pop0:	86359
	-> Sites to keep[DPSCF300065] from pop1:	86359
	-> Sites to keep[DPSCF300065] from pop2:	86359
	-> [readdata] lastread:86359 posi:5759
	-> Comparing positions: 1 with 0 has:9277053
	-> Comparing positions: 2 with 0 has:9277053
	-> Only read nSites: 9277053 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300066
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300066] from pop0:	54445
	-> Sites to keep[DPSCF300066] from pop1:	54445
	-> Sites to keep[DPSCF300066] from pop2:	54445
	-> [readdata] lastread:54445 posi:5759
	-> Comparing positions: 1 with 0 has:9331498
	-> Comparing positions: 2 with 0 has:9331498
	-> Only read nSites: 9331498 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300067
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300067] from pop0:	66456
	-> Sites to keep[DPSCF300067] from pop1:	66456
	-> Sites to keep[DPSCF300067] from pop2:	66456
	-> [readdata] lastread:66456 posi:5759
	-> Comparing positions: 1 with 0 has:9397954
	-> Comparing positions: 2 with 0 has:9397954
	-> Only read nSites: 9397954 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300068
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300068] from pop0:	83705
	-> Sites to keep[DPSCF300068] from pop1:	83705
	-> Sites to keep[DPSCF300068] from pop2:	83705
	-> [readdata] lastread:83705 posi:5759
	-> Comparing positions: 1 with 0 has:9481659
	-> Comparing positions: 2 with 0 has:9481659
	-> Only read nSites: 9481659 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300069
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300069] from pop0:	75277
	-> Sites to keep[DPSCF300069] from pop1:	75277
	-> Sites to keep[DPSCF300069] from pop2:	75277
	-> [readdata] lastread:75277 posi:5759
	-> Comparing positions: 1 with 0 has:9556936
	-> Comparing positions: 2 with 0 has:9556936
	-> Only read nSites: 9556936 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300070
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300070] from pop0:	71668
	-> Sites to keep[DPSCF300070] from pop1:	71668
	-> Sites to keep[DPSCF300070] from pop2:	71668
	-> [readdata] lastread:71668 posi:5759
	-> Comparing positions: 1 with 0 has:9628604
	-> Comparing positions: 2 with 0 has:9628604
	-> Only read nSites: 9628604 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300071
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300071] from pop0:	104796
	-> Sites to keep[DPSCF300071] from pop1:	104796
	-> Sites to keep[DPSCF300071] from pop2:	104796
	-> [readdata] lastread:104796 posi:5759
	-> Comparing positions: 1 with 0 has:9733400
	-> Comparing positions: 2 with 0 has:9733400
	-> Only read nSites: 9733400 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300072
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300072] from pop0:	123497
	-> Sites to keep[DPSCF300072] from pop1:	123497
	-> Sites to keep[DPSCF300072] from pop2:	123497
	-> [readdata] lastread:123497 posi:5759
	-> Comparing positions: 1 with 0 has:9856897
	-> Comparing positions: 2 with 0 has:9856897
	-> Only read nSites: 9856897 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300073
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300073] from pop0:	91143
	-> Sites to keep[DPSCF300073] from pop1:	91143
	-> Sites to keep[DPSCF300073] from pop2:	91143
	-> [readdata] lastread:91143 posi:5759
	-> Comparing positions: 1 with 0 has:9948040
	-> Comparing positions: 2 with 0 has:9948040
	-> Only read nSites: 9948040 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300074
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300074] from pop0:	80930
	-> Sites to keep[DPSCF300074] from pop1:	80930
	-> Sites to keep[DPSCF300074] from pop2:	80930
	-> Has read 5.000000mio sites now at: 10000000      	-> Has read 5.000000mio sites now at: 10000000      	-> Has read 5.000000mio sites now at: 10000000      	-> [readdata] lastread:80930 posi:5759
	-> Comparing positions: 1 with 0 has:10028970
	-> Comparing positions: 2 with 0 has:10028970
	-> Only read nSites: 10028970 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300075
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300075] from pop0:	51318
	-> Sites to keep[DPSCF300075] from pop1:	51318
	-> Sites to keep[DPSCF300075] from pop2:	51318
	-> [readdata] lastread:51318 posi:5759
	-> Comparing positions: 1 with 0 has:10080288
	-> Comparing positions: 2 with 0 has:10080288
	-> Only read nSites: 10080288 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300076
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300076] from pop0:	87663
	-> Sites to keep[DPSCF300076] from pop1:	87663
	-> Sites to keep[DPSCF300076] from pop2:	87663
	-> [readdata] lastread:87663 posi:5759
	-> Comparing positions: 1 with 0 has:10167951
	-> Comparing positions: 2 with 0 has:10167951
	-> Only read nSites: 10167951 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300077
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300077] from pop0:	78399
	-> Sites to keep[DPSCF300077] from pop1:	78399
	-> Sites to keep[DPSCF300077] from pop2:	78399
	-> [readdata] lastread:78399 posi:5759
	-> Comparing positions: 1 with 0 has:10246350
	-> Comparing positions: 2 with 0 has:10246350
	-> Only read nSites: 10246350 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300078
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300078] from pop0:	110289
	-> Sites to keep[DPSCF300078] from pop1:	110289
	-> Sites to keep[DPSCF300078] from pop2:	110289
	-> [readdata] lastread:110289 posi:5759
	-> Comparing positions: 1 with 0 has:10356639
	-> Comparing positions: 2 with 0 has:10356639
	-> Only read nSites: 10356639 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300079
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300079] from pop0:	94046
	-> Sites to keep[DPSCF300079] from pop1:	94046
	-> Sites to keep[DPSCF300079] from pop2:	94046
	-> [readdata] lastread:94046 posi:5759
	-> Comparing positions: 1 with 0 has:10450685
	-> Comparing positions: 2 with 0 has:10450685
	-> Only read nSites: 10450685 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300080
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300080] from pop0:	55755
	-> Sites to keep[DPSCF300080] from pop1:	55755
	-> Sites to keep[DPSCF300080] from pop2:	55755
	-> [readdata] lastread:55755 posi:5759
	-> Comparing positions: 1 with 0 has:10506440
	-> Comparing positions: 2 with 0 has:10506440
	-> Only read nSites: 10506440 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300081
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300081] from pop0:	76400
	-> Sites to keep[DPSCF300081] from pop1:	76400
	-> Sites to keep[DPSCF300081] from pop2:	76400
	-> [readdata] lastread:76400 posi:5759
	-> Comparing positions: 1 with 0 has:10582840
	-> Comparing positions: 2 with 0 has:10582840
	-> Only read nSites: 10582840 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300082
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300082] from pop0:	123810
	-> Sites to keep[DPSCF300082] from pop1:	123810
	-> Sites to keep[DPSCF300082] from pop2:	123810
	-> [readdata] lastread:123810 posi:5759
	-> Comparing positions: 1 with 0 has:10706650
	-> Comparing positions: 2 with 0 has:10706650
	-> Only read nSites: 10706650 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300083
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300083] from pop0:	65893
	-> Sites to keep[DPSCF300083] from pop1:	65893
	-> Sites to keep[DPSCF300083] from pop2:	65893
	-> [readdata] lastread:65893 posi:5759
	-> Comparing positions: 1 with 0 has:10772543
	-> Comparing positions: 2 with 0 has:10772543
	-> Only read nSites: 10772543 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300084
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300084] from pop0:	53332
	-> Sites to keep[DPSCF300084] from pop1:	53332
	-> Sites to keep[DPSCF300084] from pop2:	53332
	-> [readdata] lastread:53332 posi:5759
	-> Comparing positions: 1 with 0 has:10825875
	-> Comparing positions: 2 with 0 has:10825875
	-> Only read nSites: 10825875 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300085
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300085] from pop0:	39181
	-> Sites to keep[DPSCF300085] from pop1:	39181
	-> Sites to keep[DPSCF300085] from pop2:	39181
	-> [readdata] lastread:39181 posi:5759
	-> Comparing positions: 1 with 0 has:10865056
	-> Comparing positions: 2 with 0 has:10865056
	-> Only read nSites: 10865056 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300086
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300086] from pop0:	137655
	-> Sites to keep[DPSCF300086] from pop1:	137655
	-> Sites to keep[DPSCF300086] from pop2:	137655
	-> [readdata] lastread:137655 posi:5759
	-> Comparing positions: 1 with 0 has:11002711
	-> Comparing positions: 2 with 0 has:11002711
	-> Only read nSites: 11002711 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300087
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300087] from pop0:	68773
	-> Sites to keep[DPSCF300087] from pop1:	68773
	-> Sites to keep[DPSCF300087] from pop2:	68773
	-> [readdata] lastread:68773 posi:5759
	-> Comparing positions: 1 with 0 has:11071484
	-> Comparing positions: 2 with 0 has:11071484
	-> Only read nSites: 11071484 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300088
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300088] from pop0:	135210
	-> Sites to keep[DPSCF300088] from pop1:	135210
	-> Sites to keep[DPSCF300088] from pop2:	135210
	-> [readdata] lastread:135210 posi:5759
	-> Comparing positions: 1 with 0 has:11206694
	-> Comparing positions: 2 with 0 has:11206694
	-> Only read nSites: 11206694 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300089
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300089] from pop0:	56704
	-> Sites to keep[DPSCF300089] from pop1:	56704
	-> Sites to keep[DPSCF300089] from pop2:	56704
	-> [readdata] lastread:56704 posi:5759
	-> Comparing positions: 1 with 0 has:11263398
	-> Comparing positions: 2 with 0 has:11263398
	-> Only read nSites: 11263398 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300090
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300090] from pop0:	65311
	-> Sites to keep[DPSCF300090] from pop1:	65311
	-> Sites to keep[DPSCF300090] from pop2:	65311
	-> [readdata] lastread:65311 posi:5759
	-> Comparing positions: 1 with 0 has:11328709
	-> Comparing positions: 2 with 0 has:11328709
	-> Only read nSites: 11328709 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300091
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300091] from pop0:	67549
	-> Sites to keep[DPSCF300091] from pop1:	67549
	-> Sites to keep[DPSCF300091] from pop2:	67549
	-> [readdata] lastread:67549 posi:5759
	-> Comparing positions: 1 with 0 has:11396258
	-> Comparing positions: 2 with 0 has:11396258
	-> Only read nSites: 11396258 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300092
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300092] from pop0:	46476
	-> Sites to keep[DPSCF300092] from pop1:	46476
	-> Sites to keep[DPSCF300092] from pop2:	46476
	-> [readdata] lastread:46476 posi:5759
	-> Comparing positions: 1 with 0 has:11442734
	-> Comparing positions: 2 with 0 has:11442734
	-> Only read nSites: 11442734 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300093
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300093] from pop0:	38095
	-> Sites to keep[DPSCF300093] from pop1:	38095
	-> Sites to keep[DPSCF300093] from pop2:	38095
	-> [readdata] lastread:38095 posi:5759
	-> Comparing positions: 1 with 0 has:11480829
	-> Comparing positions: 2 with 0 has:11480829
	-> Only read nSites: 11480829 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300094
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300094] from pop0:	46360
	-> Sites to keep[DPSCF300094] from pop1:	46360
	-> Sites to keep[DPSCF300094] from pop2:	46360
	-> [readdata] lastread:46360 posi:5759
	-> Comparing positions: 1 with 0 has:11527189
	-> Comparing positions: 2 with 0 has:11527189
	-> Only read nSites: 11527189 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300095
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300095] from pop0:	70827
	-> Sites to keep[DPSCF300095] from pop1:	70827
	-> Sites to keep[DPSCF300095] from pop2:	70827
	-> [readdata] lastread:70827 posi:5759
	-> Comparing positions: 1 with 0 has:11598016
	-> Comparing positions: 2 with 0 has:11598016
	-> Only read nSites: 11598016 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300096
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300096] from pop0:	50378
	-> Sites to keep[DPSCF300096] from pop1:	50378
	-> Sites to keep[DPSCF300096] from pop2:	50378
	-> [readdata] lastread:50378 posi:5759
	-> Comparing positions: 1 with 0 has:11648394
	-> Comparing positions: 2 with 0 has:11648394
	-> Only read nSites: 11648394 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300097
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300097] from pop0:	54616
	-> Sites to keep[DPSCF300097] from pop1:	54616
	-> Sites to keep[DPSCF300097] from pop2:	54616
	-> [readdata] lastread:54616 posi:5759
	-> Comparing positions: 1 with 0 has:11703010
	-> Comparing positions: 2 with 0 has:11703010
	-> Only read nSites: 11703010 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300098
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300098] from pop0:	66875
	-> Sites to keep[DPSCF300098] from pop1:	66875
	-> Sites to keep[DPSCF300098] from pop2:	66875
	-> [readdata] lastread:66875 posi:5759
	-> Comparing positions: 1 with 0 has:11769885
	-> Comparing positions: 2 with 0 has:11769885
	-> Only read nSites: 11769885 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300099
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300099] from pop0:	53760
	-> Sites to keep[DPSCF300099] from pop1:	53760
	-> Sites to keep[DPSCF300099] from pop2:	53760
	-> [readdata] lastread:53760 posi:5759
	-> Comparing positions: 1 with 0 has:11823645
	-> Comparing positions: 2 with 0 has:11823645
	-> Only read nSites: 11823645 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300100
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300100] from pop0:	52882
	-> Sites to keep[DPSCF300100] from pop1:	52882
	-> Sites to keep[DPSCF300100] from pop2:	52882
	-> [readdata] lastread:52882 posi:5759
	-> Comparing positions: 1 with 0 has:11876527
	-> Comparing positions: 2 with 0 has:11876527
	-> Only read nSites: 11876527 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300101
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300101] from pop0:	55537
	-> Sites to keep[DPSCF300101] from pop1:	55537
	-> Sites to keep[DPSCF300101] from pop2:	55537
	-> [readdata] lastread:55537 posi:5759
	-> Comparing positions: 1 with 0 has:11932064
	-> Comparing positions: 2 with 0 has:11932064
	-> Only read nSites: 11932064 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300102
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300102] from pop0:	82068
	-> Sites to keep[DPSCF300102] from pop1:	82068
	-> Sites to keep[DPSCF300102] from pop2:	82068
	-> [readdata] lastread:82068 posi:5759
	-> Comparing positions: 1 with 0 has:12014132
	-> Comparing positions: 2 with 0 has:12014132
	-> Only read nSites: 12014132 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300103
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300103] from pop0:	45795
	-> Sites to keep[DPSCF300103] from pop1:	45795
	-> Sites to keep[DPSCF300103] from pop2:	45795
	-> [readdata] lastread:45795 posi:5759
	-> Comparing positions: 1 with 0 has:12059927
	-> Comparing positions: 2 with 0 has:12059927
	-> Only read nSites: 12059927 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300104
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300104] from pop0:	35754
	-> Sites to keep[DPSCF300104] from pop1:	35754
	-> Sites to keep[DPSCF300104] from pop2:	35754
	-> [readdata] lastread:35754 posi:5759
	-> Comparing positions: 1 with 0 has:12095681
	-> Comparing positions: 2 with 0 has:12095681
	-> Only read nSites: 12095681 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300105
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300105] from pop0:	63803
	-> Sites to keep[DPSCF300105] from pop1:	63803
	-> Sites to keep[DPSCF300105] from pop2:	63803
	-> [readdata] lastread:63803 posi:5759
	-> Comparing positions: 1 with 0 has:12159484
	-> Comparing positions: 2 with 0 has:12159484
	-> Only read nSites: 12159484 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300106
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300106] from pop0:	57995
	-> Sites to keep[DPSCF300106] from pop1:	57995
	-> Sites to keep[DPSCF300106] from pop2:	57995
	-> [readdata] lastread:57995 posi:5759
	-> Comparing positions: 1 with 0 has:12217479
	-> Comparing positions: 2 with 0 has:12217479
	-> Only read nSites: 12217479 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300107
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300107] from pop0:	45654
	-> Sites to keep[DPSCF300107] from pop1:	45654
	-> Sites to keep[DPSCF300107] from pop2:	45654
	-> [readdata] lastread:45654 posi:5759
	-> Comparing positions: 1 with 0 has:12263133
	-> Comparing positions: 2 with 0 has:12263133
	-> Only read nSites: 12263133 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300108
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300108] from pop0:	76532
	-> Sites to keep[DPSCF300108] from pop1:	76532
	-> Sites to keep[DPSCF300108] from pop2:	76532
	-> [readdata] lastread:76532 posi:5759
	-> Comparing positions: 1 with 0 has:12339665
	-> Comparing positions: 2 with 0 has:12339665
	-> Only read nSites: 12339665 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300109
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300109] from pop0:	70999
	-> Sites to keep[DPSCF300109] from pop1:	70999
	-> Sites to keep[DPSCF300109] from pop2:	70999
	-> [readdata] lastread:70999 posi:5759
	-> Comparing positions: 1 with 0 has:12410664
	-> Comparing positions: 2 with 0 has:12410664
	-> Only read nSites: 12410664 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300110
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300110] from pop0:	62517
	-> Sites to keep[DPSCF300110] from pop1:	62517
	-> Sites to keep[DPSCF300110] from pop2:	62517
	-> [readdata] lastread:62517 posi:5759
	-> Comparing positions: 1 with 0 has:12473181
	-> Comparing positions: 2 with 0 has:12473181
	-> Only read nSites: 12473181 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300111
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300111] from pop0:	53406
	-> Sites to keep[DPSCF300111] from pop1:	53406
	-> Sites to keep[DPSCF300111] from pop2:	53406
	-> [readdata] lastread:53406 posi:5759
	-> Comparing positions: 1 with 0 has:12526587
	-> Comparing positions: 2 with 0 has:12526587
	-> Only read nSites: 12526587 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300112
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300112] from pop0:	43615
	-> Sites to keep[DPSCF300112] from pop1:	43615
	-> Sites to keep[DPSCF300112] from pop2:	43615
	-> [readdata] lastread:43615 posi:5759
	-> Comparing positions: 1 with 0 has:12570202
	-> Comparing positions: 2 with 0 has:12570202
	-> Only read nSites: 12570202 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300113
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300113] from pop0:	63604
	-> Sites to keep[DPSCF300113] from pop1:	63604
	-> Sites to keep[DPSCF300113] from pop2:	63604
	-> [readdata] lastread:63604 posi:5759
	-> Comparing positions: 1 with 0 has:12633806
	-> Comparing positions: 2 with 0 has:12633806
	-> Only read nSites: 12633806 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300114
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300114] from pop0:	76541
	-> Sites to keep[DPSCF300114] from pop1:	76541
	-> Sites to keep[DPSCF300114] from pop2:	76541
	-> [readdata] lastread:76541 posi:5759
	-> Comparing positions: 1 with 0 has:12710347
	-> Comparing positions: 2 with 0 has:12710347
	-> Only read nSites: 12710347 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300115
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300115] from pop0:	88141
	-> Sites to keep[DPSCF300115] from pop1:	88141
	-> Sites to keep[DPSCF300115] from pop2:	88141
	-> [readdata] lastread:88141 posi:5759
	-> Comparing positions: 1 with 0 has:12798488
	-> Comparing positions: 2 with 0 has:12798488
	-> Only read nSites: 12798488 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300116
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300116] from pop0:	34637
	-> Sites to keep[DPSCF300116] from pop1:	34637
	-> Sites to keep[DPSCF300116] from pop2:	34637
	-> [readdata] lastread:34637 posi:5759
	-> Comparing positions: 1 with 0 has:12833125
	-> Comparing positions: 2 with 0 has:12833125
	-> Only read nSites: 12833125 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300117
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300117] from pop0:	96755
	-> Sites to keep[DPSCF300117] from pop1:	96755
	-> Sites to keep[DPSCF300117] from pop2:	96755
	-> [readdata] lastread:96755 posi:5759
	-> Comparing positions: 1 with 0 has:12929880
	-> Comparing positions: 2 with 0 has:12929880
	-> Only read nSites: 12929880 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300118
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300118] from pop0:	70353
	-> Sites to keep[DPSCF300118] from pop1:	70353
	-> Sites to keep[DPSCF300118] from pop2:	70353
	-> [readdata] lastread:70353 posi:5759
	-> Comparing positions: 1 with 0 has:13000233
	-> Comparing positions: 2 with 0 has:13000233
	-> Only read nSites: 13000233 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300119
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300119] from pop0:	58671
	-> Sites to keep[DPSCF300119] from pop1:	58671
	-> Sites to keep[DPSCF300119] from pop2:	58671
	-> [readdata] lastread:58671 posi:5759
	-> Comparing positions: 1 with 0 has:13058904
	-> Comparing positions: 2 with 0 has:13058904
	-> Only read nSites: 13058904 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300120
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300120] from pop0:	89065
	-> Sites to keep[DPSCF300120] from pop1:	89065
	-> Sites to keep[DPSCF300120] from pop2:	89065
	-> [readdata] lastread:89065 posi:5759
	-> Comparing positions: 1 with 0 has:13147969
	-> Comparing positions: 2 with 0 has:13147969
	-> Only read nSites: 13147969 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300121
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300121] from pop0:	36821
	-> Sites to keep[DPSCF300121] from pop1:	36821
	-> Sites to keep[DPSCF300121] from pop2:	36821
	-> [readdata] lastread:36821 posi:5759
	-> Comparing positions: 1 with 0 has:13184790
	-> Comparing positions: 2 with 0 has:13184790
	-> Only read nSites: 13184790 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300122
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300122] from pop0:	60281
	-> Sites to keep[DPSCF300122] from pop1:	60281
	-> Sites to keep[DPSCF300122] from pop2:	60281
	-> [readdata] lastread:60281 posi:5759
	-> Comparing positions: 1 with 0 has:13245071
	-> Comparing positions: 2 with 0 has:13245071
	-> Only read nSites: 13245071 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300123
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300123] from pop0:	54379
	-> Sites to keep[DPSCF300123] from pop1:	54379
	-> Sites to keep[DPSCF300123] from pop2:	54379
	-> [readdata] lastread:54379 posi:5759
	-> Comparing positions: 1 with 0 has:13299450
	-> Comparing positions: 2 with 0 has:13299450
	-> Only read nSites: 13299450 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300124
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300124] from pop0:	25675
	-> Sites to keep[DPSCF300124] from pop1:	25675
	-> Sites to keep[DPSCF300124] from pop2:	25675
	-> [readdata] lastread:25675 posi:5759
	-> Comparing positions: 1 with 0 has:13325125
	-> Comparing positions: 2 with 0 has:13325125
	-> Only read nSites: 13325125 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300125
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300125] from pop0:	44270
	-> Sites to keep[DPSCF300125] from pop1:	44270
	-> Sites to keep[DPSCF300125] from pop2:	44270
	-> [readdata] lastread:44270 posi:5759
	-> Comparing positions: 1 with 0 has:13369395
	-> Comparing positions: 2 with 0 has:13369395
	-> Only read nSites: 13369395 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300126
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300126] from pop0:	57089
	-> Sites to keep[DPSCF300126] from pop1:	57089
	-> Sites to keep[DPSCF300126] from pop2:	57089
	-> [readdata] lastread:57089 posi:5759
	-> Comparing positions: 1 with 0 has:13426484
	-> Comparing positions: 2 with 0 has:13426484
	-> Only read nSites: 13426484 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300127
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300127] from pop0:	61836
	-> Sites to keep[DPSCF300127] from pop1:	61836
	-> Sites to keep[DPSCF300127] from pop2:	61836
	-> [readdata] lastread:61836 posi:5759
	-> Comparing positions: 1 with 0 has:13488320
	-> Comparing positions: 2 with 0 has:13488320
	-> Only read nSites: 13488320 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300128
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300128] from pop0:	86461
	-> Sites to keep[DPSCF300128] from pop1:	86461
	-> Sites to keep[DPSCF300128] from pop2:	86461
	-> [readdata] lastread:86461 posi:5759
	-> Comparing positions: 1 with 0 has:13574781
	-> Comparing positions: 2 with 0 has:13574781
	-> Only read nSites: 13574781 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300129
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300129] from pop0:	48314
	-> Sites to keep[DPSCF300129] from pop1:	48314
	-> Sites to keep[DPSCF300129] from pop2:	48314
	-> [readdata] lastread:48314 posi:5759
	-> Comparing positions: 1 with 0 has:13623095
	-> Comparing positions: 2 with 0 has:13623095
	-> Only read nSites: 13623095 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300130
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300130] from pop0:	45001
	-> Sites to keep[DPSCF300130] from pop1:	45001
	-> Sites to keep[DPSCF300130] from pop2:	45001
	-> [readdata] lastread:45001 posi:5759
	-> Comparing positions: 1 with 0 has:13668096
	-> Comparing positions: 2 with 0 has:13668096
	-> Only read nSites: 13668096 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300131
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300131] from pop0:	67779
	-> Sites to keep[DPSCF300131] from pop1:	67779
	-> Sites to keep[DPSCF300131] from pop2:	67779
	-> [readdata] lastread:67779 posi:5759
	-> Comparing positions: 1 with 0 has:13735875
	-> Comparing positions: 2 with 0 has:13735875
	-> Only read nSites: 13735875 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300132
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300132] from pop0:	40313
	-> Sites to keep[DPSCF300132] from pop1:	40313
	-> Sites to keep[DPSCF300132] from pop2:	40313
	-> [readdata] lastread:40313 posi:5759
	-> Comparing positions: 1 with 0 has:13776188
	-> Comparing positions: 2 with 0 has:13776188
	-> Only read nSites: 13776188 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300133
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300133] from pop0:	41635
	-> Sites to keep[DPSCF300133] from pop1:	41635
	-> Sites to keep[DPSCF300133] from pop2:	41635
	-> [readdata] lastread:41635 posi:5759
	-> Comparing positions: 1 with 0 has:13817823
	-> Comparing positions: 2 with 0 has:13817823
	-> Only read nSites: 13817823 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300134
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300134] from pop0:	38802
	-> Sites to keep[DPSCF300134] from pop1:	38802
	-> Sites to keep[DPSCF300134] from pop2:	38802
	-> [readdata] lastread:38802 posi:5759
	-> Comparing positions: 1 with 0 has:13856625
	-> Comparing positions: 2 with 0 has:13856625
	-> Only read nSites: 13856625 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300135
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300135] from pop0:	25932
	-> Sites to keep[DPSCF300135] from pop1:	25932
	-> Sites to keep[DPSCF300135] from pop2:	25932
	-> [readdata] lastread:25932 posi:5759
	-> Comparing positions: 1 with 0 has:13882557
	-> Comparing positions: 2 with 0 has:13882557
	-> Only read nSites: 13882557 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300136
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300136] from pop0:	26580
	-> Sites to keep[DPSCF300136] from pop1:	26580
	-> Sites to keep[DPSCF300136] from pop2:	26580
	-> [readdata] lastread:26580 posi:5759
	-> Comparing positions: 1 with 0 has:13909137
	-> Comparing positions: 2 with 0 has:13909137
	-> Only read nSites: 13909137 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300137
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300137] from pop0:	39369
	-> Sites to keep[DPSCF300137] from pop1:	39369
	-> Sites to keep[DPSCF300137] from pop2:	39369
	-> [readdata] lastread:39369 posi:5759
	-> Comparing positions: 1 with 0 has:13948506
	-> Comparing positions: 2 with 0 has:13948506
	-> Only read nSites: 13948506 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300138
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300138] from pop0:	61472
	-> Sites to keep[DPSCF300138] from pop1:	61472
	-> Sites to keep[DPSCF300138] from pop2:	61472
	-> [readdata] lastread:61472 posi:5759
	-> Comparing positions: 1 with 0 has:14009978
	-> Comparing positions: 2 with 0 has:14009978
	-> Only read nSites: 14009978 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300139
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300139] from pop0:	40500
	-> Sites to keep[DPSCF300139] from pop1:	40500
	-> Sites to keep[DPSCF300139] from pop2:	40500
	-> [readdata] lastread:40500 posi:5759
	-> Comparing positions: 1 with 0 has:14050478
	-> Comparing positions: 2 with 0 has:14050478
	-> Only read nSites: 14050478 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300140
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300140] from pop0:	70022
	-> Sites to keep[DPSCF300140] from pop1:	70022
	-> Sites to keep[DPSCF300140] from pop2:	70022
	-> [readdata] lastread:70022 posi:5759
	-> Comparing positions: 1 with 0 has:14120500
	-> Comparing positions: 2 with 0 has:14120500
	-> Only read nSites: 14120500 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300141
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300141] from pop0:	46626
	-> Sites to keep[DPSCF300141] from pop1:	46626
	-> Sites to keep[DPSCF300141] from pop2:	46626
	-> [readdata] lastread:46626 posi:5759
	-> Comparing positions: 1 with 0 has:14167126
	-> Comparing positions: 2 with 0 has:14167126
	-> Only read nSites: 14167126 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300142
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300142] from pop0:	27156
	-> Sites to keep[DPSCF300142] from pop1:	27156
	-> Sites to keep[DPSCF300142] from pop2:	27156
	-> [readdata] lastread:27156 posi:5759
	-> Comparing positions: 1 with 0 has:14194282
	-> Comparing positions: 2 with 0 has:14194282
	-> Only read nSites: 14194282 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300143
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300143] from pop0:	124368
	-> Sites to keep[DPSCF300143] from pop1:	124368
	-> Sites to keep[DPSCF300143] from pop2:	124368
	-> [readdata] lastread:124368 posi:5759
	-> Comparing positions: 1 with 0 has:14318650
	-> Comparing positions: 2 with 0 has:14318650
	-> Only read nSites: 14318650 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300144
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300144] from pop0:	39210
	-> Sites to keep[DPSCF300144] from pop1:	39210
	-> Sites to keep[DPSCF300144] from pop2:	39210
	-> [readdata] lastread:39210 posi:5759
	-> Comparing positions: 1 with 0 has:14357860
	-> Comparing positions: 2 with 0 has:14357860
	-> Only read nSites: 14357860 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300145
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300145] from pop0:	39654
	-> Sites to keep[DPSCF300145] from pop1:	39654
	-> Sites to keep[DPSCF300145] from pop2:	39654
	-> [readdata] lastread:39654 posi:5759
	-> Comparing positions: 1 with 0 has:14397514
	-> Comparing positions: 2 with 0 has:14397514
	-> Only read nSites: 14397514 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300146
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300146] from pop0:	37853
	-> Sites to keep[DPSCF300146] from pop1:	37853
	-> Sites to keep[DPSCF300146] from pop2:	37853
	-> [readdata] lastread:37853 posi:5759
	-> Comparing positions: 1 with 0 has:14435367
	-> Comparing positions: 2 with 0 has:14435367
	-> Only read nSites: 14435367 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300147
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300147] from pop0:	63317
	-> Sites to keep[DPSCF300147] from pop1:	63317
	-> Sites to keep[DPSCF300147] from pop2:	63317
	-> [readdata] lastread:63317 posi:5759
	-> Comparing positions: 1 with 0 has:14498684
	-> Comparing positions: 2 with 0 has:14498684
	-> Only read nSites: 14498684 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300148
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300148] from pop0:	78938
	-> Sites to keep[DPSCF300148] from pop1:	78938
	-> Sites to keep[DPSCF300148] from pop2:	78938
	-> [readdata] lastread:78938 posi:5759
	-> Comparing positions: 1 with 0 has:14577622
	-> Comparing positions: 2 with 0 has:14577622
	-> Only read nSites: 14577622 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300149
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300149] from pop0:	70158
	-> Sites to keep[DPSCF300149] from pop1:	70158
	-> Sites to keep[DPSCF300149] from pop2:	70158
	-> [readdata] lastread:70158 posi:5759
	-> Comparing positions: 1 with 0 has:14647780
	-> Comparing positions: 2 with 0 has:14647780
	-> Only read nSites: 14647780 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300150
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300150] from pop0:	71601
	-> Sites to keep[DPSCF300150] from pop1:	71601
	-> Sites to keep[DPSCF300150] from pop2:	71601
	-> [readdata] lastread:71601 posi:5759
	-> Comparing positions: 1 with 0 has:14719381
	-> Comparing positions: 2 with 0 has:14719381
	-> Only read nSites: 14719381 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300151
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300151] from pop0:	53052
	-> Sites to keep[DPSCF300151] from pop1:	53052
	-> Sites to keep[DPSCF300151] from pop2:	53052
	-> [readdata] lastread:53052 posi:5759
	-> Comparing positions: 1 with 0 has:14772433
	-> Comparing positions: 2 with 0 has:14772433
	-> Only read nSites: 14772433 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300152
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300152] from pop0:	61812
	-> Sites to keep[DPSCF300152] from pop1:	61812
	-> Sites to keep[DPSCF300152] from pop2:	61812
	-> [readdata] lastread:61812 posi:5759
	-> Comparing positions: 1 with 0 has:14834245
	-> Comparing positions: 2 with 0 has:14834245
	-> Only read nSites: 14834245 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300153
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300153] from pop0:	24099
	-> Sites to keep[DPSCF300153] from pop1:	24099
	-> Sites to keep[DPSCF300153] from pop2:	24099
	-> [readdata] lastread:24099 posi:5759
	-> Comparing positions: 1 with 0 has:14858344
	-> Comparing positions: 2 with 0 has:14858344
	-> Only read nSites: 14858344 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300154
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300154] from pop0:	41710
	-> Sites to keep[DPSCF300154] from pop1:	41710
	-> Sites to keep[DPSCF300154] from pop2:	41710
	-> [readdata] lastread:41710 posi:5759
	-> Comparing positions: 1 with 0 has:14900054
	-> Comparing positions: 2 with 0 has:14900054
	-> Only read nSites: 14900054 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300155
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300155] from pop0:	34665
	-> Sites to keep[DPSCF300155] from pop1:	34665
	-> Sites to keep[DPSCF300155] from pop2:	34665
	-> [readdata] lastread:34665 posi:5759
	-> Comparing positions: 1 with 0 has:14934719
	-> Comparing positions: 2 with 0 has:14934719
	-> Only read nSites: 14934719 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300156
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300156] from pop0:	65088
	-> Sites to keep[DPSCF300156] from pop1:	65088
	-> Sites to keep[DPSCF300156] from pop2:	65088
	-> [readdata] lastread:65088 posi:5759
	-> Comparing positions: 1 with 0 has:14999807
	-> Comparing positions: 2 with 0 has:14999807
	-> Only read nSites: 14999807 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300157
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300157] from pop0:	25570
	-> Sites to keep[DPSCF300157] from pop1:	25570
	-> Sites to keep[DPSCF300157] from pop2:	25570
	-> Has read 5.000000mio sites now at: 15000000      	-> Has read 5.000000mio sites now at: 15000000      	-> Has read 5.000000mio sites now at: 15000000      	-> [readdata] lastread:25570 posi:5759
	-> Comparing positions: 1 with 0 has:15025377
	-> Comparing positions: 2 with 0 has:15025377
	-> Only read nSites: 15025377 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300158
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300158] from pop0:	28203
	-> Sites to keep[DPSCF300158] from pop1:	28203
	-> Sites to keep[DPSCF300158] from pop2:	28203
	-> [readdata] lastread:28203 posi:5759
	-> Comparing positions: 1 with 0 has:15053580
	-> Comparing positions: 2 with 0 has:15053580
	-> Only read nSites: 15053580 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300159
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300159] from pop0:	36214
	-> Sites to keep[DPSCF300159] from pop1:	36214
	-> Sites to keep[DPSCF300159] from pop2:	36214
	-> [readdata] lastread:36214 posi:5759
	-> Comparing positions: 1 with 0 has:15089794
	-> Comparing positions: 2 with 0 has:15089794
	-> Only read nSites: 15089794 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300160
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300160] from pop0:	63090
	-> Sites to keep[DPSCF300160] from pop1:	63090
	-> Sites to keep[DPSCF300160] from pop2:	63090
	-> [readdata] lastread:63090 posi:5759
	-> Comparing positions: 1 with 0 has:15152884
	-> Comparing positions: 2 with 0 has:15152884
	-> Only read nSites: 15152884 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300161
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300161] from pop0:	26052
	-> Sites to keep[DPSCF300161] from pop1:	26052
	-> Sites to keep[DPSCF300161] from pop2:	26052
	-> [readdata] lastread:26052 posi:5759
	-> Comparing positions: 1 with 0 has:15178936
	-> Comparing positions: 2 with 0 has:15178936
	-> Only read nSites: 15178936 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300162
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300162] from pop0:	44145
	-> Sites to keep[DPSCF300162] from pop1:	44145
	-> Sites to keep[DPSCF300162] from pop2:	44145
	-> [readdata] lastread:44145 posi:5759
	-> Comparing positions: 1 with 0 has:15223081
	-> Comparing positions: 2 with 0 has:15223081
	-> Only read nSites: 15223081 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300163
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300163] from pop0:	26209
	-> Sites to keep[DPSCF300163] from pop1:	26209
	-> Sites to keep[DPSCF300163] from pop2:	26209
	-> [readdata] lastread:26209 posi:5759
	-> Comparing positions: 1 with 0 has:15249290
	-> Comparing positions: 2 with 0 has:15249290
	-> Only read nSites: 15249290 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300164
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300164] from pop0:	33820
	-> Sites to keep[DPSCF300164] from pop1:	33820
	-> Sites to keep[DPSCF300164] from pop2:	33820
	-> [readdata] lastread:33820 posi:5759
	-> Comparing positions: 1 with 0 has:15283110
	-> Comparing positions: 2 with 0 has:15283110
	-> Only read nSites: 15283110 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300165
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300165] from pop0:	53071
	-> Sites to keep[DPSCF300165] from pop1:	53071
	-> Sites to keep[DPSCF300165] from pop2:	53071
	-> [readdata] lastread:53071 posi:5759
	-> Comparing positions: 1 with 0 has:15336181
	-> Comparing positions: 2 with 0 has:15336181
	-> Only read nSites: 15336181 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300166
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300166] from pop0:	28745
	-> Sites to keep[DPSCF300166] from pop1:	28745
	-> Sites to keep[DPSCF300166] from pop2:	28745
	-> [readdata] lastread:28745 posi:5759
	-> Comparing positions: 1 with 0 has:15364926
	-> Comparing positions: 2 with 0 has:15364926
	-> Only read nSites: 15364926 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300167
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300167] from pop0:	36438
	-> Sites to keep[DPSCF300167] from pop1:	36438
	-> Sites to keep[DPSCF300167] from pop2:	36438
	-> [readdata] lastread:36438 posi:5759
	-> Comparing positions: 1 with 0 has:15401364
	-> Comparing positions: 2 with 0 has:15401364
	-> Only read nSites: 15401364 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300168
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300168] from pop0:	96599
	-> Sites to keep[DPSCF300168] from pop1:	96599
	-> Sites to keep[DPSCF300168] from pop2:	96599
	-> [readdata] lastread:96599 posi:5759
	-> Comparing positions: 1 with 0 has:15497963
	-> Comparing positions: 2 with 0 has:15497963
	-> Only read nSites: 15497963 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300169
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300169] from pop0:	37981
	-> Sites to keep[DPSCF300169] from pop1:	37981
	-> Sites to keep[DPSCF300169] from pop2:	37981
	-> [readdata] lastread:37981 posi:5759
	-> Comparing positions: 1 with 0 has:15535944
	-> Comparing positions: 2 with 0 has:15535944
	-> Only read nSites: 15535944 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300170
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300170] from pop0:	50358
	-> Sites to keep[DPSCF300170] from pop1:	50358
	-> Sites to keep[DPSCF300170] from pop2:	50358
	-> [readdata] lastread:50358 posi:5759
	-> Comparing positions: 1 with 0 has:15586302
	-> Comparing positions: 2 with 0 has:15586302
	-> Only read nSites: 15586302 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300171
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300171] from pop0:	60911
	-> Sites to keep[DPSCF300171] from pop1:	60911
	-> Sites to keep[DPSCF300171] from pop2:	60911
	-> [readdata] lastread:60911 posi:5759
	-> Comparing positions: 1 with 0 has:15647213
	-> Comparing positions: 2 with 0 has:15647213
	-> Only read nSites: 15647213 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300172
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300172] from pop0:	29998
	-> Sites to keep[DPSCF300172] from pop1:	29998
	-> Sites to keep[DPSCF300172] from pop2:	29998
	-> [readdata] lastread:29998 posi:5759
	-> Comparing positions: 1 with 0 has:15677211
	-> Comparing positions: 2 with 0 has:15677211
	-> Only read nSites: 15677211 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300173
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300173] from pop0:	68865
	-> Sites to keep[DPSCF300173] from pop1:	68865
	-> Sites to keep[DPSCF300173] from pop2:	68865
	-> [readdata] lastread:68865 posi:5759
	-> Comparing positions: 1 with 0 has:15746076
	-> Comparing positions: 2 with 0 has:15746076
	-> Only read nSites: 15746076 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300174
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300174] from pop0:	53692
	-> Sites to keep[DPSCF300174] from pop1:	53692
	-> Sites to keep[DPSCF300174] from pop2:	53692
	-> [readdata] lastread:53692 posi:5759
	-> Comparing positions: 1 with 0 has:15799768
	-> Comparing positions: 2 with 0 has:15799768
	-> Only read nSites: 15799768 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300175
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300175] from pop0:	41689
	-> Sites to keep[DPSCF300175] from pop1:	41689
	-> Sites to keep[DPSCF300175] from pop2:	41689
	-> [readdata] lastread:41689 posi:5759
	-> Comparing positions: 1 with 0 has:15841457
	-> Comparing positions: 2 with 0 has:15841457
	-> Only read nSites: 15841457 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300176
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300176] from pop0:	100438
	-> Sites to keep[DPSCF300176] from pop1:	100438
	-> Sites to keep[DPSCF300176] from pop2:	100438
	-> [readdata] lastread:100438 posi:5759
	-> Comparing positions: 1 with 0 has:15941895
	-> Comparing positions: 2 with 0 has:15941895
	-> Only read nSites: 15941895 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300177
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300177] from pop0:	62504
	-> Sites to keep[DPSCF300177] from pop1:	62504
	-> Sites to keep[DPSCF300177] from pop2:	62504
	-> [readdata] lastread:62504 posi:5759
	-> Comparing positions: 1 with 0 has:16004399
	-> Comparing positions: 2 with 0 has:16004399
	-> Only read nSites: 16004399 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300178
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300178] from pop0:	40713
	-> Sites to keep[DPSCF300178] from pop1:	40713
	-> Sites to keep[DPSCF300178] from pop2:	40713
	-> [readdata] lastread:40713 posi:5759
	-> Comparing positions: 1 with 0 has:16045112
	-> Comparing positions: 2 with 0 has:16045112
	-> Only read nSites: 16045112 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300179
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300179] from pop0:	40873
	-> Sites to keep[DPSCF300179] from pop1:	40873
	-> Sites to keep[DPSCF300179] from pop2:	40873
	-> [readdata] lastread:40873 posi:5759
	-> Comparing positions: 1 with 0 has:16085985
	-> Comparing positions: 2 with 0 has:16085985
	-> Only read nSites: 16085985 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300180
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300180] from pop0:	36870
	-> Sites to keep[DPSCF300180] from pop1:	36870
	-> Sites to keep[DPSCF300180] from pop2:	36870
	-> [readdata] lastread:36870 posi:5759
	-> Comparing positions: 1 with 0 has:16122855
	-> Comparing positions: 2 with 0 has:16122855
	-> Only read nSites: 16122855 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300181
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300181] from pop0:	23809
	-> Sites to keep[DPSCF300181] from pop1:	23809
	-> Sites to keep[DPSCF300181] from pop2:	23809
	-> [readdata] lastread:23809 posi:5759
	-> Comparing positions: 1 with 0 has:16146664
	-> Comparing positions: 2 with 0 has:16146664
	-> Only read nSites: 16146664 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300182
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300182] from pop0:	68573
	-> Sites to keep[DPSCF300182] from pop1:	68573
	-> Sites to keep[DPSCF300182] from pop2:	68573
	-> [readdata] lastread:68573 posi:5759
	-> Comparing positions: 1 with 0 has:16215237
	-> Comparing positions: 2 with 0 has:16215237
	-> Only read nSites: 16215237 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300183
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300183] from pop0:	33076
	-> Sites to keep[DPSCF300183] from pop1:	33076
	-> Sites to keep[DPSCF300183] from pop2:	33076
	-> [readdata] lastread:33076 posi:5759
	-> Comparing positions: 1 with 0 has:16248313
	-> Comparing positions: 2 with 0 has:16248313
	-> Only read nSites: 16248313 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300184
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300184] from pop0:	43403
	-> Sites to keep[DPSCF300184] from pop1:	43403
	-> Sites to keep[DPSCF300184] from pop2:	43403
	-> [readdata] lastread:43403 posi:5759
	-> Comparing positions: 1 with 0 has:16291716
	-> Comparing positions: 2 with 0 has:16291716
	-> Only read nSites: 16291716 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300185
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300185] from pop0:	44662
	-> Sites to keep[DPSCF300185] from pop1:	44662
	-> Sites to keep[DPSCF300185] from pop2:	44662
	-> [readdata] lastread:44662 posi:5759
	-> Comparing positions: 1 with 0 has:16336378
	-> Comparing positions: 2 with 0 has:16336378
	-> Only read nSites: 16336378 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300186
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300186] from pop0:	49603
	-> Sites to keep[DPSCF300186] from pop1:	49603
	-> Sites to keep[DPSCF300186] from pop2:	49603
	-> [readdata] lastread:49603 posi:5759
	-> Comparing positions: 1 with 0 has:16385981
	-> Comparing positions: 2 with 0 has:16385981
	-> Only read nSites: 16385981 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300187
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300187] from pop0:	27208
	-> Sites to keep[DPSCF300187] from pop1:	27208
	-> Sites to keep[DPSCF300187] from pop2:	27208
	-> [readdata] lastread:27208 posi:5759
	-> Comparing positions: 1 with 0 has:16413189
	-> Comparing positions: 2 with 0 has:16413189
	-> Only read nSites: 16413189 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300188
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300188] from pop0:	47206
	-> Sites to keep[DPSCF300188] from pop1:	47206
	-> Sites to keep[DPSCF300188] from pop2:	47206
	-> [readdata] lastread:47206 posi:5759
	-> Comparing positions: 1 with 0 has:16460395
	-> Comparing positions: 2 with 0 has:16460395
	-> Only read nSites: 16460395 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300189
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300189] from pop0:	24908
	-> Sites to keep[DPSCF300189] from pop1:	24908
	-> Sites to keep[DPSCF300189] from pop2:	24908
	-> [readdata] lastread:24908 posi:5759
	-> Comparing positions: 1 with 0 has:16485303
	-> Comparing positions: 2 with 0 has:16485303
	-> Only read nSites: 16485303 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300190
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300190] from pop0:	26542
	-> Sites to keep[DPSCF300190] from pop1:	26542
	-> Sites to keep[DPSCF300190] from pop2:	26542
	-> [readdata] lastread:26542 posi:5759
	-> Comparing positions: 1 with 0 has:16511845
	-> Comparing positions: 2 with 0 has:16511845
	-> Only read nSites: 16511845 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300191
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300191] from pop0:	123809
	-> Sites to keep[DPSCF300191] from pop1:	123809
	-> Sites to keep[DPSCF300191] from pop2:	123809
	-> [readdata] lastread:123809 posi:5759
	-> Comparing positions: 1 with 0 has:16635654
	-> Comparing positions: 2 with 0 has:16635654
	-> Only read nSites: 16635654 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300192
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300192] from pop0:	50252
	-> Sites to keep[DPSCF300192] from pop1:	50252
	-> Sites to keep[DPSCF300192] from pop2:	50252
	-> [readdata] lastread:50252 posi:5759
	-> Comparing positions: 1 with 0 has:16685906
	-> Comparing positions: 2 with 0 has:16685906
	-> Only read nSites: 16685906 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300193
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300193] from pop0:	27121
	-> Sites to keep[DPSCF300193] from pop1:	27121
	-> Sites to keep[DPSCF300193] from pop2:	27121
	-> [readdata] lastread:27121 posi:5759
	-> Comparing positions: 1 with 0 has:16713027
	-> Comparing positions: 2 with 0 has:16713027
	-> Only read nSites: 16713027 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300194
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300194] from pop0:	19052
	-> Sites to keep[DPSCF300194] from pop1:	19052
	-> Sites to keep[DPSCF300194] from pop2:	19052
	-> [readdata] lastread:19052 posi:5759
	-> Comparing positions: 1 with 0 has:16732079
	-> Comparing positions: 2 with 0 has:16732079
	-> Only read nSites: 16732079 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300195
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300195] from pop0:	54389
	-> Sites to keep[DPSCF300195] from pop1:	54389
	-> Sites to keep[DPSCF300195] from pop2:	54389
	-> [readdata] lastread:54389 posi:5759
	-> Comparing positions: 1 with 0 has:16786468
	-> Comparing positions: 2 with 0 has:16786468
	-> Only read nSites: 16786468 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300196
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300196] from pop0:	86424
	-> Sites to keep[DPSCF300196] from pop1:	86424
	-> Sites to keep[DPSCF300196] from pop2:	86424
	-> [readdata] lastread:86424 posi:5759
	-> Comparing positions: 1 with 0 has:16872892
	-> Comparing positions: 2 with 0 has:16872892
	-> Only read nSites: 16872892 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300197
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300197] from pop0:	28661
	-> Sites to keep[DPSCF300197] from pop1:	28661
	-> Sites to keep[DPSCF300197] from pop2:	28661
	-> [readdata] lastread:28661 posi:5759
	-> Comparing positions: 1 with 0 has:16901553
	-> Comparing positions: 2 with 0 has:16901553
	-> Only read nSites: 16901553 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300198
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300198] from pop0:	24537
	-> Sites to keep[DPSCF300198] from pop1:	24537
	-> Sites to keep[DPSCF300198] from pop2:	24537
	-> [readdata] lastread:24537 posi:5759
	-> Comparing positions: 1 with 0 has:16926090
	-> Comparing positions: 2 with 0 has:16926090
	-> Only read nSites: 16926090 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300199
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300199] from pop0:	24405
	-> Sites to keep[DPSCF300199] from pop1:	24405
	-> Sites to keep[DPSCF300199] from pop2:	24405
	-> [readdata] lastread:24405 posi:5759
	-> Comparing positions: 1 with 0 has:16950495
	-> Comparing positions: 2 with 0 has:16950495
	-> Only read nSites: 16950495 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300200
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300200] from pop0:	21652
	-> Sites to keep[DPSCF300200] from pop1:	21652
	-> Sites to keep[DPSCF300200] from pop2:	21652
	-> [readdata] lastread:21652 posi:5759
	-> Comparing positions: 1 with 0 has:16972147
	-> Comparing positions: 2 with 0 has:16972147
	-> Only read nSites: 16972147 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300201
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300201] from pop0:	31730
	-> Sites to keep[DPSCF300201] from pop1:	31730
	-> Sites to keep[DPSCF300201] from pop2:	31730
	-> [readdata] lastread:31730 posi:5759
	-> Comparing positions: 1 with 0 has:17003877
	-> Comparing positions: 2 with 0 has:17003877
	-> Only read nSites: 17003877 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300202
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300202] from pop0:	36819
	-> Sites to keep[DPSCF300202] from pop1:	36819
	-> Sites to keep[DPSCF300202] from pop2:	36819
	-> [readdata] lastread:36819 posi:5759
	-> Comparing positions: 1 with 0 has:17040696
	-> Comparing positions: 2 with 0 has:17040696
	-> Only read nSites: 17040696 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300203
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300203] from pop0:	44853
	-> Sites to keep[DPSCF300203] from pop1:	44853
	-> Sites to keep[DPSCF300203] from pop2:	44853
	-> [readdata] lastread:44853 posi:5759
	-> Comparing positions: 1 with 0 has:17085549
	-> Comparing positions: 2 with 0 has:17085549
	-> Only read nSites: 17085549 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300204
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300204] from pop0:	22863
	-> Sites to keep[DPSCF300204] from pop1:	22863
	-> Sites to keep[DPSCF300204] from pop2:	22863
	-> [readdata] lastread:22863 posi:5759
	-> Comparing positions: 1 with 0 has:17108412
	-> Comparing positions: 2 with 0 has:17108412
	-> Only read nSites: 17108412 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300205
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300205] from pop0:	30472
	-> Sites to keep[DPSCF300205] from pop1:	30472
	-> Sites to keep[DPSCF300205] from pop2:	30472
	-> [readdata] lastread:30472 posi:5759
	-> Comparing positions: 1 with 0 has:17138884
	-> Comparing positions: 2 with 0 has:17138884
	-> Only read nSites: 17138884 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300206
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300206] from pop0:	22019
	-> Sites to keep[DPSCF300206] from pop1:	22019
	-> Sites to keep[DPSCF300206] from pop2:	22019
	-> [readdata] lastread:22019 posi:5759
	-> Comparing positions: 1 with 0 has:17160903
	-> Comparing positions: 2 with 0 has:17160903
	-> Only read nSites: 17160903 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300207
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300207] from pop0:	33731
	-> Sites to keep[DPSCF300207] from pop1:	33731
	-> Sites to keep[DPSCF300207] from pop2:	33731
	-> [readdata] lastread:33731 posi:5759
	-> Comparing positions: 1 with 0 has:17194634
	-> Comparing positions: 2 with 0 has:17194634
	-> Only read nSites: 17194634 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300208
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300208] from pop0:	61348
	-> Sites to keep[DPSCF300208] from pop1:	61348
	-> Sites to keep[DPSCF300208] from pop2:	61348
	-> [readdata] lastread:61348 posi:5759
	-> Comparing positions: 1 with 0 has:17255982
	-> Comparing positions: 2 with 0 has:17255982
	-> Only read nSites: 17255982 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300209
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300209] from pop0:	22289
	-> Sites to keep[DPSCF300209] from pop1:	22289
	-> Sites to keep[DPSCF300209] from pop2:	22289
	-> [readdata] lastread:22289 posi:5759
	-> Comparing positions: 1 with 0 has:17278271
	-> Comparing positions: 2 with 0 has:17278271
	-> Only read nSites: 17278271 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300210
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300210] from pop0:	29555
	-> Sites to keep[DPSCF300210] from pop1:	29555
	-> Sites to keep[DPSCF300210] from pop2:	29555
	-> [readdata] lastread:29555 posi:5759
	-> Comparing positions: 1 with 0 has:17307826
	-> Comparing positions: 2 with 0 has:17307826
	-> Only read nSites: 17307826 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300211
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300211] from pop0:	18858
	-> Sites to keep[DPSCF300211] from pop1:	18858
	-> Sites to keep[DPSCF300211] from pop2:	18858
	-> [readdata] lastread:18858 posi:5759
	-> Comparing positions: 1 with 0 has:17326684
	-> Comparing positions: 2 with 0 has:17326684
	-> Only read nSites: 17326684 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300212
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300212] from pop0:	66703
	-> Sites to keep[DPSCF300212] from pop1:	66703
	-> Sites to keep[DPSCF300212] from pop2:	66703
	-> [readdata] lastread:66703 posi:5759
	-> Comparing positions: 1 with 0 has:17393387
	-> Comparing positions: 2 with 0 has:17393387
	-> Only read nSites: 17393387 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300213
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300213] from pop0:	27551
	-> Sites to keep[DPSCF300213] from pop1:	27551
	-> Sites to keep[DPSCF300213] from pop2:	27551
	-> [readdata] lastread:27551 posi:5759
	-> Comparing positions: 1 with 0 has:17420938
	-> Comparing positions: 2 with 0 has:17420938
	-> Only read nSites: 17420938 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300214
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300214] from pop0:	29782
	-> Sites to keep[DPSCF300214] from pop1:	29782
	-> Sites to keep[DPSCF300214] from pop2:	29782
	-> [readdata] lastread:29782 posi:5759
	-> Comparing positions: 1 with 0 has:17450720
	-> Comparing positions: 2 with 0 has:17450720
	-> Only read nSites: 17450720 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300215
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300215] from pop0:	27159
	-> Sites to keep[DPSCF300215] from pop1:	27159
	-> Sites to keep[DPSCF300215] from pop2:	27159
	-> [readdata] lastread:27159 posi:5759
	-> Comparing positions: 1 with 0 has:17477879
	-> Comparing positions: 2 with 0 has:17477879
	-> Only read nSites: 17477879 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300216
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300216] from pop0:	28392
	-> Sites to keep[DPSCF300216] from pop1:	28392
	-> Sites to keep[DPSCF300216] from pop2:	28392
	-> [readdata] lastread:28392 posi:5759
	-> Comparing positions: 1 with 0 has:17506271
	-> Comparing positions: 2 with 0 has:17506271
	-> Only read nSites: 17506271 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300217
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300217] from pop0:	25021
	-> Sites to keep[DPSCF300217] from pop1:	25021
	-> Sites to keep[DPSCF300217] from pop2:	25021
	-> [readdata] lastread:25021 posi:5759
	-> Comparing positions: 1 with 0 has:17531292
	-> Comparing positions: 2 with 0 has:17531292
	-> Only read nSites: 17531292 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300218
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300218] from pop0:	29207
	-> Sites to keep[DPSCF300218] from pop1:	29207
	-> Sites to keep[DPSCF300218] from pop2:	29207
	-> [readdata] lastread:29207 posi:5759
	-> Comparing positions: 1 with 0 has:17560499
	-> Comparing positions: 2 with 0 has:17560499
	-> Only read nSites: 17560499 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300219
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300219] from pop0:	53143
	-> Sites to keep[DPSCF300219] from pop1:	53143
	-> Sites to keep[DPSCF300219] from pop2:	53143
	-> [readdata] lastread:53143 posi:5759
	-> Comparing positions: 1 with 0 has:17613642
	-> Comparing positions: 2 with 0 has:17613642
	-> Only read nSites: 17613642 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300220
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300220] from pop0:	21147
	-> Sites to keep[DPSCF300220] from pop1:	21147
	-> Sites to keep[DPSCF300220] from pop2:	21147
	-> [readdata] lastread:21147 posi:5759
	-> Comparing positions: 1 with 0 has:17634789
	-> Comparing positions: 2 with 0 has:17634789
	-> Only read nSites: 17634789 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300221
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300221] from pop0:	51186
	-> Sites to keep[DPSCF300221] from pop1:	51186
	-> Sites to keep[DPSCF300221] from pop2:	51186
	-> [readdata] lastread:51186 posi:5759
	-> Comparing positions: 1 with 0 has:17685975
	-> Comparing positions: 2 with 0 has:17685975
	-> Only read nSites: 17685975 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300222
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300222] from pop0:	59232
	-> Sites to keep[DPSCF300222] from pop1:	59232
	-> Sites to keep[DPSCF300222] from pop2:	59232
	-> [readdata] lastread:59232 posi:5759
	-> Comparing positions: 1 with 0 has:17745207
	-> Comparing positions: 2 with 0 has:17745207
	-> Only read nSites: 17745207 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300223
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300223] from pop0:	82050
	-> Sites to keep[DPSCF300223] from pop1:	82050
	-> Sites to keep[DPSCF300223] from pop2:	82050
	-> [readdata] lastread:82050 posi:5759
	-> Comparing positions: 1 with 0 has:17827257
	-> Comparing positions: 2 with 0 has:17827257
	-> Only read nSites: 17827257 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300224
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300224] from pop0:	19911
	-> Sites to keep[DPSCF300224] from pop1:	19911
	-> Sites to keep[DPSCF300224] from pop2:	19911
	-> [readdata] lastread:19911 posi:5759
	-> Comparing positions: 1 with 0 has:17847168
	-> Comparing positions: 2 with 0 has:17847168
	-> Only read nSites: 17847168 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300225
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300225] from pop0:	21148
	-> Sites to keep[DPSCF300225] from pop1:	21148
	-> Sites to keep[DPSCF300225] from pop2:	21148
	-> [readdata] lastread:21148 posi:5759
	-> Comparing positions: 1 with 0 has:17868316
	-> Comparing positions: 2 with 0 has:17868316
	-> Only read nSites: 17868316 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300226
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300226] from pop0:	27867
	-> Sites to keep[DPSCF300226] from pop1:	27867
	-> Sites to keep[DPSCF300226] from pop2:	27867
	-> [readdata] lastread:27867 posi:5759
	-> Comparing positions: 1 with 0 has:17896183
	-> Comparing positions: 2 with 0 has:17896183
	-> Only read nSites: 17896183 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300227
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300227] from pop0:	34591
	-> Sites to keep[DPSCF300227] from pop1:	34591
	-> Sites to keep[DPSCF300227] from pop2:	34591
	-> [readdata] lastread:34591 posi:5759
	-> Comparing positions: 1 with 0 has:17930774
	-> Comparing positions: 2 with 0 has:17930774
	-> Only read nSites: 17930774 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300228
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300228] from pop0:	19937
	-> Sites to keep[DPSCF300228] from pop1:	19937
	-> Sites to keep[DPSCF300228] from pop2:	19937
	-> [readdata] lastread:19937 posi:5759
	-> Comparing positions: 1 with 0 has:17950711
	-> Comparing positions: 2 with 0 has:17950711
	-> Only read nSites: 17950711 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300229
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300229] from pop0:	41762
	-> Sites to keep[DPSCF300229] from pop1:	41762
	-> Sites to keep[DPSCF300229] from pop2:	41762
	-> [readdata] lastread:41762 posi:5759
	-> Comparing positions: 1 with 0 has:17992473
	-> Comparing positions: 2 with 0 has:17992473
	-> Only read nSites: 17992473 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300230
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300230] from pop0:	24336
	-> Sites to keep[DPSCF300230] from pop1:	24336
	-> Sites to keep[DPSCF300230] from pop2:	24336
	-> [readdata] lastread:24336 posi:5759
	-> Comparing positions: 1 with 0 has:18016809
	-> Comparing positions: 2 with 0 has:18016809
	-> Only read nSites: 18016809 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300231
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300231] from pop0:	95423
	-> Sites to keep[DPSCF300231] from pop1:	95423
	-> Sites to keep[DPSCF300231] from pop2:	95423
	-> [readdata] lastread:95423 posi:5759
	-> Comparing positions: 1 with 0 has:18112232
	-> Comparing positions: 2 with 0 has:18112232
	-> Only read nSites: 18112232 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300232
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300232] from pop0:	68791
	-> Sites to keep[DPSCF300232] from pop1:	68791
	-> Sites to keep[DPSCF300232] from pop2:	68791
	-> [readdata] lastread:68791 posi:5759
	-> Comparing positions: 1 with 0 has:18181023
	-> Comparing positions: 2 with 0 has:18181023
	-> Only read nSites: 18181023 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300233
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300233] from pop0:	31128
	-> Sites to keep[DPSCF300233] from pop1:	31128
	-> Sites to keep[DPSCF300233] from pop2:	31128
	-> [readdata] lastread:31128 posi:5759
	-> Comparing positions: 1 with 0 has:18212151
	-> Comparing positions: 2 with 0 has:18212151
	-> Only read nSites: 18212151 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300234
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300234] from pop0:	60211
	-> Sites to keep[DPSCF300234] from pop1:	60211
	-> Sites to keep[DPSCF300234] from pop2:	60211
	-> [readdata] lastread:60211 posi:5759
	-> Comparing positions: 1 with 0 has:18272362
	-> Comparing positions: 2 with 0 has:18272362
	-> Only read nSites: 18272362 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300235
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300235] from pop0:	43454
	-> Sites to keep[DPSCF300235] from pop1:	43454
	-> Sites to keep[DPSCF300235] from pop2:	43454
	-> [readdata] lastread:43454 posi:5759
	-> Comparing positions: 1 with 0 has:18315816
	-> Comparing positions: 2 with 0 has:18315816
	-> Only read nSites: 18315816 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300236
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300236] from pop0:	50323
	-> Sites to keep[DPSCF300236] from pop1:	50323
	-> Sites to keep[DPSCF300236] from pop2:	50323
	-> [readdata] lastread:50323 posi:5759
	-> Comparing positions: 1 with 0 has:18366139
	-> Comparing positions: 2 with 0 has:18366139
	-> Only read nSites: 18366139 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300237
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300237] from pop0:	30067
	-> Sites to keep[DPSCF300237] from pop1:	30067
	-> Sites to keep[DPSCF300237] from pop2:	30067
	-> [readdata] lastread:30067 posi:5759
	-> Comparing positions: 1 with 0 has:18396206
	-> Comparing positions: 2 with 0 has:18396206
	-> Only read nSites: 18396206 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300238
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300238] from pop0:	27417
	-> Sites to keep[DPSCF300238] from pop1:	27417
	-> Sites to keep[DPSCF300238] from pop2:	27417
	-> [readdata] lastread:27417 posi:5759
	-> Comparing positions: 1 with 0 has:18423623
	-> Comparing positions: 2 with 0 has:18423623
	-> Only read nSites: 18423623 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300239
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300239] from pop0:	24516
	-> Sites to keep[DPSCF300239] from pop1:	24516
	-> Sites to keep[DPSCF300239] from pop2:	24516
	-> [readdata] lastread:24516 posi:5759
	-> Comparing positions: 1 with 0 has:18448139
	-> Comparing positions: 2 with 0 has:18448139
	-> Only read nSites: 18448139 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300240
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300240] from pop0:	22292
	-> Sites to keep[DPSCF300240] from pop1:	22292
	-> Sites to keep[DPSCF300240] from pop2:	22292
	-> [readdata] lastread:22292 posi:5759
	-> Comparing positions: 1 with 0 has:18470431
	-> Comparing positions: 2 with 0 has:18470431
	-> Only read nSites: 18470431 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300241
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300241] from pop0:	17246
	-> Sites to keep[DPSCF300241] from pop1:	17246
	-> Sites to keep[DPSCF300241] from pop2:	17246
	-> [readdata] lastread:17246 posi:5759
	-> Comparing positions: 1 with 0 has:18487677
	-> Comparing positions: 2 with 0 has:18487677
	-> Only read nSites: 18487677 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300242
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300242] from pop0:	31647
	-> Sites to keep[DPSCF300242] from pop1:	31647
	-> Sites to keep[DPSCF300242] from pop2:	31647
	-> [readdata] lastread:31647 posi:5759
	-> Comparing positions: 1 with 0 has:18519324
	-> Comparing positions: 2 with 0 has:18519324
	-> Only read nSites: 18519324 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300243
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300243] from pop0:	16791
	-> Sites to keep[DPSCF300243] from pop1:	16791
	-> Sites to keep[DPSCF300243] from pop2:	16791
	-> [readdata] lastread:16791 posi:5759
	-> Comparing positions: 1 with 0 has:18536115
	-> Comparing positions: 2 with 0 has:18536115
	-> Only read nSites: 18536115 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300244
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300244] from pop0:	18557
	-> Sites to keep[DPSCF300244] from pop1:	18557
	-> Sites to keep[DPSCF300244] from pop2:	18557
	-> [readdata] lastread:18557 posi:5759
	-> Comparing positions: 1 with 0 has:18554672
	-> Comparing positions: 2 with 0 has:18554672
	-> Only read nSites: 18554672 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300245
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300245] from pop0:	35521
	-> Sites to keep[DPSCF300245] from pop1:	35521
	-> Sites to keep[DPSCF300245] from pop2:	35521
	-> [readdata] lastread:35521 posi:5759
	-> Comparing positions: 1 with 0 has:18590193
	-> Comparing positions: 2 with 0 has:18590193
	-> Only read nSites: 18590193 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300246
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300246] from pop0:	14717
	-> Sites to keep[DPSCF300246] from pop1:	14717
	-> Sites to keep[DPSCF300246] from pop2:	14717
	-> [readdata] lastread:14717 posi:5759
	-> Comparing positions: 1 with 0 has:18604910
	-> Comparing positions: 2 with 0 has:18604910
	-> Only read nSites: 18604910 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300247
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300247] from pop0:	34786
	-> Sites to keep[DPSCF300247] from pop1:	34786
	-> Sites to keep[DPSCF300247] from pop2:	34786
	-> [readdata] lastread:34786 posi:5759
	-> Comparing positions: 1 with 0 has:18639696
	-> Comparing positions: 2 with 0 has:18639696
	-> Only read nSites: 18639696 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300248
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300248] from pop0:	23314
	-> Sites to keep[DPSCF300248] from pop1:	23314
	-> Sites to keep[DPSCF300248] from pop2:	23314
	-> [readdata] lastread:23314 posi:5759
	-> Comparing positions: 1 with 0 has:18663010
	-> Comparing positions: 2 with 0 has:18663010
	-> Only read nSites: 18663010 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300249
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300249] from pop0:	19962
	-> Sites to keep[DPSCF300249] from pop1:	19962
	-> Sites to keep[DPSCF300249] from pop2:	19962
	-> [readdata] lastread:19962 posi:5759
	-> Comparing positions: 1 with 0 has:18682972
	-> Comparing positions: 2 with 0 has:18682972
	-> Only read nSites: 18682972 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300250
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300250] from pop0:	63192
	-> Sites to keep[DPSCF300250] from pop1:	63192
	-> Sites to keep[DPSCF300250] from pop2:	63192
	-> [readdata] lastread:63192 posi:5759
	-> Comparing positions: 1 with 0 has:18746164
	-> Comparing positions: 2 with 0 has:18746164
	-> Only read nSites: 18746164 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300251
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300251] from pop0:	27620
	-> Sites to keep[DPSCF300251] from pop1:	27620
	-> Sites to keep[DPSCF300251] from pop2:	27620
	-> [readdata] lastread:27620 posi:5759
	-> Comparing positions: 1 with 0 has:18773784
	-> Comparing positions: 2 with 0 has:18773784
	-> Only read nSites: 18773784 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300252
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300252] from pop0:	17460
	-> Sites to keep[DPSCF300252] from pop1:	17460
	-> Sites to keep[DPSCF300252] from pop2:	17460
	-> [readdata] lastread:17460 posi:5759
	-> Comparing positions: 1 with 0 has:18791244
	-> Comparing positions: 2 with 0 has:18791244
	-> Only read nSites: 18791244 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300253
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300253] from pop0:	31224
	-> Sites to keep[DPSCF300253] from pop1:	31224
	-> Sites to keep[DPSCF300253] from pop2:	31224
	-> [readdata] lastread:31224 posi:5759
	-> Comparing positions: 1 with 0 has:18822468
	-> Comparing positions: 2 with 0 has:18822468
	-> Only read nSites: 18822468 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300254
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300254] from pop0:	28749
	-> Sites to keep[DPSCF300254] from pop1:	28749
	-> Sites to keep[DPSCF300254] from pop2:	28749
	-> [readdata] lastread:28749 posi:5759
	-> Comparing positions: 1 with 0 has:18851217
	-> Comparing positions: 2 with 0 has:18851217
	-> Only read nSites: 18851217 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300255
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300255] from pop0:	14645
	-> Sites to keep[DPSCF300255] from pop1:	14645
	-> Sites to keep[DPSCF300255] from pop2:	14645
	-> [readdata] lastread:14645 posi:5759
	-> Comparing positions: 1 with 0 has:18865862
	-> Comparing positions: 2 with 0 has:18865862
	-> Only read nSites: 18865862 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300256
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300256] from pop0:	60061
	-> Sites to keep[DPSCF300256] from pop1:	60061
	-> Sites to keep[DPSCF300256] from pop2:	60061
	-> [readdata] lastread:60061 posi:5759
	-> Comparing positions: 1 with 0 has:18925923
	-> Comparing positions: 2 with 0 has:18925923
	-> Only read nSites: 18925923 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300257
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300257] from pop0:	32837
	-> Sites to keep[DPSCF300257] from pop1:	32837
	-> Sites to keep[DPSCF300257] from pop2:	32837
	-> [readdata] lastread:32837 posi:5759
	-> Comparing positions: 1 with 0 has:18958760
	-> Comparing positions: 2 with 0 has:18958760
	-> Only read nSites: 18958760 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300258
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300258] from pop0:	47099
	-> Sites to keep[DPSCF300258] from pop1:	47099
	-> Sites to keep[DPSCF300258] from pop2:	47099
	-> [readdata] lastread:47099 posi:5759
	-> Comparing positions: 1 with 0 has:19005859
	-> Comparing positions: 2 with 0 has:19005859
	-> Only read nSites: 19005859 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300259
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300259] from pop0:	23036
	-> Sites to keep[DPSCF300259] from pop1:	23036
	-> Sites to keep[DPSCF300259] from pop2:	23036
	-> [readdata] lastread:23036 posi:5759
	-> Comparing positions: 1 with 0 has:19028895
	-> Comparing positions: 2 with 0 has:19028895
	-> Only read nSites: 19028895 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300260
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300260] from pop0:	34189
	-> Sites to keep[DPSCF300260] from pop1:	34189
	-> Sites to keep[DPSCF300260] from pop2:	34189
	-> [readdata] lastread:34189 posi:5759
	-> Comparing positions: 1 with 0 has:19063084
	-> Comparing positions: 2 with 0 has:19063084
	-> Only read nSites: 19063084 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300261
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300261] from pop0:	36055
	-> Sites to keep[DPSCF300261] from pop1:	36055
	-> Sites to keep[DPSCF300261] from pop2:	36055
	-> [readdata] lastread:36055 posi:5759
	-> Comparing positions: 1 with 0 has:19099139
	-> Comparing positions: 2 with 0 has:19099139
	-> Only read nSites: 19099139 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300262
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300262] from pop0:	67612
	-> Sites to keep[DPSCF300262] from pop1:	67612
	-> Sites to keep[DPSCF300262] from pop2:	67612
	-> [readdata] lastread:67612 posi:5759
	-> Comparing positions: 1 with 0 has:19166751
	-> Comparing positions: 2 with 0 has:19166751
	-> Only read nSites: 19166751 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300263
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300263] from pop0:	41236
	-> Sites to keep[DPSCF300263] from pop1:	41236
	-> Sites to keep[DPSCF300263] from pop2:	41236
	-> [readdata] lastread:41236 posi:5759
	-> Comparing positions: 1 with 0 has:19207987
	-> Comparing positions: 2 with 0 has:19207987
	-> Only read nSites: 19207987 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300264
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300264] from pop0:	21977
	-> Sites to keep[DPSCF300264] from pop1:	21977
	-> Sites to keep[DPSCF300264] from pop2:	21977
	-> [readdata] lastread:21977 posi:5759
	-> Comparing positions: 1 with 0 has:19229964
	-> Comparing positions: 2 with 0 has:19229964
	-> Only read nSites: 19229964 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300265
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300265] from pop0:	41287
	-> Sites to keep[DPSCF300265] from pop1:	41287
	-> Sites to keep[DPSCF300265] from pop2:	41287
	-> [readdata] lastread:41287 posi:5759
	-> Comparing positions: 1 with 0 has:19271251
	-> Comparing positions: 2 with 0 has:19271251
	-> Only read nSites: 19271251 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300266
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300266] from pop0:	27458
	-> Sites to keep[DPSCF300266] from pop1:	27458
	-> Sites to keep[DPSCF300266] from pop2:	27458
	-> [readdata] lastread:27458 posi:5759
	-> Comparing positions: 1 with 0 has:19298709
	-> Comparing positions: 2 with 0 has:19298709
	-> Only read nSites: 19298709 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300267
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300267] from pop0:	23127
	-> Sites to keep[DPSCF300267] from pop1:	23127
	-> Sites to keep[DPSCF300267] from pop2:	23127
	-> [readdata] lastread:23127 posi:5759
	-> Comparing positions: 1 with 0 has:19321836
	-> Comparing positions: 2 with 0 has:19321836
	-> Only read nSites: 19321836 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300268
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300268] from pop0:	28006
	-> Sites to keep[DPSCF300268] from pop1:	28006
	-> Sites to keep[DPSCF300268] from pop2:	28006
	-> [readdata] lastread:28006 posi:5759
	-> Comparing positions: 1 with 0 has:19349842
	-> Comparing positions: 2 with 0 has:19349842
	-> Only read nSites: 19349842 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300269
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300269] from pop0:	23940
	-> Sites to keep[DPSCF300269] from pop1:	23940
	-> Sites to keep[DPSCF300269] from pop2:	23940
	-> [readdata] lastread:23940 posi:5759
	-> Comparing positions: 1 with 0 has:19373782
	-> Comparing positions: 2 with 0 has:19373782
	-> Only read nSites: 19373782 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300270
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300270] from pop0:	11936
	-> Sites to keep[DPSCF300270] from pop1:	11936
	-> Sites to keep[DPSCF300270] from pop2:	11936
	-> [readdata] lastread:11936 posi:5759
	-> Comparing positions: 1 with 0 has:19385718
	-> Comparing positions: 2 with 0 has:19385718
	-> Only read nSites: 19385718 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300271
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300271] from pop0:	27649
	-> Sites to keep[DPSCF300271] from pop1:	27649
	-> Sites to keep[DPSCF300271] from pop2:	27649
	-> [readdata] lastread:27649 posi:5759
	-> Comparing positions: 1 with 0 has:19413367
	-> Comparing positions: 2 with 0 has:19413367
	-> Only read nSites: 19413367 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300272
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300272] from pop0:	25661
	-> Sites to keep[DPSCF300272] from pop1:	25661
	-> Sites to keep[DPSCF300272] from pop2:	25661
	-> [readdata] lastread:25661 posi:5759
	-> Comparing positions: 1 with 0 has:19439028
	-> Comparing positions: 2 with 0 has:19439028
	-> Only read nSites: 19439028 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300273
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300273] from pop0:	34936
	-> Sites to keep[DPSCF300273] from pop1:	34936
	-> Sites to keep[DPSCF300273] from pop2:	34936
	-> [readdata] lastread:34936 posi:5759
	-> Comparing positions: 1 with 0 has:19473964
	-> Comparing positions: 2 with 0 has:19473964
	-> Only read nSites: 19473964 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300274
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300274] from pop0:	21886
	-> Sites to keep[DPSCF300274] from pop1:	21886
	-> Sites to keep[DPSCF300274] from pop2:	21886
	-> [readdata] lastread:21886 posi:5759
	-> Comparing positions: 1 with 0 has:19495850
	-> Comparing positions: 2 with 0 has:19495850
	-> Only read nSites: 19495850 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300275
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300275] from pop0:	59221
	-> Sites to keep[DPSCF300275] from pop1:	59221
	-> Sites to keep[DPSCF300275] from pop2:	59221
	-> [readdata] lastread:59221 posi:5759
	-> Comparing positions: 1 with 0 has:19555071
	-> Comparing positions: 2 with 0 has:19555071
	-> Only read nSites: 19555071 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300276
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300276] from pop0:	36403
	-> Sites to keep[DPSCF300276] from pop1:	36403
	-> Sites to keep[DPSCF300276] from pop2:	36403
	-> [readdata] lastread:36403 posi:5759
	-> Comparing positions: 1 with 0 has:19591474
	-> Comparing positions: 2 with 0 has:19591474
	-> Only read nSites: 19591474 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300277
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300277] from pop0:	24510
	-> Sites to keep[DPSCF300277] from pop1:	24510
	-> Sites to keep[DPSCF300277] from pop2:	24510
	-> [readdata] lastread:24510 posi:5759
	-> Comparing positions: 1 with 0 has:19615984
	-> Comparing positions: 2 with 0 has:19615984
	-> Only read nSites: 19615984 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300278
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300278] from pop0:	12087
	-> Sites to keep[DPSCF300278] from pop1:	12087
	-> Sites to keep[DPSCF300278] from pop2:	12087
	-> [readdata] lastread:12087 posi:5759
	-> Comparing positions: 1 with 0 has:19628071
	-> Comparing positions: 2 with 0 has:19628071
	-> Only read nSites: 19628071 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300279
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300279] from pop0:	27425
	-> Sites to keep[DPSCF300279] from pop1:	27425
	-> Sites to keep[DPSCF300279] from pop2:	27425
	-> [readdata] lastread:27425 posi:5759
	-> Comparing positions: 1 with 0 has:19655496
	-> Comparing positions: 2 with 0 has:19655496
	-> Only read nSites: 19655496 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300280
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300280] from pop0:	32876
	-> Sites to keep[DPSCF300280] from pop1:	32876
	-> Sites to keep[DPSCF300280] from pop2:	32876
	-> [readdata] lastread:32876 posi:5759
	-> Comparing positions: 1 with 0 has:19688372
	-> Comparing positions: 2 with 0 has:19688372
	-> Only read nSites: 19688372 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300281
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300281] from pop0:	32784
	-> Sites to keep[DPSCF300281] from pop1:	32784
	-> Sites to keep[DPSCF300281] from pop2:	32784
	-> [readdata] lastread:32784 posi:5759
	-> Comparing positions: 1 with 0 has:19721156
	-> Comparing positions: 2 with 0 has:19721156
	-> Only read nSites: 19721156 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300282
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300282] from pop0:	20054
	-> Sites to keep[DPSCF300282] from pop1:	20054
	-> Sites to keep[DPSCF300282] from pop2:	20054
	-> [readdata] lastread:20054 posi:5759
	-> Comparing positions: 1 with 0 has:19741210
	-> Comparing positions: 2 with 0 has:19741210
	-> Only read nSites: 19741210 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300283
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300283] from pop0:	20121
	-> Sites to keep[DPSCF300283] from pop1:	20121
	-> Sites to keep[DPSCF300283] from pop2:	20121
	-> [readdata] lastread:20121 posi:5759
	-> Comparing positions: 1 with 0 has:19761331
	-> Comparing positions: 2 with 0 has:19761331
	-> Only read nSites: 19761331 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300284
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300284] from pop0:	20867
	-> Sites to keep[DPSCF300284] from pop1:	20867
	-> Sites to keep[DPSCF300284] from pop2:	20867
	-> [readdata] lastread:20867 posi:5759
	-> Comparing positions: 1 with 0 has:19782198
	-> Comparing positions: 2 with 0 has:19782198
	-> Only read nSites: 19782198 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300285
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300285] from pop0:	7153
	-> Sites to keep[DPSCF300285] from pop1:	7153
	-> Sites to keep[DPSCF300285] from pop2:	7153
	-> [readdata] lastread:7153 posi:5759
	-> Comparing positions: 1 with 0 has:19789351
	-> Comparing positions: 2 with 0 has:19789351
	-> Only read nSites: 19789351 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300286
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300286] from pop0:	18491
	-> Sites to keep[DPSCF300286] from pop1:	18491
	-> Sites to keep[DPSCF300286] from pop2:	18491
	-> [readdata] lastread:18491 posi:5759
	-> Comparing positions: 1 with 0 has:19807842
	-> Comparing positions: 2 with 0 has:19807842
	-> Only read nSites: 19807842 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300287
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300287] from pop0:	36358
	-> Sites to keep[DPSCF300287] from pop1:	36358
	-> Sites to keep[DPSCF300287] from pop2:	36358
	-> [readdata] lastread:36358 posi:5759
	-> Comparing positions: 1 with 0 has:19844200
	-> Comparing positions: 2 with 0 has:19844200
	-> Only read nSites: 19844200 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300288
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300288] from pop0:	12958
	-> Sites to keep[DPSCF300288] from pop1:	12958
	-> Sites to keep[DPSCF300288] from pop2:	12958
	-> [readdata] lastread:12958 posi:5759
	-> Comparing positions: 1 with 0 has:19857158
	-> Comparing positions: 2 with 0 has:19857158
	-> Only read nSites: 19857158 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300289
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300289] from pop0:	39815
	-> Sites to keep[DPSCF300289] from pop1:	39815
	-> Sites to keep[DPSCF300289] from pop2:	39815
	-> [readdata] lastread:39815 posi:5759
	-> Comparing positions: 1 with 0 has:19896973
	-> Comparing positions: 2 with 0 has:19896973
	-> Only read nSites: 19896973 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300290
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300290] from pop0:	35055
	-> Sites to keep[DPSCF300290] from pop1:	35055
	-> Sites to keep[DPSCF300290] from pop2:	35055
	-> [readdata] lastread:35055 posi:5759
	-> Comparing positions: 1 with 0 has:19932028
	-> Comparing positions: 2 with 0 has:19932028
	-> Only read nSites: 19932028 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300291
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300291] from pop0:	18588
	-> Sites to keep[DPSCF300291] from pop1:	18588
	-> Sites to keep[DPSCF300291] from pop2:	18588
	-> [readdata] lastread:18588 posi:5759
	-> Comparing positions: 1 with 0 has:19950616
	-> Comparing positions: 2 with 0 has:19950616
	-> Only read nSites: 19950616 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300292
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300292] from pop0:	17321
	-> Sites to keep[DPSCF300292] from pop1:	17321
	-> Sites to keep[DPSCF300292] from pop2:	17321
	-> [readdata] lastread:17321 posi:5759
	-> Comparing positions: 1 with 0 has:19967937
	-> Comparing positions: 2 with 0 has:19967937
	-> Only read nSites: 19967937 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300293
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300293] from pop0:	15181
	-> Sites to keep[DPSCF300293] from pop1:	15181
	-> Sites to keep[DPSCF300293] from pop2:	15181
	-> [readdata] lastread:15181 posi:5759
	-> Comparing positions: 1 with 0 has:19983118
	-> Comparing positions: 2 with 0 has:19983118
	-> Only read nSites: 19983118 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300294
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300294] from pop0:	21120
	-> Sites to keep[DPSCF300294] from pop1:	21120
	-> Sites to keep[DPSCF300294] from pop2:	21120
	-> Has read 5.000000mio sites now at: 20000000      	-> Has read 5.000000mio sites now at: 20000000      	-> Has read 5.000000mio sites now at: 20000000      	-> [readdata] lastread:21120 posi:5759
	-> Comparing positions: 1 with 0 has:20004238
	-> Comparing positions: 2 with 0 has:20004238
	-> Only read nSites: 20004238 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300295
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300295] from pop0:	18957
	-> Sites to keep[DPSCF300295] from pop1:	18957
	-> Sites to keep[DPSCF300295] from pop2:	18957
	-> [readdata] lastread:18957 posi:5759
	-> Comparing positions: 1 with 0 has:20023195
	-> Comparing positions: 2 with 0 has:20023195
	-> Only read nSites: 20023195 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300296
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300296] from pop0:	22476
	-> Sites to keep[DPSCF300296] from pop1:	22476
	-> Sites to keep[DPSCF300296] from pop2:	22476
	-> [readdata] lastread:22476 posi:5759
	-> Comparing positions: 1 with 0 has:20045671
	-> Comparing positions: 2 with 0 has:20045671
	-> Only read nSites: 20045671 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300297
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300297] from pop0:	35597
	-> Sites to keep[DPSCF300297] from pop1:	35597
	-> Sites to keep[DPSCF300297] from pop2:	35597
	-> [readdata] lastread:35597 posi:5759
	-> Comparing positions: 1 with 0 has:20081268
	-> Comparing positions: 2 with 0 has:20081268
	-> Only read nSites: 20081268 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300298
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300298] from pop0:	34045
	-> Sites to keep[DPSCF300298] from pop1:	34045
	-> Sites to keep[DPSCF300298] from pop2:	34045
	-> [readdata] lastread:34045 posi:5759
	-> Comparing positions: 1 with 0 has:20115313
	-> Comparing positions: 2 with 0 has:20115313
	-> Only read nSites: 20115313 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300299
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300299] from pop0:	16359
	-> Sites to keep[DPSCF300299] from pop1:	16359
	-> Sites to keep[DPSCF300299] from pop2:	16359
	-> [readdata] lastread:16359 posi:5759
	-> Comparing positions: 1 with 0 has:20131672
	-> Comparing positions: 2 with 0 has:20131672
	-> Only read nSites: 20131672 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300300
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300300] from pop0:	18417
	-> Sites to keep[DPSCF300300] from pop1:	18417
	-> Sites to keep[DPSCF300300] from pop2:	18417
	-> [readdata] lastread:18417 posi:5759
	-> Comparing positions: 1 with 0 has:20150089
	-> Comparing positions: 2 with 0 has:20150089
	-> Only read nSites: 20150089 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300301
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300301] from pop0:	16767
	-> Sites to keep[DPSCF300301] from pop1:	16767
	-> Sites to keep[DPSCF300301] from pop2:	16767
	-> [readdata] lastread:16767 posi:5759
	-> Comparing positions: 1 with 0 has:20166856
	-> Comparing positions: 2 with 0 has:20166856
	-> Only read nSites: 20166856 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300302
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300302] from pop0:	9568
	-> Sites to keep[DPSCF300302] from pop1:	9568
	-> Sites to keep[DPSCF300302] from pop2:	9568
	-> [readdata] lastread:9568 posi:5759
	-> Comparing positions: 1 with 0 has:20176424
	-> Comparing positions: 2 with 0 has:20176424
	-> Only read nSites: 20176424 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300303
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300303] from pop0:	24614
	-> Sites to keep[DPSCF300303] from pop1:	24614
	-> Sites to keep[DPSCF300303] from pop2:	24614
	-> [readdata] lastread:24614 posi:5759
	-> Comparing positions: 1 with 0 has:20201038
	-> Comparing positions: 2 with 0 has:20201038
	-> Only read nSites: 20201038 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300304
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300304] from pop0:	31571
	-> Sites to keep[DPSCF300304] from pop1:	31571
	-> Sites to keep[DPSCF300304] from pop2:	31571
	-> [readdata] lastread:31571 posi:5759
	-> Comparing positions: 1 with 0 has:20232609
	-> Comparing positions: 2 with 0 has:20232609
	-> Only read nSites: 20232609 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300305
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300305] from pop0:	10531
	-> Sites to keep[DPSCF300305] from pop1:	10531
	-> Sites to keep[DPSCF300305] from pop2:	10531
	-> [readdata] lastread:10531 posi:5759
	-> Comparing positions: 1 with 0 has:20243140
	-> Comparing positions: 2 with 0 has:20243140
	-> Only read nSites: 20243140 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300306
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300306] from pop0:	10823
	-> Sites to keep[DPSCF300306] from pop1:	10823
	-> Sites to keep[DPSCF300306] from pop2:	10823
	-> [readdata] lastread:10823 posi:5759
	-> Comparing positions: 1 with 0 has:20253963
	-> Comparing positions: 2 with 0 has:20253963
	-> Only read nSites: 20253963 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300307
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300307] from pop0:	25854
	-> Sites to keep[DPSCF300307] from pop1:	25854
	-> Sites to keep[DPSCF300307] from pop2:	25854
	-> [readdata] lastread:25854 posi:5759
	-> Comparing positions: 1 with 0 has:20279817
	-> Comparing positions: 2 with 0 has:20279817
	-> Only read nSites: 20279817 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300308
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300308] from pop0:	20014
	-> Sites to keep[DPSCF300308] from pop1:	20014
	-> Sites to keep[DPSCF300308] from pop2:	20014
	-> [readdata] lastread:20014 posi:5759
	-> Comparing positions: 1 with 0 has:20299831
	-> Comparing positions: 2 with 0 has:20299831
	-> Only read nSites: 20299831 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300309
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300309] from pop0:	14341
	-> Sites to keep[DPSCF300309] from pop1:	14341
	-> Sites to keep[DPSCF300309] from pop2:	14341
	-> [readdata] lastread:14341 posi:5759
	-> Comparing positions: 1 with 0 has:20314172
	-> Comparing positions: 2 with 0 has:20314172
	-> Only read nSites: 20314172 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300310
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300310] from pop0:	14913
	-> Sites to keep[DPSCF300310] from pop1:	14913
	-> Sites to keep[DPSCF300310] from pop2:	14913
	-> [readdata] lastread:14913 posi:5759
	-> Comparing positions: 1 with 0 has:20329085
	-> Comparing positions: 2 with 0 has:20329085
	-> Only read nSites: 20329085 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300311
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300311] from pop0:	11225
	-> Sites to keep[DPSCF300311] from pop1:	11225
	-> Sites to keep[DPSCF300311] from pop2:	11225
	-> [readdata] lastread:11225 posi:5759
	-> Comparing positions: 1 with 0 has:20340310
	-> Comparing positions: 2 with 0 has:20340310
	-> Only read nSites: 20340310 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300312
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300312] from pop0:	11254
	-> Sites to keep[DPSCF300312] from pop1:	11254
	-> Sites to keep[DPSCF300312] from pop2:	11254
	-> [readdata] lastread:11254 posi:5759
	-> Comparing positions: 1 with 0 has:20351564
	-> Comparing positions: 2 with 0 has:20351564
	-> Only read nSites: 20351564 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300313
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300313] from pop0:	14321
	-> Sites to keep[DPSCF300313] from pop1:	14321
	-> Sites to keep[DPSCF300313] from pop2:	14321
	-> [readdata] lastread:14321 posi:5759
	-> Comparing positions: 1 with 0 has:20365885
	-> Comparing positions: 2 with 0 has:20365885
	-> Only read nSites: 20365885 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300314
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300314] from pop0:	10938
	-> Sites to keep[DPSCF300314] from pop1:	10938
	-> Sites to keep[DPSCF300314] from pop2:	10938
	-> [readdata] lastread:10938 posi:5759
	-> Comparing positions: 1 with 0 has:20376823
	-> Comparing positions: 2 with 0 has:20376823
	-> Only read nSites: 20376823 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300315
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300315] from pop0:	15129
	-> Sites to keep[DPSCF300315] from pop1:	15129
	-> Sites to keep[DPSCF300315] from pop2:	15129
	-> [readdata] lastread:15129 posi:5759
	-> Comparing positions: 1 with 0 has:20391952
	-> Comparing positions: 2 with 0 has:20391952
	-> Only read nSites: 20391952 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300316
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300316] from pop0:	18853
	-> Sites to keep[DPSCF300316] from pop1:	18853
	-> Sites to keep[DPSCF300316] from pop2:	18853
	-> [readdata] lastread:18853 posi:5759
	-> Comparing positions: 1 with 0 has:20410805
	-> Comparing positions: 2 with 0 has:20410805
	-> Only read nSites: 20410805 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300317
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300317] from pop0:	10964
	-> Sites to keep[DPSCF300317] from pop1:	10964
	-> Sites to keep[DPSCF300317] from pop2:	10964
	-> [readdata] lastread:10964 posi:5759
	-> Comparing positions: 1 with 0 has:20421769
	-> Comparing positions: 2 with 0 has:20421769
	-> Only read nSites: 20421769 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300318
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300318] from pop0:	17740
	-> Sites to keep[DPSCF300318] from pop1:	17740
	-> Sites to keep[DPSCF300318] from pop2:	17740
	-> [readdata] lastread:17740 posi:5759
	-> Comparing positions: 1 with 0 has:20439509
	-> Comparing positions: 2 with 0 has:20439509
	-> Only read nSites: 20439509 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300319
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300319] from pop0:	12369
	-> Sites to keep[DPSCF300319] from pop1:	12369
	-> Sites to keep[DPSCF300319] from pop2:	12369
	-> [readdata] lastread:12369 posi:5759
	-> Comparing positions: 1 with 0 has:20451878
	-> Comparing positions: 2 with 0 has:20451878
	-> Only read nSites: 20451878 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300320
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300320] from pop0:	20400
	-> Sites to keep[DPSCF300320] from pop1:	20400
	-> Sites to keep[DPSCF300320] from pop2:	20400
	-> [readdata] lastread:20400 posi:5759
	-> Comparing positions: 1 with 0 has:20472278
	-> Comparing positions: 2 with 0 has:20472278
	-> Only read nSites: 20472278 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300321
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300321] from pop0:	19731
	-> Sites to keep[DPSCF300321] from pop1:	19731
	-> Sites to keep[DPSCF300321] from pop2:	19731
	-> [readdata] lastread:19731 posi:5759
	-> Comparing positions: 1 with 0 has:20492009
	-> Comparing positions: 2 with 0 has:20492009
	-> Only read nSites: 20492009 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300322
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300322] from pop0:	53794
	-> Sites to keep[DPSCF300322] from pop1:	53794
	-> Sites to keep[DPSCF300322] from pop2:	53794
	-> [readdata] lastread:53794 posi:5759
	-> Comparing positions: 1 with 0 has:20545803
	-> Comparing positions: 2 with 0 has:20545803
	-> Only read nSites: 20545803 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300323
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300323] from pop0:	19236
	-> Sites to keep[DPSCF300323] from pop1:	19236
	-> Sites to keep[DPSCF300323] from pop2:	19236
	-> [readdata] lastread:19236 posi:5759
	-> Comparing positions: 1 with 0 has:20565039
	-> Comparing positions: 2 with 0 has:20565039
	-> Only read nSites: 20565039 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300324
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300324] from pop0:	12108
	-> Sites to keep[DPSCF300324] from pop1:	12108
	-> Sites to keep[DPSCF300324] from pop2:	12108
	-> [readdata] lastread:12108 posi:5759
	-> Comparing positions: 1 with 0 has:20577147
	-> Comparing positions: 2 with 0 has:20577147
	-> Only read nSites: 20577147 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300325
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300325] from pop0:	28013
	-> Sites to keep[DPSCF300325] from pop1:	28013
	-> Sites to keep[DPSCF300325] from pop2:	28013
	-> [readdata] lastread:28013 posi:5759
	-> Comparing positions: 1 with 0 has:20605160
	-> Comparing positions: 2 with 0 has:20605160
	-> Only read nSites: 20605160 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300326
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300326] from pop0:	12883
	-> Sites to keep[DPSCF300326] from pop1:	12883
	-> Sites to keep[DPSCF300326] from pop2:	12883
	-> [readdata] lastread:12883 posi:5759
	-> Comparing positions: 1 with 0 has:20618043
	-> Comparing positions: 2 with 0 has:20618043
	-> Only read nSites: 20618043 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300327
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300327] from pop0:	19534
	-> Sites to keep[DPSCF300327] from pop1:	19534
	-> Sites to keep[DPSCF300327] from pop2:	19534
	-> [readdata] lastread:19534 posi:5759
	-> Comparing positions: 1 with 0 has:20637577
	-> Comparing positions: 2 with 0 has:20637577
	-> Only read nSites: 20637577 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300328
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300328] from pop0:	14606
	-> Sites to keep[DPSCF300328] from pop1:	14606
	-> Sites to keep[DPSCF300328] from pop2:	14606
	-> [readdata] lastread:14606 posi:5759
	-> Comparing positions: 1 with 0 has:20652183
	-> Comparing positions: 2 with 0 has:20652183
	-> Only read nSites: 20652183 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300329
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300329] from pop0:	12651
	-> Sites to keep[DPSCF300329] from pop1:	12651
	-> Sites to keep[DPSCF300329] from pop2:	12651
	-> [readdata] lastread:12651 posi:5759
	-> Comparing positions: 1 with 0 has:20664834
	-> Comparing positions: 2 with 0 has:20664834
	-> Only read nSites: 20664834 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300330
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300330] from pop0:	13632
	-> Sites to keep[DPSCF300330] from pop1:	13632
	-> Sites to keep[DPSCF300330] from pop2:	13632
	-> [readdata] lastread:13632 posi:5759
	-> Comparing positions: 1 with 0 has:20678466
	-> Comparing positions: 2 with 0 has:20678466
	-> Only read nSites: 20678466 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300331
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300331] from pop0:	13367
	-> Sites to keep[DPSCF300331] from pop1:	13367
	-> Sites to keep[DPSCF300331] from pop2:	13367
	-> [readdata] lastread:13367 posi:5759
	-> Comparing positions: 1 with 0 has:20691833
	-> Comparing positions: 2 with 0 has:20691833
	-> Only read nSites: 20691833 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300332
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300332] from pop0:	8950
	-> Sites to keep[DPSCF300332] from pop1:	8950
	-> Sites to keep[DPSCF300332] from pop2:	8950
	-> [readdata] lastread:8950 posi:5759
	-> Comparing positions: 1 with 0 has:20700783
	-> Comparing positions: 2 with 0 has:20700783
	-> Only read nSites: 20700783 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300333
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300333] from pop0:	10607
	-> Sites to keep[DPSCF300333] from pop1:	10607
	-> Sites to keep[DPSCF300333] from pop2:	10607
	-> [readdata] lastread:10607 posi:5759
	-> Comparing positions: 1 with 0 has:20711390
	-> Comparing positions: 2 with 0 has:20711390
	-> Only read nSites: 20711390 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300334
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300334] from pop0:	23566
	-> Sites to keep[DPSCF300334] from pop1:	23566
	-> Sites to keep[DPSCF300334] from pop2:	23566
	-> [readdata] lastread:23566 posi:5759
	-> Comparing positions: 1 with 0 has:20734956
	-> Comparing positions: 2 with 0 has:20734956
	-> Only read nSites: 20734956 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300335
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300335] from pop0:	11983
	-> Sites to keep[DPSCF300335] from pop1:	11983
	-> Sites to keep[DPSCF300335] from pop2:	11983
	-> [readdata] lastread:11983 posi:5759
	-> Comparing positions: 1 with 0 has:20746939
	-> Comparing positions: 2 with 0 has:20746939
	-> Only read nSites: 20746939 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300336
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300336] from pop0:	16738
	-> Sites to keep[DPSCF300336] from pop1:	16738
	-> Sites to keep[DPSCF300336] from pop2:	16738
	-> [readdata] lastread:16738 posi:5759
	-> Comparing positions: 1 with 0 has:20763677
	-> Comparing positions: 2 with 0 has:20763677
	-> Only read nSites: 20763677 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300337
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300337] from pop0:	22636
	-> Sites to keep[DPSCF300337] from pop1:	22636
	-> Sites to keep[DPSCF300337] from pop2:	22636
	-> [readdata] lastread:22636 posi:5759
	-> Comparing positions: 1 with 0 has:20786313
	-> Comparing positions: 2 with 0 has:20786313
	-> Only read nSites: 20786313 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300338
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300338] from pop0:	14160
	-> Sites to keep[DPSCF300338] from pop1:	14160
	-> Sites to keep[DPSCF300338] from pop2:	14160
	-> [readdata] lastread:14160 posi:5759
	-> Comparing positions: 1 with 0 has:20800473
	-> Comparing positions: 2 with 0 has:20800473
	-> Only read nSites: 20800473 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300339
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300339] from pop0:	15057
	-> Sites to keep[DPSCF300339] from pop1:	15057
	-> Sites to keep[DPSCF300339] from pop2:	15057
	-> [readdata] lastread:15057 posi:5759
	-> Comparing positions: 1 with 0 has:20815530
	-> Comparing positions: 2 with 0 has:20815530
	-> Only read nSites: 20815530 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300340
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300340] from pop0:	13907
	-> Sites to keep[DPSCF300340] from pop1:	13907
	-> Sites to keep[DPSCF300340] from pop2:	13907
	-> [readdata] lastread:13907 posi:5759
	-> Comparing positions: 1 with 0 has:20829437
	-> Comparing positions: 2 with 0 has:20829437
	-> Only read nSites: 20829437 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300341
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300341] from pop0:	17637
	-> Sites to keep[DPSCF300341] from pop1:	17637
	-> Sites to keep[DPSCF300341] from pop2:	17637
	-> [readdata] lastread:17637 posi:5759
	-> Comparing positions: 1 with 0 has:20847074
	-> Comparing positions: 2 with 0 has:20847074
	-> Only read nSites: 20847074 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300342
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300342] from pop0:	10246
	-> Sites to keep[DPSCF300342] from pop1:	10246
	-> Sites to keep[DPSCF300342] from pop2:	10246
	-> [readdata] lastread:10246 posi:5759
	-> Comparing positions: 1 with 0 has:20857320
	-> Comparing positions: 2 with 0 has:20857320
	-> Only read nSites: 20857320 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300343
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300343] from pop0:	6440
	-> Sites to keep[DPSCF300343] from pop1:	6440
	-> Sites to keep[DPSCF300343] from pop2:	6440
	-> [readdata] lastread:6440 posi:5759
	-> Comparing positions: 1 with 0 has:20863760
	-> Comparing positions: 2 with 0 has:20863760
	-> Only read nSites: 20863760 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300344
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300344] from pop0:	17750
	-> Sites to keep[DPSCF300344] from pop1:	17750
	-> Sites to keep[DPSCF300344] from pop2:	17750
	-> [readdata] lastread:17750 posi:5759
	-> Comparing positions: 1 with 0 has:20881510
	-> Comparing positions: 2 with 0 has:20881510
	-> Only read nSites: 20881510 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300345
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300345] from pop0:	25190
	-> Sites to keep[DPSCF300345] from pop1:	25190
	-> Sites to keep[DPSCF300345] from pop2:	25190
	-> [readdata] lastread:25190 posi:5759
	-> Comparing positions: 1 with 0 has:20906700
	-> Comparing positions: 2 with 0 has:20906700
	-> Only read nSites: 20906700 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300346
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300346] from pop0:	27455
	-> Sites to keep[DPSCF300346] from pop1:	27455
	-> Sites to keep[DPSCF300346] from pop2:	27455
	-> [readdata] lastread:27455 posi:5759
	-> Comparing positions: 1 with 0 has:20934155
	-> Comparing positions: 2 with 0 has:20934155
	-> Only read nSites: 20934155 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300347
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300347] from pop0:	9312
	-> Sites to keep[DPSCF300347] from pop1:	9312
	-> Sites to keep[DPSCF300347] from pop2:	9312
	-> [readdata] lastread:9312 posi:5759
	-> Comparing positions: 1 with 0 has:20943467
	-> Comparing positions: 2 with 0 has:20943467
	-> Only read nSites: 20943467 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300348
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300348] from pop0:	4477
	-> Sites to keep[DPSCF300348] from pop1:	4477
	-> Sites to keep[DPSCF300348] from pop2:	4477
	-> [readdata] lastread:4477 posi:5759
	-> Comparing positions: 1 with 0 has:20947944
	-> Comparing positions: 2 with 0 has:20947944
	-> Only read nSites: 20947944 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300349
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300349] from pop0:	7689
	-> Sites to keep[DPSCF300349] from pop1:	7689
	-> Sites to keep[DPSCF300349] from pop2:	7689
	-> [readdata] lastread:7689 posi:5759
	-> Comparing positions: 1 with 0 has:20955633
	-> Comparing positions: 2 with 0 has:20955633
	-> Only read nSites: 20955633 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300350
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300350] from pop0:	19676
	-> Sites to keep[DPSCF300350] from pop1:	19676
	-> Sites to keep[DPSCF300350] from pop2:	19676
	-> [readdata] lastread:19676 posi:5759
	-> Comparing positions: 1 with 0 has:20975309
	-> Comparing positions: 2 with 0 has:20975309
	-> Only read nSites: 20975309 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300351
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300351] from pop0:	11190
	-> Sites to keep[DPSCF300351] from pop1:	11190
	-> Sites to keep[DPSCF300351] from pop2:	11190
	-> [readdata] lastread:11190 posi:5759
	-> Comparing positions: 1 with 0 has:20986499
	-> Comparing positions: 2 with 0 has:20986499
	-> Only read nSites: 20986499 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300352
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300352] from pop0:	9176
	-> Sites to keep[DPSCF300352] from pop1:	9176
	-> Sites to keep[DPSCF300352] from pop2:	9176
	-> [readdata] lastread:9176 posi:5759
	-> Comparing positions: 1 with 0 has:20995675
	-> Comparing positions: 2 with 0 has:20995675
	-> Only read nSites: 20995675 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300353
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300353] from pop0:	8183
	-> Sites to keep[DPSCF300353] from pop1:	8183
	-> Sites to keep[DPSCF300353] from pop2:	8183
	-> [readdata] lastread:8183 posi:5759
	-> Comparing positions: 1 with 0 has:21003858
	-> Comparing positions: 2 with 0 has:21003858
	-> Only read nSites: 21003858 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300354
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300354] from pop0:	27456
	-> Sites to keep[DPSCF300354] from pop1:	27456
	-> Sites to keep[DPSCF300354] from pop2:	27456
	-> [readdata] lastread:27456 posi:5759
	-> Comparing positions: 1 with 0 has:21031314
	-> Comparing positions: 2 with 0 has:21031314
	-> Only read nSites: 21031314 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300355
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300355] from pop0:	24133
	-> Sites to keep[DPSCF300355] from pop1:	24133
	-> Sites to keep[DPSCF300355] from pop2:	24133
	-> [readdata] lastread:24133 posi:5759
	-> Comparing positions: 1 with 0 has:21055447
	-> Comparing positions: 2 with 0 has:21055447
	-> Only read nSites: 21055447 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300356
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300356] from pop0:	18639
	-> Sites to keep[DPSCF300356] from pop1:	18639
	-> Sites to keep[DPSCF300356] from pop2:	18639
	-> [readdata] lastread:18639 posi:5759
	-> Comparing positions: 1 with 0 has:21074086
	-> Comparing positions: 2 with 0 has:21074086
	-> Only read nSites: 21074086 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300357
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300357] from pop0:	9136
	-> Sites to keep[DPSCF300357] from pop1:	9136
	-> Sites to keep[DPSCF300357] from pop2:	9136
	-> [readdata] lastread:9136 posi:5759
	-> Comparing positions: 1 with 0 has:21083222
	-> Comparing positions: 2 with 0 has:21083222
	-> Only read nSites: 21083222 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300358
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300358] from pop0:	11867
	-> Sites to keep[DPSCF300358] from pop1:	11867
	-> Sites to keep[DPSCF300358] from pop2:	11867
	-> [readdata] lastread:11867 posi:5759
	-> Comparing positions: 1 with 0 has:21095089
	-> Comparing positions: 2 with 0 has:21095089
	-> Only read nSites: 21095089 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300359
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300359] from pop0:	14790
	-> Sites to keep[DPSCF300359] from pop1:	14790
	-> Sites to keep[DPSCF300359] from pop2:	14790
	-> [readdata] lastread:14790 posi:5759
	-> Comparing positions: 1 with 0 has:21109879
	-> Comparing positions: 2 with 0 has:21109879
	-> Only read nSites: 21109879 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300360
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300360] from pop0:	12218
	-> Sites to keep[DPSCF300360] from pop1:	12218
	-> Sites to keep[DPSCF300360] from pop2:	12218
	-> [readdata] lastread:12218 posi:5759
	-> Comparing positions: 1 with 0 has:21122097
	-> Comparing positions: 2 with 0 has:21122097
	-> Only read nSites: 21122097 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300361
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300361] from pop0:	13982
	-> Sites to keep[DPSCF300361] from pop1:	13982
	-> Sites to keep[DPSCF300361] from pop2:	13982
	-> [readdata] lastread:13982 posi:5759
	-> Comparing positions: 1 with 0 has:21136079
	-> Comparing positions: 2 with 0 has:21136079
	-> Only read nSites: 21136079 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300362
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300362] from pop0:	14422
	-> Sites to keep[DPSCF300362] from pop1:	14422
	-> Sites to keep[DPSCF300362] from pop2:	14422
	-> [readdata] lastread:14422 posi:5759
	-> Comparing positions: 1 with 0 has:21150501
	-> Comparing positions: 2 with 0 has:21150501
	-> Only read nSites: 21150501 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300363
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300363] from pop0:	9433
	-> Sites to keep[DPSCF300363] from pop1:	9433
	-> Sites to keep[DPSCF300363] from pop2:	9433
	-> [readdata] lastread:9433 posi:5759
	-> Comparing positions: 1 with 0 has:21159934
	-> Comparing positions: 2 with 0 has:21159934
	-> Only read nSites: 21159934 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300364
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300364] from pop0:	15460
	-> Sites to keep[DPSCF300364] from pop1:	15460
	-> Sites to keep[DPSCF300364] from pop2:	15460
	-> [readdata] lastread:15460 posi:5759
	-> Comparing positions: 1 with 0 has:21175394
	-> Comparing positions: 2 with 0 has:21175394
	-> Only read nSites: 21175394 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300365
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300365] from pop0:	10389
	-> Sites to keep[DPSCF300365] from pop1:	10389
	-> Sites to keep[DPSCF300365] from pop2:	10389
	-> [readdata] lastread:10389 posi:5759
	-> Comparing positions: 1 with 0 has:21185783
	-> Comparing positions: 2 with 0 has:21185783
	-> Only read nSites: 21185783 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300366
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300366] from pop0:	14031
	-> Sites to keep[DPSCF300366] from pop1:	14031
	-> Sites to keep[DPSCF300366] from pop2:	14031
	-> [readdata] lastread:14031 posi:5759
	-> Comparing positions: 1 with 0 has:21199814
	-> Comparing positions: 2 with 0 has:21199814
	-> Only read nSites: 21199814 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300367
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300367] from pop0:	23292
	-> Sites to keep[DPSCF300367] from pop1:	23292
	-> Sites to keep[DPSCF300367] from pop2:	23292
	-> [readdata] lastread:23292 posi:5759
	-> Comparing positions: 1 with 0 has:21223106
	-> Comparing positions: 2 with 0 has:21223106
	-> Only read nSites: 21223106 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300368
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300368] from pop0:	9654
	-> Sites to keep[DPSCF300368] from pop1:	9654
	-> Sites to keep[DPSCF300368] from pop2:	9654
	-> [readdata] lastread:9654 posi:5759
	-> Comparing positions: 1 with 0 has:21232760
	-> Comparing positions: 2 with 0 has:21232760
	-> Only read nSites: 21232760 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300369
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300369] from pop0:	10874
	-> Sites to keep[DPSCF300369] from pop1:	10874
	-> Sites to keep[DPSCF300369] from pop2:	10874
	-> [readdata] lastread:10874 posi:5759
	-> Comparing positions: 1 with 0 has:21243634
	-> Comparing positions: 2 with 0 has:21243634
	-> Only read nSites: 21243634 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300370
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300370] from pop0:	13705
	-> Sites to keep[DPSCF300370] from pop1:	13705
	-> Sites to keep[DPSCF300370] from pop2:	13705
	-> [readdata] lastread:13705 posi:5759
	-> Comparing positions: 1 with 0 has:21257339
	-> Comparing positions: 2 with 0 has:21257339
	-> Only read nSites: 21257339 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300371
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300371] from pop0:	12287
	-> Sites to keep[DPSCF300371] from pop1:	12287
	-> Sites to keep[DPSCF300371] from pop2:	12287
	-> [readdata] lastread:12287 posi:5759
	-> Comparing positions: 1 with 0 has:21269626
	-> Comparing positions: 2 with 0 has:21269626
	-> Only read nSites: 21269626 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300372
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300372] from pop0:	6523
	-> Sites to keep[DPSCF300372] from pop1:	6523
	-> Sites to keep[DPSCF300372] from pop2:	6523
	-> [readdata] lastread:6523 posi:5759
	-> Comparing positions: 1 with 0 has:21276149
	-> Comparing positions: 2 with 0 has:21276149
	-> Only read nSites: 21276149 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300373
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300373] from pop0:	17640
	-> Sites to keep[DPSCF300373] from pop1:	17640
	-> Sites to keep[DPSCF300373] from pop2:	17640
	-> [readdata] lastread:17640 posi:5759
	-> Comparing positions: 1 with 0 has:21293789
	-> Comparing positions: 2 with 0 has:21293789
	-> Only read nSites: 21293789 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300374
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300374] from pop0:	10784
	-> Sites to keep[DPSCF300374] from pop1:	10784
	-> Sites to keep[DPSCF300374] from pop2:	10784
	-> [readdata] lastread:10784 posi:5759
	-> Comparing positions: 1 with 0 has:21304573
	-> Comparing positions: 2 with 0 has:21304573
	-> Only read nSites: 21304573 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300375
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300375] from pop0:	7920
	-> Sites to keep[DPSCF300375] from pop1:	7920
	-> Sites to keep[DPSCF300375] from pop2:	7920
	-> [readdata] lastread:7920 posi:5759
	-> Comparing positions: 1 with 0 has:21312493
	-> Comparing positions: 2 with 0 has:21312493
	-> Only read nSites: 21312493 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300376
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300376] from pop0:	12154
	-> Sites to keep[DPSCF300376] from pop1:	12154
	-> Sites to keep[DPSCF300376] from pop2:	12154
	-> [readdata] lastread:12154 posi:5759
	-> Comparing positions: 1 with 0 has:21324647
	-> Comparing positions: 2 with 0 has:21324647
	-> Only read nSites: 21324647 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300377
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300377] from pop0:	9042
	-> Sites to keep[DPSCF300377] from pop1:	9042
	-> Sites to keep[DPSCF300377] from pop2:	9042
	-> [readdata] lastread:9042 posi:5759
	-> Comparing positions: 1 with 0 has:21333689
	-> Comparing positions: 2 with 0 has:21333689
	-> Only read nSites: 21333689 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300378
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300378] from pop0:	9136
	-> Sites to keep[DPSCF300378] from pop1:	9136
	-> Sites to keep[DPSCF300378] from pop2:	9136
	-> [readdata] lastread:9136 posi:5759
	-> Comparing positions: 1 with 0 has:21342825
	-> Comparing positions: 2 with 0 has:21342825
	-> Only read nSites: 21342825 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300379
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300379] from pop0:	15123
	-> Sites to keep[DPSCF300379] from pop1:	15123
	-> Sites to keep[DPSCF300379] from pop2:	15123
	-> [readdata] lastread:15123 posi:5759
	-> Comparing positions: 1 with 0 has:21357948
	-> Comparing positions: 2 with 0 has:21357948
	-> Only read nSites: 21357948 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300380
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300380] from pop0:	11631
	-> Sites to keep[DPSCF300380] from pop1:	11631
	-> Sites to keep[DPSCF300380] from pop2:	11631
	-> [readdata] lastread:11631 posi:5759
	-> Comparing positions: 1 with 0 has:21369579
	-> Comparing positions: 2 with 0 has:21369579
	-> Only read nSites: 21369579 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300381
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300381] from pop0:	10865
	-> Sites to keep[DPSCF300381] from pop1:	10865
	-> Sites to keep[DPSCF300381] from pop2:	10865
	-> [readdata] lastread:10865 posi:5759
	-> Comparing positions: 1 with 0 has:21380444
	-> Comparing positions: 2 with 0 has:21380444
	-> Only read nSites: 21380444 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300382
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300382] from pop0:	14646
	-> Sites to keep[DPSCF300382] from pop1:	14646
	-> Sites to keep[DPSCF300382] from pop2:	14646
	-> [readdata] lastread:14646 posi:5759
	-> Comparing positions: 1 with 0 has:21395090
	-> Comparing positions: 2 with 0 has:21395090
	-> Only read nSites: 21395090 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300383
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300383] from pop0:	6616
	-> Sites to keep[DPSCF300383] from pop1:	6616
	-> Sites to keep[DPSCF300383] from pop2:	6616
	-> [readdata] lastread:6616 posi:5759
	-> Comparing positions: 1 with 0 has:21401706
	-> Comparing positions: 2 with 0 has:21401706
	-> Only read nSites: 21401706 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300384
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300384] from pop0:	6185
	-> Sites to keep[DPSCF300384] from pop1:	6185
	-> Sites to keep[DPSCF300384] from pop2:	6185
	-> [readdata] lastread:6185 posi:5759
	-> Comparing positions: 1 with 0 has:21407891
	-> Comparing positions: 2 with 0 has:21407891
	-> Only read nSites: 21407891 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300385
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300385] from pop0:	13804
	-> Sites to keep[DPSCF300385] from pop1:	13804
	-> Sites to keep[DPSCF300385] from pop2:	13804
	-> [readdata] lastread:13804 posi:5759
	-> Comparing positions: 1 with 0 has:21421695
	-> Comparing positions: 2 with 0 has:21421695
	-> Only read nSites: 21421695 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300386
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300386] from pop0:	8708
	-> Sites to keep[DPSCF300386] from pop1:	8708
	-> Sites to keep[DPSCF300386] from pop2:	8708
	-> [readdata] lastread:8708 posi:5759
	-> Comparing positions: 1 with 0 has:21430403
	-> Comparing positions: 2 with 0 has:21430403
	-> Only read nSites: 21430403 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300387
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300387] from pop0:	8508
	-> Sites to keep[DPSCF300387] from pop1:	8508
	-> Sites to keep[DPSCF300387] from pop2:	8508
	-> [readdata] lastread:8508 posi:5759
	-> Comparing positions: 1 with 0 has:21438911
	-> Comparing positions: 2 with 0 has:21438911
	-> Only read nSites: 21438911 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300388
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300388] from pop0:	4942
	-> Sites to keep[DPSCF300388] from pop1:	4942
	-> Sites to keep[DPSCF300388] from pop2:	4942
	-> [readdata] lastread:4942 posi:5759
	-> Comparing positions: 1 with 0 has:21443853
	-> Comparing positions: 2 with 0 has:21443853
	-> Only read nSites: 21443853 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300389
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300389] from pop0:	11534
	-> Sites to keep[DPSCF300389] from pop1:	11534
	-> Sites to keep[DPSCF300389] from pop2:	11534
	-> [readdata] lastread:11534 posi:5759
	-> Comparing positions: 1 with 0 has:21455387
	-> Comparing positions: 2 with 0 has:21455387
	-> Only read nSites: 21455387 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300390
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300390] from pop0:	12523
	-> Sites to keep[DPSCF300390] from pop1:	12523
	-> Sites to keep[DPSCF300390] from pop2:	12523
	-> [readdata] lastread:12523 posi:5759
	-> Comparing positions: 1 with 0 has:21467910
	-> Comparing positions: 2 with 0 has:21467910
	-> Only read nSites: 21467910 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300391
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300391] from pop0:	16091
	-> Sites to keep[DPSCF300391] from pop1:	16091
	-> Sites to keep[DPSCF300391] from pop2:	16091
	-> [readdata] lastread:16091 posi:5759
	-> Comparing positions: 1 with 0 has:21484001
	-> Comparing positions: 2 with 0 has:21484001
	-> Only read nSites: 21484001 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300392
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300392] from pop0:	8452
	-> Sites to keep[DPSCF300392] from pop1:	8452
	-> Sites to keep[DPSCF300392] from pop2:	8452
	-> [readdata] lastread:8452 posi:5759
	-> Comparing positions: 1 with 0 has:21492453
	-> Comparing positions: 2 with 0 has:21492453
	-> Only read nSites: 21492453 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300393
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300393] from pop0:	11780
	-> Sites to keep[DPSCF300393] from pop1:	11780
	-> Sites to keep[DPSCF300393] from pop2:	11780
	-> [readdata] lastread:11780 posi:5759
	-> Comparing positions: 1 with 0 has:21504233
	-> Comparing positions: 2 with 0 has:21504233
	-> Only read nSites: 21504233 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300394
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300394] from pop0:	12877
	-> Sites to keep[DPSCF300394] from pop1:	12877
	-> Sites to keep[DPSCF300394] from pop2:	12877
	-> [readdata] lastread:12877 posi:5759
	-> Comparing positions: 1 with 0 has:21517110
	-> Comparing positions: 2 with 0 has:21517110
	-> Only read nSites: 21517110 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300395
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300395] from pop0:	19211
	-> Sites to keep[DPSCF300395] from pop1:	19211
	-> Sites to keep[DPSCF300395] from pop2:	19211
	-> [readdata] lastread:19211 posi:5759
	-> Comparing positions: 1 with 0 has:21536321
	-> Comparing positions: 2 with 0 has:21536321
	-> Only read nSites: 21536321 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300396
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300396] from pop0:	8010
	-> Sites to keep[DPSCF300396] from pop1:	8010
	-> Sites to keep[DPSCF300396] from pop2:	8010
	-> [readdata] lastread:8010 posi:5759
	-> Comparing positions: 1 with 0 has:21544331
	-> Comparing positions: 2 with 0 has:21544331
	-> Only read nSites: 21544331 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300397
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300397] from pop0:	8637
	-> Sites to keep[DPSCF300397] from pop1:	8637
	-> Sites to keep[DPSCF300397] from pop2:	8637
	-> [readdata] lastread:8637 posi:5759
	-> Comparing positions: 1 with 0 has:21552968
	-> Comparing positions: 2 with 0 has:21552968
	-> Only read nSites: 21552968 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300398
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300398] from pop0:	8421
	-> Sites to keep[DPSCF300398] from pop1:	8421
	-> Sites to keep[DPSCF300398] from pop2:	8421
	-> [readdata] lastread:8421 posi:5759
	-> Comparing positions: 1 with 0 has:21561389
	-> Comparing positions: 2 with 0 has:21561389
	-> Only read nSites: 21561389 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300399
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300399] from pop0:	7741
	-> Sites to keep[DPSCF300399] from pop1:	7741
	-> Sites to keep[DPSCF300399] from pop2:	7741
	-> [readdata] lastread:7741 posi:5759
	-> Comparing positions: 1 with 0 has:21569130
	-> Comparing positions: 2 with 0 has:21569130
	-> Only read nSites: 21569130 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300400
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300400] from pop0:	12590
	-> Sites to keep[DPSCF300400] from pop1:	12590
	-> Sites to keep[DPSCF300400] from pop2:	12590
	-> [readdata] lastread:12590 posi:5759
	-> Comparing positions: 1 with 0 has:21581720
	-> Comparing positions: 2 with 0 has:21581720
	-> Only read nSites: 21581720 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300401
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300401] from pop0:	23256
	-> Sites to keep[DPSCF300401] from pop1:	23256
	-> Sites to keep[DPSCF300401] from pop2:	23256
	-> [readdata] lastread:23256 posi:5759
	-> Comparing positions: 1 with 0 has:21604976
	-> Comparing positions: 2 with 0 has:21604976
	-> Only read nSites: 21604976 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300402
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300402] from pop0:	8595
	-> Sites to keep[DPSCF300402] from pop1:	8595
	-> Sites to keep[DPSCF300402] from pop2:	8595
	-> [readdata] lastread:8595 posi:5759
	-> Comparing positions: 1 with 0 has:21613571
	-> Comparing positions: 2 with 0 has:21613571
	-> Only read nSites: 21613571 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300403
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300403] from pop0:	13425
	-> Sites to keep[DPSCF300403] from pop1:	13425
	-> Sites to keep[DPSCF300403] from pop2:	13425
	-> [readdata] lastread:13425 posi:5759
	-> Comparing positions: 1 with 0 has:21626996
	-> Comparing positions: 2 with 0 has:21626996
	-> Only read nSites: 21626996 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300404
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300404] from pop0:	5024
	-> Sites to keep[DPSCF300404] from pop1:	5024
	-> Sites to keep[DPSCF300404] from pop2:	5024
	-> [readdata] lastread:5024 posi:5759
	-> Comparing positions: 1 with 0 has:21632020
	-> Comparing positions: 2 with 0 has:21632020
	-> Only read nSites: 21632020 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300405
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300405] from pop0:	7151
	-> Sites to keep[DPSCF300405] from pop1:	7151
	-> Sites to keep[DPSCF300405] from pop2:	7151
	-> [readdata] lastread:7151 posi:5759
	-> Comparing positions: 1 with 0 has:21639171
	-> Comparing positions: 2 with 0 has:21639171
	-> Only read nSites: 21639171 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300406
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300406] from pop0:	8300
	-> Sites to keep[DPSCF300406] from pop1:	8300
	-> Sites to keep[DPSCF300406] from pop2:	8300
	-> [readdata] lastread:8300 posi:5759
	-> Comparing positions: 1 with 0 has:21647471
	-> Comparing positions: 2 with 0 has:21647471
	-> Only read nSites: 21647471 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300407
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300407] from pop0:	39936
	-> Sites to keep[DPSCF300407] from pop1:	39936
	-> Sites to keep[DPSCF300407] from pop2:	39936
	-> [readdata] lastread:39936 posi:5759
	-> Comparing positions: 1 with 0 has:21687407
	-> Comparing positions: 2 with 0 has:21687407
	-> Only read nSites: 21687407 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300408
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300408] from pop0:	11173
	-> Sites to keep[DPSCF300408] from pop1:	11173
	-> Sites to keep[DPSCF300408] from pop2:	11173
	-> [readdata] lastread:11173 posi:5759
	-> Comparing positions: 1 with 0 has:21698580
	-> Comparing positions: 2 with 0 has:21698580
	-> Only read nSites: 21698580 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300409
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300409] from pop0:	7705
	-> Sites to keep[DPSCF300409] from pop1:	7705
	-> Sites to keep[DPSCF300409] from pop2:	7705
	-> [readdata] lastread:7705 posi:5759
	-> Comparing positions: 1 with 0 has:21706285
	-> Comparing positions: 2 with 0 has:21706285
	-> Only read nSites: 21706285 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300410
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300410] from pop0:	4843
	-> Sites to keep[DPSCF300410] from pop1:	4843
	-> Sites to keep[DPSCF300410] from pop2:	4843
	-> [readdata] lastread:4843 posi:5759
	-> Comparing positions: 1 with 0 has:21711128
	-> Comparing positions: 2 with 0 has:21711128
	-> Only read nSites: 21711128 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300411
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300411] from pop0:	6177
	-> Sites to keep[DPSCF300411] from pop1:	6177
	-> Sites to keep[DPSCF300411] from pop2:	6177
	-> [readdata] lastread:6177 posi:5759
	-> Comparing positions: 1 with 0 has:21717305
	-> Comparing positions: 2 with 0 has:21717305
	-> Only read nSites: 21717305 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300412
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300412] from pop0:	4936
	-> Sites to keep[DPSCF300412] from pop1:	4936
	-> Sites to keep[DPSCF300412] from pop2:	4936
	-> [readdata] lastread:4936 posi:5759
	-> Comparing positions: 1 with 0 has:21722241
	-> Comparing positions: 2 with 0 has:21722241
	-> Only read nSites: 21722241 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300413
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300413] from pop0:	9017
	-> Sites to keep[DPSCF300413] from pop1:	9017
	-> Sites to keep[DPSCF300413] from pop2:	9017
	-> [readdata] lastread:9017 posi:5759
	-> Comparing positions: 1 with 0 has:21731258
	-> Comparing positions: 2 with 0 has:21731258
	-> Only read nSites: 21731258 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300414
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300414] from pop0:	5441
	-> Sites to keep[DPSCF300414] from pop1:	5441
	-> Sites to keep[DPSCF300414] from pop2:	5441
	-> [readdata] lastread:5441 posi:5759
	-> Comparing positions: 1 with 0 has:21736699
	-> Comparing positions: 2 with 0 has:21736699
	-> Only read nSites: 21736699 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300415
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300415] from pop0:	11545
	-> Sites to keep[DPSCF300415] from pop1:	11545
	-> Sites to keep[DPSCF300415] from pop2:	11545
	-> [readdata] lastread:11545 posi:5759
	-> Comparing positions: 1 with 0 has:21748244
	-> Comparing positions: 2 with 0 has:21748244
	-> Only read nSites: 21748244 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300416
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300416] from pop0:	6129
	-> Sites to keep[DPSCF300416] from pop1:	6129
	-> Sites to keep[DPSCF300416] from pop2:	6129
	-> [readdata] lastread:6129 posi:5759
	-> Comparing positions: 1 with 0 has:21754373
	-> Comparing positions: 2 with 0 has:21754373
	-> Only read nSites: 21754373 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300417
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300417] from pop0:	15065
	-> Sites to keep[DPSCF300417] from pop1:	15065
	-> Sites to keep[DPSCF300417] from pop2:	15065
	-> [readdata] lastread:15065 posi:5759
	-> Comparing positions: 1 with 0 has:21769438
	-> Comparing positions: 2 with 0 has:21769438
	-> Only read nSites: 21769438 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300418
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300418] from pop0:	5933
	-> Sites to keep[DPSCF300418] from pop1:	5933
	-> Sites to keep[DPSCF300418] from pop2:	5933
	-> [readdata] lastread:5933 posi:5759
	-> Comparing positions: 1 with 0 has:21775371
	-> Comparing positions: 2 with 0 has:21775371
	-> Only read nSites: 21775371 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300419
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300419] from pop0:	9674
	-> Sites to keep[DPSCF300419] from pop1:	9674
	-> Sites to keep[DPSCF300419] from pop2:	9674
	-> [readdata] lastread:9674 posi:5759
	-> Comparing positions: 1 with 0 has:21785045
	-> Comparing positions: 2 with 0 has:21785045
	-> Only read nSites: 21785045 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300420
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300420] from pop0:	7884
	-> Sites to keep[DPSCF300420] from pop1:	7884
	-> Sites to keep[DPSCF300420] from pop2:	7884
	-> [readdata] lastread:7884 posi:5759
	-> Comparing positions: 1 with 0 has:21792929
	-> Comparing positions: 2 with 0 has:21792929
	-> Only read nSites: 21792929 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300421
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300421] from pop0:	4590
	-> Sites to keep[DPSCF300421] from pop1:	4590
	-> Sites to keep[DPSCF300421] from pop2:	4590
	-> [readdata] lastread:4590 posi:5759
	-> Comparing positions: 1 with 0 has:21797519
	-> Comparing positions: 2 with 0 has:21797519
	-> Only read nSites: 21797519 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300422
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300422] from pop0:	5596
	-> Sites to keep[DPSCF300422] from pop1:	5596
	-> Sites to keep[DPSCF300422] from pop2:	5596
	-> [readdata] lastread:5596 posi:5759
	-> Comparing positions: 1 with 0 has:21803115
	-> Comparing positions: 2 with 0 has:21803115
	-> Only read nSites: 21803115 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300423
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300423] from pop0:	11108
	-> Sites to keep[DPSCF300423] from pop1:	11108
	-> Sites to keep[DPSCF300423] from pop2:	11108
	-> [readdata] lastread:11108 posi:5759
	-> Comparing positions: 1 with 0 has:21814223
	-> Comparing positions: 2 with 0 has:21814223
	-> Only read nSites: 21814223 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300424
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300424] from pop0:	6567
	-> Sites to keep[DPSCF300424] from pop1:	6567
	-> Sites to keep[DPSCF300424] from pop2:	6567
	-> [readdata] lastread:6567 posi:5759
	-> Comparing positions: 1 with 0 has:21820790
	-> Comparing positions: 2 with 0 has:21820790
	-> Only read nSites: 21820790 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300425
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300425] from pop0:	8782
	-> Sites to keep[DPSCF300425] from pop1:	8782
	-> Sites to keep[DPSCF300425] from pop2:	8782
	-> [readdata] lastread:8782 posi:5759
	-> Comparing positions: 1 with 0 has:21829572
	-> Comparing positions: 2 with 0 has:21829572
	-> Only read nSites: 21829572 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300426
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300426] from pop0:	11736
	-> Sites to keep[DPSCF300426] from pop1:	11736
	-> Sites to keep[DPSCF300426] from pop2:	11736
	-> [readdata] lastread:11736 posi:5759
	-> Comparing positions: 1 with 0 has:21841308
	-> Comparing positions: 2 with 0 has:21841308
	-> Only read nSites: 21841308 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300427
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300427] from pop0:	10457
	-> Sites to keep[DPSCF300427] from pop1:	10457
	-> Sites to keep[DPSCF300427] from pop2:	10457
	-> [readdata] lastread:10457 posi:5759
	-> Comparing positions: 1 with 0 has:21851765
	-> Comparing positions: 2 with 0 has:21851765
	-> Only read nSites: 21851765 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300428
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300428] from pop0:	8745
	-> Sites to keep[DPSCF300428] from pop1:	8745
	-> Sites to keep[DPSCF300428] from pop2:	8745
	-> [readdata] lastread:8745 posi:5759
	-> Comparing positions: 1 with 0 has:21860510
	-> Comparing positions: 2 with 0 has:21860510
	-> Only read nSites: 21860510 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300429
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300429] from pop0:	7240
	-> Sites to keep[DPSCF300429] from pop1:	7240
	-> Sites to keep[DPSCF300429] from pop2:	7240
	-> [readdata] lastread:7240 posi:5759
	-> Comparing positions: 1 with 0 has:21867750
	-> Comparing positions: 2 with 0 has:21867750
	-> Only read nSites: 21867750 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300430
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300430] from pop0:	3611
	-> Sites to keep[DPSCF300430] from pop1:	3611
	-> Sites to keep[DPSCF300430] from pop2:	3611
	-> [readdata] lastread:3611 posi:5759
	-> Comparing positions: 1 with 0 has:21871361
	-> Comparing positions: 2 with 0 has:21871361
	-> Only read nSites: 21871361 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300431
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300431] from pop0:	11936
	-> Sites to keep[DPSCF300431] from pop1:	11936
	-> Sites to keep[DPSCF300431] from pop2:	11936
	-> [readdata] lastread:11936 posi:5759
	-> Comparing positions: 1 with 0 has:21883297
	-> Comparing positions: 2 with 0 has:21883297
	-> Only read nSites: 21883297 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300432
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300432] from pop0:	19890
	-> Sites to keep[DPSCF300432] from pop1:	19890
	-> Sites to keep[DPSCF300432] from pop2:	19890
	-> [readdata] lastread:19890 posi:5759
	-> Comparing positions: 1 with 0 has:21903187
	-> Comparing positions: 2 with 0 has:21903187
	-> Only read nSites: 21903187 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300433
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300433] from pop0:	7630
	-> Sites to keep[DPSCF300433] from pop1:	7630
	-> Sites to keep[DPSCF300433] from pop2:	7630
	-> [readdata] lastread:7630 posi:5759
	-> Comparing positions: 1 with 0 has:21910817
	-> Comparing positions: 2 with 0 has:21910817
	-> Only read nSites: 21910817 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300434
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300434] from pop0:	5627
	-> Sites to keep[DPSCF300434] from pop1:	5627
	-> Sites to keep[DPSCF300434] from pop2:	5627
	-> [readdata] lastread:5627 posi:5759
	-> Comparing positions: 1 with 0 has:21916444
	-> Comparing positions: 2 with 0 has:21916444
	-> Only read nSites: 21916444 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300435
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300435] from pop0:	5640
	-> Sites to keep[DPSCF300435] from pop1:	5640
	-> Sites to keep[DPSCF300435] from pop2:	5640
	-> [readdata] lastread:5640 posi:5759
	-> Comparing positions: 1 with 0 has:21922084
	-> Comparing positions: 2 with 0 has:21922084
	-> Only read nSites: 21922084 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300436
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300436] from pop0:	3180
	-> Sites to keep[DPSCF300436] from pop1:	3180
	-> Sites to keep[DPSCF300436] from pop2:	3180
	-> [readdata] lastread:3180 posi:5759
	-> Comparing positions: 1 with 0 has:21925264
	-> Comparing positions: 2 with 0 has:21925264
	-> Only read nSites: 21925264 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300437
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300437] from pop0:	7035
	-> Sites to keep[DPSCF300437] from pop1:	7035
	-> Sites to keep[DPSCF300437] from pop2:	7035
	-> [readdata] lastread:7035 posi:5759
	-> Comparing positions: 1 with 0 has:21932299
	-> Comparing positions: 2 with 0 has:21932299
	-> Only read nSites: 21932299 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300438
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300438] from pop0:	9013
	-> Sites to keep[DPSCF300438] from pop1:	9013
	-> Sites to keep[DPSCF300438] from pop2:	9013
	-> [readdata] lastread:9013 posi:5759
	-> Comparing positions: 1 with 0 has:21941312
	-> Comparing positions: 2 with 0 has:21941312
	-> Only read nSites: 21941312 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300439
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300439] from pop0:	5799
	-> Sites to keep[DPSCF300439] from pop1:	5799
	-> Sites to keep[DPSCF300439] from pop2:	5799
	-> [readdata] lastread:5799 posi:5759
	-> Comparing positions: 1 with 0 has:21947111
	-> Comparing positions: 2 with 0 has:21947111
	-> Only read nSites: 21947111 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300440
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300440] from pop0:	4510
	-> Sites to keep[DPSCF300440] from pop1:	4510
	-> Sites to keep[DPSCF300440] from pop2:	4510
	-> [readdata] lastread:4510 posi:5759
	-> Comparing positions: 1 with 0 has:21951621
	-> Comparing positions: 2 with 0 has:21951621
	-> Only read nSites: 21951621 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300441
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300441] from pop0:	10473
	-> Sites to keep[DPSCF300441] from pop1:	10473
	-> Sites to keep[DPSCF300441] from pop2:	10473
	-> [readdata] lastread:10473 posi:5759
	-> Comparing positions: 1 with 0 has:21962094
	-> Comparing positions: 2 with 0 has:21962094
	-> Only read nSites: 21962094 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300442
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300442] from pop0:	6053
	-> Sites to keep[DPSCF300442] from pop1:	6053
	-> Sites to keep[DPSCF300442] from pop2:	6053
	-> [readdata] lastread:6053 posi:5759
	-> Comparing positions: 1 with 0 has:21968147
	-> Comparing positions: 2 with 0 has:21968147
	-> Only read nSites: 21968147 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300443
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300443] from pop0:	2442
	-> Sites to keep[DPSCF300443] from pop1:	2442
	-> Sites to keep[DPSCF300443] from pop2:	2442
	-> [readdata] lastread:2442 posi:5759
	-> Comparing positions: 1 with 0 has:21970589
	-> Comparing positions: 2 with 0 has:21970589
	-> Only read nSites: 21970589 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300444
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300444] from pop0:	11585
	-> Sites to keep[DPSCF300444] from pop1:	11585
	-> Sites to keep[DPSCF300444] from pop2:	11585
	-> [readdata] lastread:11585 posi:5759
	-> Comparing positions: 1 with 0 has:21982174
	-> Comparing positions: 2 with 0 has:21982174
	-> Only read nSites: 21982174 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300445
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300445] from pop0:	5600
	-> Sites to keep[DPSCF300445] from pop1:	5600
	-> Sites to keep[DPSCF300445] from pop2:	5600
	-> [readdata] lastread:5600 posi:5759
	-> Comparing positions: 1 with 0 has:21987774
	-> Comparing positions: 2 with 0 has:21987774
	-> Only read nSites: 21987774 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300446
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300446] from pop0:	13437
	-> Sites to keep[DPSCF300446] from pop1:	13437
	-> Sites to keep[DPSCF300446] from pop2:	13437
	-> [readdata] lastread:13437 posi:5759
	-> Comparing positions: 1 with 0 has:22001211
	-> Comparing positions: 2 with 0 has:22001211
	-> Only read nSites: 22001211 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300447
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300447] from pop0:	4096
	-> Sites to keep[DPSCF300447] from pop1:	4096
	-> Sites to keep[DPSCF300447] from pop2:	4096
	-> [readdata] lastread:4096 posi:5759
	-> Comparing positions: 1 with 0 has:22005307
	-> Comparing positions: 2 with 0 has:22005307
	-> Only read nSites: 22005307 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300448
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300448] from pop0:	3951
	-> Sites to keep[DPSCF300448] from pop1:	3951
	-> Sites to keep[DPSCF300448] from pop2:	3951
	-> [readdata] lastread:3951 posi:5759
	-> Comparing positions: 1 with 0 has:22009258
	-> Comparing positions: 2 with 0 has:22009258
	-> Only read nSites: 22009258 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300449
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300449] from pop0:	6564
	-> Sites to keep[DPSCF300449] from pop1:	6564
	-> Sites to keep[DPSCF300449] from pop2:	6564
	-> [readdata] lastread:6564 posi:5759
	-> Comparing positions: 1 with 0 has:22015822
	-> Comparing positions: 2 with 0 has:22015822
	-> Only read nSites: 22015822 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300450
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300450] from pop0:	9495
	-> Sites to keep[DPSCF300450] from pop1:	9495
	-> Sites to keep[DPSCF300450] from pop2:	9495
	-> [readdata] lastread:9495 posi:5759
	-> Comparing positions: 1 with 0 has:22025317
	-> Comparing positions: 2 with 0 has:22025317
	-> Only read nSites: 22025317 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300451
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300451] from pop0:	10563
	-> Sites to keep[DPSCF300451] from pop1:	10563
	-> Sites to keep[DPSCF300451] from pop2:	10563
	-> [readdata] lastread:10563 posi:5759
	-> Comparing positions: 1 with 0 has:22035880
	-> Comparing positions: 2 with 0 has:22035880
	-> Only read nSites: 22035880 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300452
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300452] from pop0:	5127
	-> Sites to keep[DPSCF300452] from pop1:	5127
	-> Sites to keep[DPSCF300452] from pop2:	5127
	-> [readdata] lastread:5127 posi:5759
	-> Comparing positions: 1 with 0 has:22041007
	-> Comparing positions: 2 with 0 has:22041007
	-> Only read nSites: 22041007 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300453
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300453] from pop0:	6466
	-> Sites to keep[DPSCF300453] from pop1:	6466
	-> Sites to keep[DPSCF300453] from pop2:	6466
	-> [readdata] lastread:6466 posi:5759
	-> Comparing positions: 1 with 0 has:22047473
	-> Comparing positions: 2 with 0 has:22047473
	-> Only read nSites: 22047473 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300454
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300454] from pop0:	14159
	-> Sites to keep[DPSCF300454] from pop1:	14159
	-> Sites to keep[DPSCF300454] from pop2:	14159
	-> [readdata] lastread:14159 posi:5759
	-> Comparing positions: 1 with 0 has:22061632
	-> Comparing positions: 2 with 0 has:22061632
	-> Only read nSites: 22061632 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300455
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300455] from pop0:	9585
	-> Sites to keep[DPSCF300455] from pop1:	9585
	-> Sites to keep[DPSCF300455] from pop2:	9585
	-> [readdata] lastread:9585 posi:5759
	-> Comparing positions: 1 with 0 has:22071217
	-> Comparing positions: 2 with 0 has:22071217
	-> Only read nSites: 22071217 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300456
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300456] from pop0:	8197
	-> Sites to keep[DPSCF300456] from pop1:	8197
	-> Sites to keep[DPSCF300456] from pop2:	8197
	-> [readdata] lastread:8197 posi:5759
	-> Comparing positions: 1 with 0 has:22079414
	-> Comparing positions: 2 with 0 has:22079414
	-> Only read nSites: 22079414 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300457
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300457] from pop0:	5351
	-> Sites to keep[DPSCF300457] from pop1:	5351
	-> Sites to keep[DPSCF300457] from pop2:	5351
	-> [readdata] lastread:5351 posi:5759
	-> Comparing positions: 1 with 0 has:22084765
	-> Comparing positions: 2 with 0 has:22084765
	-> Only read nSites: 22084765 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300458
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300458] from pop0:	2689
	-> Sites to keep[DPSCF300458] from pop1:	2689
	-> Sites to keep[DPSCF300458] from pop2:	2689
	-> [readdata] lastread:2689 posi:5759
	-> Comparing positions: 1 with 0 has:22087454
	-> Comparing positions: 2 with 0 has:22087454
	-> Only read nSites: 22087454 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300459
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300459] from pop0:	7747
	-> Sites to keep[DPSCF300459] from pop1:	7747
	-> Sites to keep[DPSCF300459] from pop2:	7747
	-> [readdata] lastread:7747 posi:5759
	-> Comparing positions: 1 with 0 has:22095201
	-> Comparing positions: 2 with 0 has:22095201
	-> Only read nSites: 22095201 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300460
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300460] from pop0:	8250
	-> Sites to keep[DPSCF300460] from pop1:	8250
	-> Sites to keep[DPSCF300460] from pop2:	8250
	-> [readdata] lastread:8250 posi:5759
	-> Comparing positions: 1 with 0 has:22103451
	-> Comparing positions: 2 with 0 has:22103451
	-> Only read nSites: 22103451 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300461
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300461] from pop0:	2575
	-> Sites to keep[DPSCF300461] from pop1:	2575
	-> Sites to keep[DPSCF300461] from pop2:	2575
	-> [readdata] lastread:2575 posi:5759
	-> Comparing positions: 1 with 0 has:22106026
	-> Comparing positions: 2 with 0 has:22106026
	-> Only read nSites: 22106026 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300462
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300462] from pop0:	5513
	-> Sites to keep[DPSCF300462] from pop1:	5513
	-> Sites to keep[DPSCF300462] from pop2:	5513
	-> [readdata] lastread:5513 posi:5759
	-> Comparing positions: 1 with 0 has:22111539
	-> Comparing positions: 2 with 0 has:22111539
	-> Only read nSites: 22111539 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300463
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300463] from pop0:	3576
	-> Sites to keep[DPSCF300463] from pop1:	3576
	-> Sites to keep[DPSCF300463] from pop2:	3576
	-> [readdata] lastread:3576 posi:5759
	-> Comparing positions: 1 with 0 has:22115115
	-> Comparing positions: 2 with 0 has:22115115
	-> Only read nSites: 22115115 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300464
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300464] from pop0:	2777
	-> Sites to keep[DPSCF300464] from pop1:	2777
	-> Sites to keep[DPSCF300464] from pop2:	2777
	-> [readdata] lastread:2777 posi:5759
	-> Comparing positions: 1 with 0 has:22117892
	-> Comparing positions: 2 with 0 has:22117892
	-> Only read nSites: 22117892 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300465
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300465] from pop0:	4871
	-> Sites to keep[DPSCF300465] from pop1:	4871
	-> Sites to keep[DPSCF300465] from pop2:	4871
	-> [readdata] lastread:4871 posi:5759
	-> Comparing positions: 1 with 0 has:22122763
	-> Comparing positions: 2 with 0 has:22122763
	-> Only read nSites: 22122763 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300466
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300466] from pop0:	4111
	-> Sites to keep[DPSCF300466] from pop1:	4111
	-> Sites to keep[DPSCF300466] from pop2:	4111
	-> [readdata] lastread:4111 posi:5759
	-> Comparing positions: 1 with 0 has:22126874
	-> Comparing positions: 2 with 0 has:22126874
	-> Only read nSites: 22126874 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300467
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300467] from pop0:	8838
	-> Sites to keep[DPSCF300467] from pop1:	8838
	-> Sites to keep[DPSCF300467] from pop2:	8838
	-> [readdata] lastread:8838 posi:5759
	-> Comparing positions: 1 with 0 has:22135712
	-> Comparing positions: 2 with 0 has:22135712
	-> Only read nSites: 22135712 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300468
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300468] from pop0:	5472
	-> Sites to keep[DPSCF300468] from pop1:	5472
	-> Sites to keep[DPSCF300468] from pop2:	5472
	-> [readdata] lastread:5472 posi:5759
	-> Comparing positions: 1 with 0 has:22141184
	-> Comparing positions: 2 with 0 has:22141184
	-> Only read nSites: 22141184 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300469
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300469] from pop0:	2178
	-> Sites to keep[DPSCF300469] from pop1:	2178
	-> Sites to keep[DPSCF300469] from pop2:	2178
	-> [readdata] lastread:2178 posi:5759
	-> Comparing positions: 1 with 0 has:22143362
	-> Comparing positions: 2 with 0 has:22143362
	-> Only read nSites: 22143362 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300470
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300470] from pop0:	2104
	-> Sites to keep[DPSCF300470] from pop1:	2104
	-> Sites to keep[DPSCF300470] from pop2:	2104
	-> [readdata] lastread:2104 posi:5759
	-> Comparing positions: 1 with 0 has:22145466
	-> Comparing positions: 2 with 0 has:22145466
	-> Only read nSites: 22145466 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300471
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300471] from pop0:	5080
	-> Sites to keep[DPSCF300471] from pop1:	5080
	-> Sites to keep[DPSCF300471] from pop2:	5080
	-> [readdata] lastread:5080 posi:5759
	-> Comparing positions: 1 with 0 has:22150546
	-> Comparing positions: 2 with 0 has:22150546
	-> Only read nSites: 22150546 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300472
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300472] from pop0:	3038
	-> Sites to keep[DPSCF300472] from pop1:	3038
	-> Sites to keep[DPSCF300472] from pop2:	3038
	-> [readdata] lastread:3038 posi:5759
	-> Comparing positions: 1 with 0 has:22153584
	-> Comparing positions: 2 with 0 has:22153584
	-> Only read nSites: 22153584 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300473
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300473] from pop0:	2273
	-> Sites to keep[DPSCF300473] from pop1:	2273
	-> Sites to keep[DPSCF300473] from pop2:	2273
	-> [readdata] lastread:2273 posi:5759
	-> Comparing positions: 1 with 0 has:22155857
	-> Comparing positions: 2 with 0 has:22155857
	-> Only read nSites: 22155857 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300474
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300474] from pop0:	3883
	-> Sites to keep[DPSCF300474] from pop1:	3883
	-> Sites to keep[DPSCF300474] from pop2:	3883
	-> [readdata] lastread:3883 posi:5759
	-> Comparing positions: 1 with 0 has:22159740
	-> Comparing positions: 2 with 0 has:22159740
	-> Only read nSites: 22159740 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300475
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300475] from pop0:	4216
	-> Sites to keep[DPSCF300475] from pop1:	4216
	-> Sites to keep[DPSCF300475] from pop2:	4216
	-> [readdata] lastread:4216 posi:5759
	-> Comparing positions: 1 with 0 has:22163956
	-> Comparing positions: 2 with 0 has:22163956
	-> Only read nSites: 22163956 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300476
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300476] from pop0:	1694
	-> Sites to keep[DPSCF300476] from pop1:	1694
	-> Sites to keep[DPSCF300476] from pop2:	1694
	-> [readdata] lastread:1694 posi:5759
	-> Comparing positions: 1 with 0 has:22165650
	-> Comparing positions: 2 with 0 has:22165650
	-> Only read nSites: 22165650 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300477
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300477] from pop0:	3448
	-> Sites to keep[DPSCF300477] from pop1:	3448
	-> Sites to keep[DPSCF300477] from pop2:	3448
	-> [readdata] lastread:3448 posi:5759
	-> Comparing positions: 1 with 0 has:22169098
	-> Comparing positions: 2 with 0 has:22169098
	-> Only read nSites: 22169098 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300478
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300478] from pop0:	7480
	-> Sites to keep[DPSCF300478] from pop1:	7480
	-> Sites to keep[DPSCF300478] from pop2:	7480
	-> [readdata] lastread:7480 posi:5759
	-> Comparing positions: 1 with 0 has:22176578
	-> Comparing positions: 2 with 0 has:22176578
	-> Only read nSites: 22176578 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300479
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300479] from pop0:	6762
	-> Sites to keep[DPSCF300479] from pop1:	6762
	-> Sites to keep[DPSCF300479] from pop2:	6762
	-> [readdata] lastread:6762 posi:5759
	-> Comparing positions: 1 with 0 has:22183340
	-> Comparing positions: 2 with 0 has:22183340
	-> Only read nSites: 22183340 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300480
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300480] from pop0:	6472
	-> Sites to keep[DPSCF300480] from pop1:	6472
	-> Sites to keep[DPSCF300480] from pop2:	6472
	-> [readdata] lastread:6472 posi:5759
	-> Comparing positions: 1 with 0 has:22189812
	-> Comparing positions: 2 with 0 has:22189812
	-> Only read nSites: 22189812 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300481
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300481] from pop0:	4630
	-> Sites to keep[DPSCF300481] from pop1:	4630
	-> Sites to keep[DPSCF300481] from pop2:	4630
	-> [readdata] lastread:4630 posi:5759
	-> Comparing positions: 1 with 0 has:22194442
	-> Comparing positions: 2 with 0 has:22194442
	-> Only read nSites: 22194442 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300482
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300482] from pop0:	3704
	-> Sites to keep[DPSCF300482] from pop1:	3704
	-> Sites to keep[DPSCF300482] from pop2:	3704
	-> [readdata] lastread:3704 posi:5759
	-> Comparing positions: 1 with 0 has:22198146
	-> Comparing positions: 2 with 0 has:22198146
	-> Only read nSites: 22198146 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300483
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300483] from pop0:	1638
	-> Sites to keep[DPSCF300483] from pop1:	1638
	-> Sites to keep[DPSCF300483] from pop2:	1638
	-> [readdata] lastread:1638 posi:5759
	-> Comparing positions: 1 with 0 has:22199784
	-> Comparing positions: 2 with 0 has:22199784
	-> Only read nSites: 22199784 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300484
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300484] from pop0:	5524
	-> Sites to keep[DPSCF300484] from pop1:	5524
	-> Sites to keep[DPSCF300484] from pop2:	5524
	-> [readdata] lastread:5524 posi:5759
	-> Comparing positions: 1 with 0 has:22205308
	-> Comparing positions: 2 with 0 has:22205308
	-> Only read nSites: 22205308 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300485
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300485] from pop0:	10033
	-> Sites to keep[DPSCF300485] from pop1:	10033
	-> Sites to keep[DPSCF300485] from pop2:	10033
	-> [readdata] lastread:10033 posi:5759
	-> Comparing positions: 1 with 0 has:22215341
	-> Comparing positions: 2 with 0 has:22215341
	-> Only read nSites: 22215341 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300486
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300486] from pop0:	6819
	-> Sites to keep[DPSCF300486] from pop1:	6819
	-> Sites to keep[DPSCF300486] from pop2:	6819
	-> [readdata] lastread:6819 posi:5759
	-> Comparing positions: 1 with 0 has:22222160
	-> Comparing positions: 2 with 0 has:22222160
	-> Only read nSites: 22222160 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300487
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300487] from pop0:	1748
	-> Sites to keep[DPSCF300487] from pop1:	1748
	-> Sites to keep[DPSCF300487] from pop2:	1748
	-> [readdata] lastread:1748 posi:5759
	-> Comparing positions: 1 with 0 has:22223908
	-> Comparing positions: 2 with 0 has:22223908
	-> Only read nSites: 22223908 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300488
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300488] from pop0:	3701
	-> Sites to keep[DPSCF300488] from pop1:	3701
	-> Sites to keep[DPSCF300488] from pop2:	3701
	-> [readdata] lastread:3701 posi:5759
	-> Comparing positions: 1 with 0 has:22227609
	-> Comparing positions: 2 with 0 has:22227609
	-> Only read nSites: 22227609 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300489
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300489] from pop0:	3946
	-> Sites to keep[DPSCF300489] from pop1:	3946
	-> Sites to keep[DPSCF300489] from pop2:	3946
	-> [readdata] lastread:3946 posi:5759
	-> Comparing positions: 1 with 0 has:22231555
	-> Comparing positions: 2 with 0 has:22231555
	-> Only read nSites: 22231555 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300490
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300490] from pop0:	2418
	-> Sites to keep[DPSCF300490] from pop1:	2418
	-> Sites to keep[DPSCF300490] from pop2:	2418
	-> [readdata] lastread:2418 posi:5759
	-> Comparing positions: 1 with 0 has:22233973
	-> Comparing positions: 2 with 0 has:22233973
	-> Only read nSites: 22233973 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300491
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300491] from pop0:	3482
	-> Sites to keep[DPSCF300491] from pop1:	3482
	-> Sites to keep[DPSCF300491] from pop2:	3482
	-> [readdata] lastread:3482 posi:5759
	-> Comparing positions: 1 with 0 has:22237455
	-> Comparing positions: 2 with 0 has:22237455
	-> Only read nSites: 22237455 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300492
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300492] from pop0:	3982
	-> Sites to keep[DPSCF300492] from pop1:	3982
	-> Sites to keep[DPSCF300492] from pop2:	3982
	-> [readdata] lastread:3982 posi:5759
	-> Comparing positions: 1 with 0 has:22241437
	-> Comparing positions: 2 with 0 has:22241437
	-> Only read nSites: 22241437 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300493
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300493] from pop0:	2186
	-> Sites to keep[DPSCF300493] from pop1:	2186
	-> Sites to keep[DPSCF300493] from pop2:	2186
	-> [readdata] lastread:2186 posi:5759
	-> Comparing positions: 1 with 0 has:22243623
	-> Comparing positions: 2 with 0 has:22243623
	-> Only read nSites: 22243623 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300494
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300494] from pop0:	6539
	-> Sites to keep[DPSCF300494] from pop1:	6539
	-> Sites to keep[DPSCF300494] from pop2:	6539
	-> [readdata] lastread:6539 posi:5759
	-> Comparing positions: 1 with 0 has:22250162
	-> Comparing positions: 2 with 0 has:22250162
	-> Only read nSites: 22250162 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300495
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300495] from pop0:	3533
	-> Sites to keep[DPSCF300495] from pop1:	3533
	-> Sites to keep[DPSCF300495] from pop2:	3533
	-> [readdata] lastread:3533 posi:5759
	-> Comparing positions: 1 with 0 has:22253695
	-> Comparing positions: 2 with 0 has:22253695
	-> Only read nSites: 22253695 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300496
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300496] from pop0:	2623
	-> Sites to keep[DPSCF300496] from pop1:	2623
	-> Sites to keep[DPSCF300496] from pop2:	2623
	-> [readdata] lastread:2623 posi:5759
	-> Comparing positions: 1 with 0 has:22256318
	-> Comparing positions: 2 with 0 has:22256318
	-> Only read nSites: 22256318 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300497
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300497] from pop0:	1233
	-> Sites to keep[DPSCF300497] from pop1:	1233
	-> Sites to keep[DPSCF300497] from pop2:	1233
	-> [readdata] lastread:1233 posi:5759
	-> Comparing positions: 1 with 0 has:22257551
	-> Comparing positions: 2 with 0 has:22257551
	-> Only read nSites: 22257551 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300498
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300498] from pop0:	5390
	-> Sites to keep[DPSCF300498] from pop1:	5390
	-> Sites to keep[DPSCF300498] from pop2:	5390
	-> [readdata] lastread:5390 posi:5759
	-> Comparing positions: 1 with 0 has:22262941
	-> Comparing positions: 2 with 0 has:22262941
	-> Only read nSites: 22262941 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300499
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300499] from pop0:	3178
	-> Sites to keep[DPSCF300499] from pop1:	3178
	-> Sites to keep[DPSCF300499] from pop2:	3178
	-> [readdata] lastread:3178 posi:5759
	-> Comparing positions: 1 with 0 has:22266119
	-> Comparing positions: 2 with 0 has:22266119
	-> Only read nSites: 22266119 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300500
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300500] from pop0:	3667
	-> Sites to keep[DPSCF300500] from pop1:	3667
	-> Sites to keep[DPSCF300500] from pop2:	3667
	-> [readdata] lastread:3667 posi:5759
	-> Comparing positions: 1 with 0 has:22269786
	-> Comparing positions: 2 with 0 has:22269786
	-> Only read nSites: 22269786 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300501
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300501] from pop0:	3783
	-> Sites to keep[DPSCF300501] from pop1:	3783
	-> Sites to keep[DPSCF300501] from pop2:	3783
	-> [readdata] lastread:3783 posi:5759
	-> Comparing positions: 1 with 0 has:22273569
	-> Comparing positions: 2 with 0 has:22273569
	-> Only read nSites: 22273569 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300502
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300502] from pop0:	5369
	-> Sites to keep[DPSCF300502] from pop1:	5369
	-> Sites to keep[DPSCF300502] from pop2:	5369
	-> [readdata] lastread:5369 posi:5759
	-> Comparing positions: 1 with 0 has:22278938
	-> Comparing positions: 2 with 0 has:22278938
	-> Only read nSites: 22278938 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300503
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300503] from pop0:	4444
	-> Sites to keep[DPSCF300503] from pop1:	4444
	-> Sites to keep[DPSCF300503] from pop2:	4444
	-> [readdata] lastread:4444 posi:5759
	-> Comparing positions: 1 with 0 has:22283382
	-> Comparing positions: 2 with 0 has:22283382
	-> Only read nSites: 22283382 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300504
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300504] from pop0:	3404
	-> Sites to keep[DPSCF300504] from pop1:	3404
	-> Sites to keep[DPSCF300504] from pop2:	3404
	-> [readdata] lastread:3404 posi:5759
	-> Comparing positions: 1 with 0 has:22286786
	-> Comparing positions: 2 with 0 has:22286786
	-> Only read nSites: 22286786 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300505
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300505] from pop0:	3347
	-> Sites to keep[DPSCF300505] from pop1:	3347
	-> Sites to keep[DPSCF300505] from pop2:	3347
	-> [readdata] lastread:3347 posi:5759
	-> Comparing positions: 1 with 0 has:22290133
	-> Comparing positions: 2 with 0 has:22290133
	-> Only read nSites: 22290133 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300506
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300506] from pop0:	3405
	-> Sites to keep[DPSCF300506] from pop1:	3405
	-> Sites to keep[DPSCF300506] from pop2:	3405
	-> [readdata] lastread:3405 posi:5759
	-> Comparing positions: 1 with 0 has:22293538
	-> Comparing positions: 2 with 0 has:22293538
	-> Only read nSites: 22293538 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300507
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300507] from pop0:	4654
	-> Sites to keep[DPSCF300507] from pop1:	4654
	-> Sites to keep[DPSCF300507] from pop2:	4654
	-> [readdata] lastread:4654 posi:5759
	-> Comparing positions: 1 with 0 has:22298192
	-> Comparing positions: 2 with 0 has:22298192
	-> Only read nSites: 22298192 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300508
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300508] from pop0:	731
	-> Sites to keep[DPSCF300508] from pop1:	731
	-> Sites to keep[DPSCF300508] from pop2:	731
	-> [readdata] lastread:731 posi:5759
	-> Comparing positions: 1 with 0 has:22298923
	-> Comparing positions: 2 with 0 has:22298923
	-> Only read nSites: 22298923 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300509
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300509] from pop0:	3402
	-> Sites to keep[DPSCF300509] from pop1:	3402
	-> Sites to keep[DPSCF300509] from pop2:	3402
	-> [readdata] lastread:3402 posi:5759
	-> Comparing positions: 1 with 0 has:22302325
	-> Comparing positions: 2 with 0 has:22302325
	-> Only read nSites: 22302325 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300510
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300510] from pop0:	3340
	-> Sites to keep[DPSCF300510] from pop1:	3340
	-> Sites to keep[DPSCF300510] from pop2:	3340
	-> [readdata] lastread:3340 posi:5759
	-> Comparing positions: 1 with 0 has:22305665
	-> Comparing positions: 2 with 0 has:22305665
	-> Only read nSites: 22305665 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300511
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300511] from pop0:	1975
	-> Sites to keep[DPSCF300511] from pop1:	1975
	-> Sites to keep[DPSCF300511] from pop2:	1975
	-> [readdata] lastread:1975 posi:5759
	-> Comparing positions: 1 with 0 has:22307640
	-> Comparing positions: 2 with 0 has:22307640
	-> Only read nSites: 22307640 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300512
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300512] from pop0:	7247
	-> Sites to keep[DPSCF300512] from pop1:	7247
	-> Sites to keep[DPSCF300512] from pop2:	7247
	-> [readdata] lastread:7247 posi:5759
	-> Comparing positions: 1 with 0 has:22314887
	-> Comparing positions: 2 with 0 has:22314887
	-> Only read nSites: 22314887 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300513
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300513] from pop0:	340
	-> Sites to keep[DPSCF300513] from pop1:	340
	-> Sites to keep[DPSCF300513] from pop2:	340
	-> [readdata] lastread:340 posi:5759
	-> Comparing positions: 1 with 0 has:22315227
	-> Comparing positions: 2 with 0 has:22315227
	-> Only read nSites: 22315227 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300514
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300514] from pop0:	3962
	-> Sites to keep[DPSCF300514] from pop1:	3962
	-> Sites to keep[DPSCF300514] from pop2:	3962
	-> [readdata] lastread:3962 posi:5759
	-> Comparing positions: 1 with 0 has:22319189
	-> Comparing positions: 2 with 0 has:22319189
	-> Only read nSites: 22319189 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300515
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300515] from pop0:	2538
	-> Sites to keep[DPSCF300515] from pop1:	2538
	-> Sites to keep[DPSCF300515] from pop2:	2538
	-> [readdata] lastread:2538 posi:5759
	-> Comparing positions: 1 with 0 has:22321727
	-> Comparing positions: 2 with 0 has:22321727
	-> Only read nSites: 22321727 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300516
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300516] from pop0:	3968
	-> Sites to keep[DPSCF300516] from pop1:	3968
	-> Sites to keep[DPSCF300516] from pop2:	3968
	-> [readdata] lastread:3968 posi:5759
	-> Comparing positions: 1 with 0 has:22325695
	-> Comparing positions: 2 with 0 has:22325695
	-> Only read nSites: 22325695 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300517
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300517] from pop0:	1259
	-> Sites to keep[DPSCF300517] from pop1:	1259
	-> Sites to keep[DPSCF300517] from pop2:	1259
	-> [readdata] lastread:1259 posi:5759
	-> Comparing positions: 1 with 0 has:22326954
	-> Comparing positions: 2 with 0 has:22326954
	-> Only read nSites: 22326954 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300518
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300518] from pop0:	5693
	-> Sites to keep[DPSCF300518] from pop1:	5693
	-> Sites to keep[DPSCF300518] from pop2:	5693
	-> [readdata] lastread:5693 posi:5759
	-> Comparing positions: 1 with 0 has:22332647
	-> Comparing positions: 2 with 0 has:22332647
	-> Only read nSites: 22332647 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300519
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300519] from pop0:	2029
	-> Sites to keep[DPSCF300519] from pop1:	2029
	-> Sites to keep[DPSCF300519] from pop2:	2029
	-> [readdata] lastread:2029 posi:5759
	-> Comparing positions: 1 with 0 has:22334676
	-> Comparing positions: 2 with 0 has:22334676
	-> Only read nSites: 22334676 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300520
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300520] from pop0:	616
	-> Sites to keep[DPSCF300520] from pop1:	616
	-> Sites to keep[DPSCF300520] from pop2:	616
	-> [readdata] lastread:616 posi:5759
	-> Comparing positions: 1 with 0 has:22335292
	-> Comparing positions: 2 with 0 has:22335292
	-> Only read nSites: 22335292 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300521
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300521] from pop0:	1178
	-> Sites to keep[DPSCF300521] from pop1:	1178
	-> Sites to keep[DPSCF300521] from pop2:	1178
	-> [readdata] lastread:1178 posi:5759
	-> Comparing positions: 1 with 0 has:22336470
	-> Comparing positions: 2 with 0 has:22336470
	-> Only read nSites: 22336470 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300522
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300522] from pop0:	5811
	-> Sites to keep[DPSCF300522] from pop1:	5811
	-> Sites to keep[DPSCF300522] from pop2:	5811
	-> [readdata] lastread:5811 posi:5759
	-> Comparing positions: 1 with 0 has:22342281
	-> Comparing positions: 2 with 0 has:22342281
	-> Only read nSites: 22342281 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300523
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300523] from pop0:	5514
	-> Sites to keep[DPSCF300523] from pop1:	5514
	-> Sites to keep[DPSCF300523] from pop2:	5514
	-> [readdata] lastread:5514 posi:5759
	-> Comparing positions: 1 with 0 has:22347795
	-> Comparing positions: 2 with 0 has:22347795
	-> Only read nSites: 22347795 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300524
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300524] from pop0:	1209
	-> Sites to keep[DPSCF300524] from pop1:	1209
	-> Sites to keep[DPSCF300524] from pop2:	1209
	-> [readdata] lastread:1209 posi:5759
	-> Comparing positions: 1 with 0 has:22349004
	-> Comparing positions: 2 with 0 has:22349004
	-> Only read nSites: 22349004 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300525
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300525] from pop0:	2589
	-> Sites to keep[DPSCF300525] from pop1:	2589
	-> Sites to keep[DPSCF300525] from pop2:	2589
	-> [readdata] lastread:2589 posi:5759
	-> Comparing positions: 1 with 0 has:22351593
	-> Comparing positions: 2 with 0 has:22351593
	-> Only read nSites: 22351593 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300526
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300526] from pop0:	315
	-> Sites to keep[DPSCF300526] from pop1:	315
	-> Sites to keep[DPSCF300526] from pop2:	315
	-> [readdata] lastread:315 posi:5759
	-> Comparing positions: 1 with 0 has:22351908
	-> Comparing positions: 2 with 0 has:22351908
	-> Only read nSites: 22351908 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300527
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300527] from pop0:	4307
	-> Sites to keep[DPSCF300527] from pop1:	4307
	-> Sites to keep[DPSCF300527] from pop2:	4307
	-> [readdata] lastread:4307 posi:5759
	-> Comparing positions: 1 with 0 has:22356215
	-> Comparing positions: 2 with 0 has:22356215
	-> Only read nSites: 22356215 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300528
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300528] from pop0:	1743
	-> Sites to keep[DPSCF300528] from pop1:	1743
	-> Sites to keep[DPSCF300528] from pop2:	1743
	-> [readdata] lastread:1743 posi:5759
	-> Comparing positions: 1 with 0 has:22357958
	-> Comparing positions: 2 with 0 has:22357958
	-> Only read nSites: 22357958 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300529
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300529] from pop0:	2660
	-> Sites to keep[DPSCF300529] from pop1:	2660
	-> Sites to keep[DPSCF300529] from pop2:	2660
	-> [readdata] lastread:2660 posi:5759
	-> Comparing positions: 1 with 0 has:22360618
	-> Comparing positions: 2 with 0 has:22360618
	-> Only read nSites: 22360618 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300530
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300530] from pop0:	2447
	-> Sites to keep[DPSCF300530] from pop1:	2447
	-> Sites to keep[DPSCF300530] from pop2:	2447
	-> [readdata] lastread:2447 posi:5759
	-> Comparing positions: 1 with 0 has:22363065
	-> Comparing positions: 2 with 0 has:22363065
	-> Only read nSites: 22363065 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300531
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300531] from pop0:	429
	-> Sites to keep[DPSCF300531] from pop1:	429
	-> Sites to keep[DPSCF300531] from pop2:	429
	-> [readdata] lastread:429 posi:5759
	-> Comparing positions: 1 with 0 has:22363494
	-> Comparing positions: 2 with 0 has:22363494
	-> Only read nSites: 22363494 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300532
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300532] from pop0:	3274
	-> Sites to keep[DPSCF300532] from pop1:	3274
	-> Sites to keep[DPSCF300532] from pop2:	3274
	-> [readdata] lastread:3274 posi:5759
	-> Comparing positions: 1 with 0 has:22366768
	-> Comparing positions: 2 with 0 has:22366768
	-> Only read nSites: 22366768 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300533
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300533] from pop0:	1213
	-> Sites to keep[DPSCF300533] from pop1:	1213
	-> Sites to keep[DPSCF300533] from pop2:	1213
	-> [readdata] lastread:1213 posi:5759
	-> Comparing positions: 1 with 0 has:22367981
	-> Comparing positions: 2 with 0 has:22367981
	-> Only read nSites: 22367981 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300534
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300534] from pop0:	1764
	-> Sites to keep[DPSCF300534] from pop1:	1764
	-> Sites to keep[DPSCF300534] from pop2:	1764
	-> [readdata] lastread:1764 posi:5759
	-> Comparing positions: 1 with 0 has:22369745
	-> Comparing positions: 2 with 0 has:22369745
	-> Only read nSites: 22369745 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300535
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300535] from pop0:	3017
	-> Sites to keep[DPSCF300535] from pop1:	3017
	-> Sites to keep[DPSCF300535] from pop2:	3017
	-> [readdata] lastread:3017 posi:5759
	-> Comparing positions: 1 with 0 has:22372762
	-> Comparing positions: 2 with 0 has:22372762
	-> Only read nSites: 22372762 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300536
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300536] from pop0:	2071
	-> Sites to keep[DPSCF300536] from pop1:	2071
	-> Sites to keep[DPSCF300536] from pop2:	2071
	-> [readdata] lastread:2071 posi:5759
	-> Comparing positions: 1 with 0 has:22374833
	-> Comparing positions: 2 with 0 has:22374833
	-> Only read nSites: 22374833 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300537
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300537] from pop0:	511
	-> Sites to keep[DPSCF300537] from pop1:	511
	-> Sites to keep[DPSCF300537] from pop2:	511
	-> [readdata] lastread:511 posi:5759
	-> Comparing positions: 1 with 0 has:22375344
	-> Comparing positions: 2 with 0 has:22375344
	-> Only read nSites: 22375344 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300538
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300538] from pop0:	2622
	-> Sites to keep[DPSCF300538] from pop1:	2622
	-> Sites to keep[DPSCF300538] from pop2:	2622
	-> [readdata] lastread:2622 posi:5759
	-> Comparing positions: 1 with 0 has:22377966
	-> Comparing positions: 2 with 0 has:22377966
	-> Only read nSites: 22377966 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300539
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300539] from pop0:	5205
	-> Sites to keep[DPSCF300539] from pop1:	5205
	-> Sites to keep[DPSCF300539] from pop2:	5205
	-> [readdata] lastread:5205 posi:5759
	-> Comparing positions: 1 with 0 has:22383171
	-> Comparing positions: 2 with 0 has:22383171
	-> Only read nSites: 22383171 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300540
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300540] from pop0:	272
	-> Sites to keep[DPSCF300540] from pop1:	272
	-> Sites to keep[DPSCF300540] from pop2:	272
	-> [readdata] lastread:272 posi:5759
	-> Comparing positions: 1 with 0 has:22383443
	-> Comparing positions: 2 with 0 has:22383443
	-> Only read nSites: 22383443 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300541
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300541] from pop0:	4114
	-> Sites to keep[DPSCF300541] from pop1:	4114
	-> Sites to keep[DPSCF300541] from pop2:	4114
	-> [readdata] lastread:4114 posi:5759
	-> Comparing positions: 1 with 0 has:22387557
	-> Comparing positions: 2 with 0 has:22387557
	-> Only read nSites: 22387557 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300542
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300542] from pop0:	1765
	-> Sites to keep[DPSCF300542] from pop1:	1765
	-> Sites to keep[DPSCF300542] from pop2:	1765
	-> [readdata] lastread:1765 posi:5759
	-> Comparing positions: 1 with 0 has:22389322
	-> Comparing positions: 2 with 0 has:22389322
	-> Only read nSites: 22389322 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300543
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300543] from pop0:	3331
	-> Sites to keep[DPSCF300543] from pop1:	3331
	-> Sites to keep[DPSCF300543] from pop2:	3331
	-> [readdata] lastread:3331 posi:5759
	-> Comparing positions: 1 with 0 has:22392653
	-> Comparing positions: 2 with 0 has:22392653
	-> Only read nSites: 22392653 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300544
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300544] from pop0:	2247
	-> Sites to keep[DPSCF300544] from pop1:	2247
	-> Sites to keep[DPSCF300544] from pop2:	2247
	-> [readdata] lastread:2247 posi:5759
	-> Comparing positions: 1 with 0 has:22394900
	-> Comparing positions: 2 with 0 has:22394900
	-> Only read nSites: 22394900 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300545
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300545] from pop0:	4303
	-> Sites to keep[DPSCF300545] from pop1:	4303
	-> Sites to keep[DPSCF300545] from pop2:	4303
	-> [readdata] lastread:4303 posi:5759
	-> Comparing positions: 1 with 0 has:22399203
	-> Comparing positions: 2 with 0 has:22399203
	-> Only read nSites: 22399203 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300546
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300546] from pop0:	2484
	-> Sites to keep[DPSCF300546] from pop1:	2484
	-> Sites to keep[DPSCF300546] from pop2:	2484
	-> [readdata] lastread:2484 posi:5759
	-> Comparing positions: 1 with 0 has:22401687
	-> Comparing positions: 2 with 0 has:22401687
	-> Only read nSites: 22401687 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300547
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300547] from pop0:	874
	-> Sites to keep[DPSCF300547] from pop1:	874
	-> Sites to keep[DPSCF300547] from pop2:	874
	-> [readdata] lastread:874 posi:5759
	-> Comparing positions: 1 with 0 has:22402561
	-> Comparing positions: 2 with 0 has:22402561
	-> Only read nSites: 22402561 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300548
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300548] from pop0:	1711
	-> Sites to keep[DPSCF300548] from pop1:	1711
	-> Sites to keep[DPSCF300548] from pop2:	1711
	-> [readdata] lastread:1711 posi:5759
	-> Comparing positions: 1 with 0 has:22404272
	-> Comparing positions: 2 with 0 has:22404272
	-> Only read nSites: 22404272 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300549
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300549] from pop0:	4862
	-> Sites to keep[DPSCF300549] from pop1:	4862
	-> Sites to keep[DPSCF300549] from pop2:	4862
	-> [readdata] lastread:4862 posi:5759
	-> Comparing positions: 1 with 0 has:22409134
	-> Comparing positions: 2 with 0 has:22409134
	-> Only read nSites: 22409134 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300550
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300550] from pop0:	539
	-> Sites to keep[DPSCF300550] from pop1:	539
	-> Sites to keep[DPSCF300550] from pop2:	539
	-> [readdata] lastread:539 posi:5759
	-> Comparing positions: 1 with 0 has:22409673
	-> Comparing positions: 2 with 0 has:22409673
	-> Only read nSites: 22409673 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300551
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300551] from pop0:	488
	-> Sites to keep[DPSCF300551] from pop1:	488
	-> Sites to keep[DPSCF300551] from pop2:	488
	-> [readdata] lastread:488 posi:5759
	-> Comparing positions: 1 with 0 has:22410161
	-> Comparing positions: 2 with 0 has:22410161
	-> Only read nSites: 22410161 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300552
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300552] from pop0:	2169
	-> Sites to keep[DPSCF300552] from pop1:	2169
	-> Sites to keep[DPSCF300552] from pop2:	2169
	-> [readdata] lastread:2169 posi:5759
	-> Comparing positions: 1 with 0 has:22412330
	-> Comparing positions: 2 with 0 has:22412330
	-> Only read nSites: 22412330 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300553
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300553] from pop0:	549
	-> Sites to keep[DPSCF300553] from pop1:	549
	-> Sites to keep[DPSCF300553] from pop2:	549
	-> [readdata] lastread:549 posi:5759
	-> Comparing positions: 1 with 0 has:22412879
	-> Comparing positions: 2 with 0 has:22412879
	-> Only read nSites: 22412879 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300554
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300554] from pop0:	1699
	-> Sites to keep[DPSCF300554] from pop1:	1699
	-> Sites to keep[DPSCF300554] from pop2:	1699
	-> [readdata] lastread:1699 posi:5759
	-> Comparing positions: 1 with 0 has:22414578
	-> Comparing positions: 2 with 0 has:22414578
	-> Only read nSites: 22414578 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300555
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300555] from pop0:	1101
	-> Sites to keep[DPSCF300555] from pop1:	1101
	-> Sites to keep[DPSCF300555] from pop2:	1101
	-> [readdata] lastread:1101 posi:5759
	-> Comparing positions: 1 with 0 has:22415679
	-> Comparing positions: 2 with 0 has:22415679
	-> Only read nSites: 22415679 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300556
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300556] from pop0:	3044
	-> Sites to keep[DPSCF300556] from pop1:	3044
	-> Sites to keep[DPSCF300556] from pop2:	3044
	-> [readdata] lastread:3044 posi:5759
	-> Comparing positions: 1 with 0 has:22418723
	-> Comparing positions: 2 with 0 has:22418723
	-> Only read nSites: 22418723 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300557
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300557] from pop0:	1757
	-> Sites to keep[DPSCF300557] from pop1:	1757
	-> Sites to keep[DPSCF300557] from pop2:	1757
	-> [readdata] lastread:1757 posi:5759
	-> Comparing positions: 1 with 0 has:22420480
	-> Comparing positions: 2 with 0 has:22420480
	-> Only read nSites: 22420480 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300558
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300558] from pop0:	683
	-> Sites to keep[DPSCF300558] from pop1:	683
	-> Sites to keep[DPSCF300558] from pop2:	683
	-> [readdata] lastread:683 posi:5759
	-> Comparing positions: 1 with 0 has:22421163
	-> Comparing positions: 2 with 0 has:22421163
	-> Only read nSites: 22421163 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300559
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300559] from pop0:	1008
	-> Sites to keep[DPSCF300559] from pop1:	1008
	-> Sites to keep[DPSCF300559] from pop2:	1008
	-> [readdata] lastread:1008 posi:5759
	-> Comparing positions: 1 with 0 has:22422171
	-> Comparing positions: 2 with 0 has:22422171
	-> Only read nSites: 22422171 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300560
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300560] from pop0:	748
	-> Sites to keep[DPSCF300560] from pop1:	748
	-> Sites to keep[DPSCF300560] from pop2:	748
	-> [readdata] lastread:748 posi:5759
	-> Comparing positions: 1 with 0 has:22422919
	-> Comparing positions: 2 with 0 has:22422919
	-> Only read nSites: 22422919 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300561
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300561] from pop0:	976
	-> Sites to keep[DPSCF300561] from pop1:	976
	-> Sites to keep[DPSCF300561] from pop2:	976
	-> [readdata] lastread:976 posi:5759
	-> Comparing positions: 1 with 0 has:22423895
	-> Comparing positions: 2 with 0 has:22423895
	-> Only read nSites: 22423895 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300562
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300562] from pop0:	2561
	-> Sites to keep[DPSCF300562] from pop1:	2561
	-> Sites to keep[DPSCF300562] from pop2:	2561
	-> [readdata] lastread:2561 posi:5759
	-> Comparing positions: 1 with 0 has:22426456
	-> Comparing positions: 2 with 0 has:22426456
	-> Only read nSites: 22426456 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300563
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300563] from pop0:	927
	-> Sites to keep[DPSCF300563] from pop1:	927
	-> Sites to keep[DPSCF300563] from pop2:	927
	-> [readdata] lastread:927 posi:5759
	-> Comparing positions: 1 with 0 has:22427383
	-> Comparing positions: 2 with 0 has:22427383
	-> Only read nSites: 22427383 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300564
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300564] from pop0:	2147
	-> Sites to keep[DPSCF300564] from pop1:	2147
	-> Sites to keep[DPSCF300564] from pop2:	2147
	-> [readdata] lastread:2147 posi:5759
	-> Comparing positions: 1 with 0 has:22429530
	-> Comparing positions: 2 with 0 has:22429530
	-> Only read nSites: 22429530 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300565
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300565] from pop0:	1855
	-> Sites to keep[DPSCF300565] from pop1:	1855
	-> Sites to keep[DPSCF300565] from pop2:	1855
	-> [readdata] lastread:1855 posi:5759
	-> Comparing positions: 1 with 0 has:22431385
	-> Comparing positions: 2 with 0 has:22431385
	-> Only read nSites: 22431385 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300566
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300566] from pop0:	584
	-> Sites to keep[DPSCF300566] from pop1:	584
	-> Sites to keep[DPSCF300566] from pop2:	584
	-> [readdata] lastread:584 posi:5759
	-> Comparing positions: 1 with 0 has:22431969
	-> Comparing positions: 2 with 0 has:22431969
	-> Only read nSites: 22431969 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300567
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300567] from pop0:	1393
	-> Sites to keep[DPSCF300567] from pop1:	1393
	-> Sites to keep[DPSCF300567] from pop2:	1393
	-> [readdata] lastread:1393 posi:5759
	-> Comparing positions: 1 with 0 has:22433362
	-> Comparing positions: 2 with 0 has:22433362
	-> Only read nSites: 22433362 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300568
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300568' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300569
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300569] from pop0:	4374
	-> Sites to keep[DPSCF300569] from pop1:	4374
	-> Sites to keep[DPSCF300569] from pop2:	4374
	-> [readdata] lastread:4374 posi:5759
	-> Comparing positions: 1 with 0 has:22437736
	-> Comparing positions: 2 with 0 has:22437736
	-> Only read nSites: 22437736 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300570
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300570] from pop0:	1358
	-> Sites to keep[DPSCF300570] from pop1:	1358
	-> Sites to keep[DPSCF300570] from pop2:	1358
	-> [readdata] lastread:1358 posi:5759
	-> Comparing positions: 1 with 0 has:22439094
	-> Comparing positions: 2 with 0 has:22439094
	-> Only read nSites: 22439094 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300571
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300571] from pop0:	263
	-> Sites to keep[DPSCF300571] from pop1:	263
	-> Sites to keep[DPSCF300571] from pop2:	263
	-> [readdata] lastread:263 posi:5759
	-> Comparing positions: 1 with 0 has:22439357
	-> Comparing positions: 2 with 0 has:22439357
	-> Only read nSites: 22439357 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300572
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300572] from pop0:	0
	-> Sites to keep[DPSCF300572] from pop1:	0
	-> Sites to keep[DPSCF300572] from pop2:	0
	-> Only read nSites: 22439357 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300573
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300573] from pop0:	2387
	-> Sites to keep[DPSCF300573] from pop1:	2387
	-> Sites to keep[DPSCF300573] from pop2:	2387
	-> [readdata] lastread:2387 posi:5759
	-> Comparing positions: 1 with 0 has:22441744
	-> Comparing positions: 2 with 0 has:22441744
	-> Only read nSites: 22441744 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300574
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300574] from pop0:	1838
	-> Sites to keep[DPSCF300574] from pop1:	1838
	-> Sites to keep[DPSCF300574] from pop2:	1838
	-> [readdata] lastread:1838 posi:5759
	-> Comparing positions: 1 with 0 has:22443582
	-> Comparing positions: 2 with 0 has:22443582
	-> Only read nSites: 22443582 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300575
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300575] from pop0:	939
	-> Sites to keep[DPSCF300575] from pop1:	939
	-> Sites to keep[DPSCF300575] from pop2:	939
	-> [readdata] lastread:939 posi:5759
	-> Comparing positions: 1 with 0 has:22444521
	-> Comparing positions: 2 with 0 has:22444521
	-> Only read nSites: 22444521 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300576
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300576] from pop0:	748
	-> Sites to keep[DPSCF300576] from pop1:	748
	-> Sites to keep[DPSCF300576] from pop2:	748
	-> [readdata] lastread:748 posi:5759
	-> Comparing positions: 1 with 0 has:22445269
	-> Comparing positions: 2 with 0 has:22445269
	-> Only read nSites: 22445269 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300577
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300577] from pop0:	1213
	-> Sites to keep[DPSCF300577] from pop1:	1213
	-> Sites to keep[DPSCF300577] from pop2:	1213
	-> [readdata] lastread:1213 posi:5759
	-> Comparing positions: 1 with 0 has:22446482
	-> Comparing positions: 2 with 0 has:22446482
	-> Only read nSites: 22446482 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300578
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300578] from pop0:	1571
	-> Sites to keep[DPSCF300578] from pop1:	1571
	-> Sites to keep[DPSCF300578] from pop2:	1571
	-> [readdata] lastread:1571 posi:5759
	-> Comparing positions: 1 with 0 has:22448053
	-> Comparing positions: 2 with 0 has:22448053
	-> Only read nSites: 22448053 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300579
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300579] from pop0:	1743
	-> Sites to keep[DPSCF300579] from pop1:	1743
	-> Sites to keep[DPSCF300579] from pop2:	1743
	-> [readdata] lastread:1743 posi:5759
	-> Comparing positions: 1 with 0 has:22449796
	-> Comparing positions: 2 with 0 has:22449796
	-> Only read nSites: 22449796 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300580
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300580] from pop0:	736
	-> Sites to keep[DPSCF300580] from pop1:	736
	-> Sites to keep[DPSCF300580] from pop2:	736
	-> [readdata] lastread:736 posi:5759
	-> Comparing positions: 1 with 0 has:22450532
	-> Comparing positions: 2 with 0 has:22450532
	-> Only read nSites: 22450532 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300581
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300581] from pop0:	2162
	-> Sites to keep[DPSCF300581] from pop1:	2162
	-> Sites to keep[DPSCF300581] from pop2:	2162
	-> [readdata] lastread:2162 posi:5759
	-> Comparing positions: 1 with 0 has:22452694
	-> Comparing positions: 2 with 0 has:22452694
	-> Only read nSites: 22452694 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300582
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300582] from pop0:	1697
	-> Sites to keep[DPSCF300582] from pop1:	1697
	-> Sites to keep[DPSCF300582] from pop2:	1697
	-> [readdata] lastread:1697 posi:5759
	-> Comparing positions: 1 with 0 has:22454391
	-> Comparing positions: 2 with 0 has:22454391
	-> Only read nSites: 22454391 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300583
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300583] from pop0:	713
	-> Sites to keep[DPSCF300583] from pop1:	713
	-> Sites to keep[DPSCF300583] from pop2:	713
	-> [readdata] lastread:713 posi:5759
	-> Comparing positions: 1 with 0 has:22455104
	-> Comparing positions: 2 with 0 has:22455104
	-> Only read nSites: 22455104 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300584
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300584] from pop0:	753
	-> Sites to keep[DPSCF300584] from pop1:	753
	-> Sites to keep[DPSCF300584] from pop2:	753
	-> [readdata] lastread:753 posi:5759
	-> Comparing positions: 1 with 0 has:22455857
	-> Comparing positions: 2 with 0 has:22455857
	-> Only read nSites: 22455857 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300585
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300585] from pop0:	528
	-> Sites to keep[DPSCF300585] from pop1:	528
	-> Sites to keep[DPSCF300585] from pop2:	528
	-> [readdata] lastread:528 posi:5759
	-> Comparing positions: 1 with 0 has:22456385
	-> Comparing positions: 2 with 0 has:22456385
	-> Only read nSites: 22456385 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300586
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300586] from pop0:	1515
	-> Sites to keep[DPSCF300586] from pop1:	1515
	-> Sites to keep[DPSCF300586] from pop2:	1515
	-> [readdata] lastread:1515 posi:5759
	-> Comparing positions: 1 with 0 has:22457900
	-> Comparing positions: 2 with 0 has:22457900
	-> Only read nSites: 22457900 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300587
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300587] from pop0:	859
	-> Sites to keep[DPSCF300587] from pop1:	859
	-> Sites to keep[DPSCF300587] from pop2:	859
	-> [readdata] lastread:859 posi:5759
	-> Comparing positions: 1 with 0 has:22458759
	-> Comparing positions: 2 with 0 has:22458759
	-> Only read nSites: 22458759 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300588
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300588] from pop0:	1228
	-> Sites to keep[DPSCF300588] from pop1:	1228
	-> Sites to keep[DPSCF300588] from pop2:	1228
	-> [readdata] lastread:1228 posi:5759
	-> Comparing positions: 1 with 0 has:22459987
	-> Comparing positions: 2 with 0 has:22459987
	-> Only read nSites: 22459987 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300589
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300589] from pop0:	197
	-> Sites to keep[DPSCF300589] from pop1:	197
	-> Sites to keep[DPSCF300589] from pop2:	197
	-> [readdata] lastread:197 posi:5759
	-> Comparing positions: 1 with 0 has:22460184
	-> Comparing positions: 2 with 0 has:22460184
	-> Only read nSites: 22460184 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300590
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300590] from pop0:	1570
	-> Sites to keep[DPSCF300590] from pop1:	1570
	-> Sites to keep[DPSCF300590] from pop2:	1570
	-> [readdata] lastread:1570 posi:5759
	-> Comparing positions: 1 with 0 has:22461754
	-> Comparing positions: 2 with 0 has:22461754
	-> Only read nSites: 22461754 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300591
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300591] from pop0:	3652
	-> Sites to keep[DPSCF300591] from pop1:	3652
	-> Sites to keep[DPSCF300591] from pop2:	3652
	-> [readdata] lastread:3652 posi:5759
	-> Comparing positions: 1 with 0 has:22465406
	-> Comparing positions: 2 with 0 has:22465406
	-> Only read nSites: 22465406 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300592
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300592] from pop0:	799
	-> Sites to keep[DPSCF300592] from pop1:	799
	-> Sites to keep[DPSCF300592] from pop2:	799
	-> [readdata] lastread:799 posi:5759
	-> Comparing positions: 1 with 0 has:22466205
	-> Comparing positions: 2 with 0 has:22466205
	-> Only read nSites: 22466205 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300593
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300593] from pop0:	2004
	-> Sites to keep[DPSCF300593] from pop1:	2004
	-> Sites to keep[DPSCF300593] from pop2:	2004
	-> [readdata] lastread:2004 posi:5759
	-> Comparing positions: 1 with 0 has:22468209
	-> Comparing positions: 2 with 0 has:22468209
	-> Only read nSites: 22468209 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300594
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300594] from pop0:	915
	-> Sites to keep[DPSCF300594] from pop1:	915
	-> Sites to keep[DPSCF300594] from pop2:	915
	-> [readdata] lastread:915 posi:5759
	-> Comparing positions: 1 with 0 has:22469124
	-> Comparing positions: 2 with 0 has:22469124
	-> Only read nSites: 22469124 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300595
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300595] from pop0:	2310
	-> Sites to keep[DPSCF300595] from pop1:	2310
	-> Sites to keep[DPSCF300595] from pop2:	2310
	-> [readdata] lastread:2310 posi:5759
	-> Comparing positions: 1 with 0 has:22471434
	-> Comparing positions: 2 with 0 has:22471434
	-> Only read nSites: 22471434 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300596
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300596' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300597
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300597] from pop0:	2670
	-> Sites to keep[DPSCF300597] from pop1:	2670
	-> Sites to keep[DPSCF300597] from pop2:	2670
	-> [readdata] lastread:2670 posi:5759
	-> Comparing positions: 1 with 0 has:22474104
	-> Comparing positions: 2 with 0 has:22474104
	-> Only read nSites: 22474104 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300598
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300598] from pop0:	0
	-> Sites to keep[DPSCF300598] from pop1:	0
	-> Sites to keep[DPSCF300598] from pop2:	0
	-> Only read nSites: 22474104 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300599
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300599] from pop0:	647
	-> Sites to keep[DPSCF300599] from pop1:	647
	-> Sites to keep[DPSCF300599] from pop2:	647
	-> [readdata] lastread:647 posi:5759
	-> Comparing positions: 1 with 0 has:22474751
	-> Comparing positions: 2 with 0 has:22474751
	-> Only read nSites: 22474751 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300600
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300600] from pop0:	1272
	-> Sites to keep[DPSCF300600] from pop1:	1272
	-> Sites to keep[DPSCF300600] from pop2:	1272
	-> [readdata] lastread:1272 posi:5759
	-> Comparing positions: 1 with 0 has:22476023
	-> Comparing positions: 2 with 0 has:22476023
	-> Only read nSites: 22476023 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300601
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300601] from pop0:	225
	-> Sites to keep[DPSCF300601] from pop1:	225
	-> Sites to keep[DPSCF300601] from pop2:	225
	-> [readdata] lastread:225 posi:5759
	-> Comparing positions: 1 with 0 has:22476248
	-> Comparing positions: 2 with 0 has:22476248
	-> Only read nSites: 22476248 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300602
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300602] from pop0:	0
	-> Sites to keep[DPSCF300602] from pop1:	0
	-> Sites to keep[DPSCF300602] from pop2:	0
	-> Only read nSites: 22476248 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300603
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300603] from pop0:	781
	-> Sites to keep[DPSCF300603] from pop1:	781
	-> Sites to keep[DPSCF300603] from pop2:	781
	-> [readdata] lastread:781 posi:5759
	-> Comparing positions: 1 with 0 has:22477029
	-> Comparing positions: 2 with 0 has:22477029
	-> Only read nSites: 22477029 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300604
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300604] from pop0:	422
	-> Sites to keep[DPSCF300604] from pop1:	422
	-> Sites to keep[DPSCF300604] from pop2:	422
	-> [readdata] lastread:422 posi:5759
	-> Comparing positions: 1 with 0 has:22477451
	-> Comparing positions: 2 with 0 has:22477451
	-> Only read nSites: 22477451 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300605
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300605] from pop0:	2298
	-> Sites to keep[DPSCF300605] from pop1:	2298
	-> Sites to keep[DPSCF300605] from pop2:	2298
	-> [readdata] lastread:2298 posi:5759
	-> Comparing positions: 1 with 0 has:22479749
	-> Comparing positions: 2 with 0 has:22479749
	-> Only read nSites: 22479749 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300606
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300606] from pop0:	149
	-> Sites to keep[DPSCF300606] from pop1:	149
	-> Sites to keep[DPSCF300606] from pop2:	149
	-> [readdata] lastread:149 posi:5759
	-> Comparing positions: 1 with 0 has:22479898
	-> Comparing positions: 2 with 0 has:22479898
	-> Only read nSites: 22479898 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300607
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300607] from pop0:	897
	-> Sites to keep[DPSCF300607] from pop1:	897
	-> Sites to keep[DPSCF300607] from pop2:	897
	-> [readdata] lastread:897 posi:5759
	-> Comparing positions: 1 with 0 has:22480795
	-> Comparing positions: 2 with 0 has:22480795
	-> Only read nSites: 22480795 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300608
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300608] from pop0:	221
	-> Sites to keep[DPSCF300608] from pop1:	221
	-> Sites to keep[DPSCF300608] from pop2:	221
	-> [readdata] lastread:221 posi:5759
	-> Comparing positions: 1 with 0 has:22481016
	-> Comparing positions: 2 with 0 has:22481016
	-> Only read nSites: 22481016 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300609
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300609] from pop0:	1057
	-> Sites to keep[DPSCF300609] from pop1:	1057
	-> Sites to keep[DPSCF300609] from pop2:	1057
	-> [readdata] lastread:1057 posi:5759
	-> Comparing positions: 1 with 0 has:22482073
	-> Comparing positions: 2 with 0 has:22482073
	-> Only read nSites: 22482073 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300610
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300610] from pop0:	456
	-> Sites to keep[DPSCF300610] from pop1:	456
	-> Sites to keep[DPSCF300610] from pop2:	456
	-> [readdata] lastread:456 posi:5759
	-> Comparing positions: 1 with 0 has:22482529
	-> Comparing positions: 2 with 0 has:22482529
	-> Only read nSites: 22482529 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300611
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300611] from pop0:	99
	-> Sites to keep[DPSCF300611] from pop1:	99
	-> Sites to keep[DPSCF300611] from pop2:	99
	-> [readdata] lastread:99 posi:5759
	-> Comparing positions: 1 with 0 has:22482628
	-> Comparing positions: 2 with 0 has:22482628
	-> Only read nSites: 22482628 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300612
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300612] from pop0:	377
	-> Sites to keep[DPSCF300612] from pop1:	377
	-> Sites to keep[DPSCF300612] from pop2:	377
	-> [readdata] lastread:377 posi:5759
	-> Comparing positions: 1 with 0 has:22483005
	-> Comparing positions: 2 with 0 has:22483005
	-> Only read nSites: 22483005 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300613
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300613] from pop0:	1301
	-> Sites to keep[DPSCF300613] from pop1:	1301
	-> Sites to keep[DPSCF300613] from pop2:	1301
	-> [readdata] lastread:1301 posi:5759
	-> Comparing positions: 1 with 0 has:22484306
	-> Comparing positions: 2 with 0 has:22484306
	-> Only read nSites: 22484306 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300614
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300614] from pop0:	696
	-> Sites to keep[DPSCF300614] from pop1:	696
	-> Sites to keep[DPSCF300614] from pop2:	696
	-> [readdata] lastread:696 posi:5759
	-> Comparing positions: 1 with 0 has:22485002
	-> Comparing positions: 2 with 0 has:22485002
	-> Only read nSites: 22485002 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300615
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300615] from pop0:	1722
	-> Sites to keep[DPSCF300615] from pop1:	1722
	-> Sites to keep[DPSCF300615] from pop2:	1722
	-> [readdata] lastread:1722 posi:5759
	-> Comparing positions: 1 with 0 has:22486724
	-> Comparing positions: 2 with 0 has:22486724
	-> Only read nSites: 22486724 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300616
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300616] from pop0:	914
	-> Sites to keep[DPSCF300616] from pop1:	914
	-> Sites to keep[DPSCF300616] from pop2:	914
	-> [readdata] lastread:914 posi:5759
	-> Comparing positions: 1 with 0 has:22487638
	-> Comparing positions: 2 with 0 has:22487638
	-> Only read nSites: 22487638 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300617
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300617] from pop0:	357
	-> Sites to keep[DPSCF300617] from pop1:	357
	-> Sites to keep[DPSCF300617] from pop2:	357
	-> [readdata] lastread:357 posi:5759
	-> Comparing positions: 1 with 0 has:22487995
	-> Comparing positions: 2 with 0 has:22487995
	-> Only read nSites: 22487995 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300618
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300618] from pop0:	2798
	-> Sites to keep[DPSCF300618] from pop1:	2798
	-> Sites to keep[DPSCF300618] from pop2:	2798
	-> [readdata] lastread:2798 posi:5759
	-> Comparing positions: 1 with 0 has:22490793
	-> Comparing positions: 2 with 0 has:22490793
	-> Only read nSites: 22490793 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300619
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300619] from pop0:	337
	-> Sites to keep[DPSCF300619] from pop1:	337
	-> Sites to keep[DPSCF300619] from pop2:	337
	-> [readdata] lastread:337 posi:5759
	-> Comparing positions: 1 with 0 has:22491130
	-> Comparing positions: 2 with 0 has:22491130
	-> Only read nSites: 22491130 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300620
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300620] from pop0:	674
	-> Sites to keep[DPSCF300620] from pop1:	674
	-> Sites to keep[DPSCF300620] from pop2:	674
	-> [readdata] lastread:674 posi:5759
	-> Comparing positions: 1 with 0 has:22491804
	-> Comparing positions: 2 with 0 has:22491804
	-> Only read nSites: 22491804 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300621
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300621] from pop0:	249
	-> Sites to keep[DPSCF300621] from pop1:	249
	-> Sites to keep[DPSCF300621] from pop2:	249
	-> [readdata] lastread:249 posi:5759
	-> Comparing positions: 1 with 0 has:22492053
	-> Comparing positions: 2 with 0 has:22492053
	-> Only read nSites: 22492053 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300622
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300622' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300623
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300623] from pop0:	154
	-> Sites to keep[DPSCF300623] from pop1:	154
	-> Sites to keep[DPSCF300623] from pop2:	154
	-> [readdata] lastread:154 posi:5759
	-> Comparing positions: 1 with 0 has:22492207
	-> Comparing positions: 2 with 0 has:22492207
	-> Only read nSites: 22492207 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300624
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300624] from pop0:	0
	-> Sites to keep[DPSCF300624] from pop1:	0
	-> Sites to keep[DPSCF300624] from pop2:	0
	-> Only read nSites: 22492207 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300625
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300625] from pop0:	1002
	-> Sites to keep[DPSCF300625] from pop1:	1002
	-> Sites to keep[DPSCF300625] from pop2:	1002
	-> [readdata] lastread:1002 posi:5759
	-> Comparing positions: 1 with 0 has:22493209
	-> Comparing positions: 2 with 0 has:22493209
	-> Only read nSites: 22493209 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300626
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300626] from pop0:	1274
	-> Sites to keep[DPSCF300626] from pop1:	1274
	-> Sites to keep[DPSCF300626] from pop2:	1274
	-> [readdata] lastread:1274 posi:5759
	-> Comparing positions: 1 with 0 has:22494483
	-> Comparing positions: 2 with 0 has:22494483
	-> Only read nSites: 22494483 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300627
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300627' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300628
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300628] from pop0:	1463
	-> Sites to keep[DPSCF300628] from pop1:	1463
	-> Sites to keep[DPSCF300628] from pop2:	1463
	-> [readdata] lastread:1463 posi:5759
	-> Comparing positions: 1 with 0 has:22495946
	-> Comparing positions: 2 with 0 has:22495946
	-> Only read nSites: 22495946 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300629
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300629] from pop0:	592
	-> Sites to keep[DPSCF300629] from pop1:	592
	-> Sites to keep[DPSCF300629] from pop2:	592
	-> [readdata] lastread:592 posi:5759
	-> Comparing positions: 1 with 0 has:22496538
	-> Comparing positions: 2 with 0 has:22496538
	-> Only read nSites: 22496538 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300630
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300630] from pop0:	752
	-> Sites to keep[DPSCF300630] from pop1:	752
	-> Sites to keep[DPSCF300630] from pop2:	752
	-> [readdata] lastread:752 posi:5759
	-> Comparing positions: 1 with 0 has:22497290
	-> Comparing positions: 2 with 0 has:22497290
	-> Only read nSites: 22497290 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300631
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300631' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300632
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300632] from pop0:	1939
	-> Sites to keep[DPSCF300632] from pop1:	1939
	-> Sites to keep[DPSCF300632] from pop2:	1939
	-> [readdata] lastread:1939 posi:5759
	-> Comparing positions: 1 with 0 has:22499229
	-> Comparing positions: 2 with 0 has:22499229
	-> Only read nSites: 22499229 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300633
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300633] from pop0:	209
	-> Sites to keep[DPSCF300633] from pop1:	209
	-> Sites to keep[DPSCF300633] from pop2:	209
	-> [readdata] lastread:209 posi:5759
	-> Comparing positions: 1 with 0 has:22499438
	-> Comparing positions: 2 with 0 has:22499438
	-> Only read nSites: 22499438 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300634
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300634] from pop0:	155
	-> Sites to keep[DPSCF300634] from pop1:	155
	-> Sites to keep[DPSCF300634] from pop2:	155
	-> [readdata] lastread:155 posi:5759
	-> Comparing positions: 1 with 0 has:22499593
	-> Comparing positions: 2 with 0 has:22499593
	-> Only read nSites: 22499593 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300635
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300635] from pop0:	675
	-> Sites to keep[DPSCF300635] from pop1:	675
	-> Sites to keep[DPSCF300635] from pop2:	675
	-> [readdata] lastread:675 posi:5759
	-> Comparing positions: 1 with 0 has:22500268
	-> Comparing positions: 2 with 0 has:22500268
	-> Only read nSites: 22500268 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300636
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300636] from pop0:	906
	-> Sites to keep[DPSCF300636] from pop1:	906
	-> Sites to keep[DPSCF300636] from pop2:	906
	-> [readdata] lastread:906 posi:5759
	-> Comparing positions: 1 with 0 has:22501174
	-> Comparing positions: 2 with 0 has:22501174
	-> Only read nSites: 22501174 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300637
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300637] from pop0:	0
	-> Sites to keep[DPSCF300637] from pop1:	0
	-> Sites to keep[DPSCF300637] from pop2:	0
	-> Only read nSites: 22501174 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300638
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300638] from pop0:	368
	-> Sites to keep[DPSCF300638] from pop1:	368
	-> Sites to keep[DPSCF300638] from pop2:	368
	-> [readdata] lastread:368 posi:5759
	-> Comparing positions: 1 with 0 has:22501542
	-> Comparing positions: 2 with 0 has:22501542
	-> Only read nSites: 22501542 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300639
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300639] from pop0:	706
	-> Sites to keep[DPSCF300639] from pop1:	706
	-> Sites to keep[DPSCF300639] from pop2:	706
	-> [readdata] lastread:706 posi:5759
	-> Comparing positions: 1 with 0 has:22502248
	-> Comparing positions: 2 with 0 has:22502248
	-> Only read nSites: 22502248 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300640
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300640] from pop0:	914
	-> Sites to keep[DPSCF300640] from pop1:	914
	-> Sites to keep[DPSCF300640] from pop2:	914
	-> [readdata] lastread:914 posi:5759
	-> Comparing positions: 1 with 0 has:22503162
	-> Comparing positions: 2 with 0 has:22503162
	-> Only read nSites: 22503162 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300642
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300642] from pop0:	366
	-> Sites to keep[DPSCF300642] from pop1:	366
	-> Sites to keep[DPSCF300642] from pop2:	366
	-> [readdata] lastread:366 posi:5759
	-> Comparing positions: 1 with 0 has:22503528
	-> Comparing positions: 2 with 0 has:22503528
	-> Only read nSites: 22503528 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300643
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300643] from pop0:	166
	-> Sites to keep[DPSCF300643] from pop1:	166
	-> Sites to keep[DPSCF300643] from pop2:	166
	-> [readdata] lastread:166 posi:5759
	-> Comparing positions: 1 with 0 has:22503694
	-> Comparing positions: 2 with 0 has:22503694
	-> Only read nSites: 22503694 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300644
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300644] from pop0:	0
	-> Sites to keep[DPSCF300644] from pop1:	0
	-> Sites to keep[DPSCF300644] from pop2:	0
	-> Only read nSites: 22503694 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300645
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300645] from pop0:	1222
	-> Sites to keep[DPSCF300645] from pop1:	1222
	-> Sites to keep[DPSCF300645] from pop2:	1222
	-> [readdata] lastread:1222 posi:5759
	-> Comparing positions: 1 with 0 has:22504916
	-> Comparing positions: 2 with 0 has:22504916
	-> Only read nSites: 22504916 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300646
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300646] from pop0:	572
	-> Sites to keep[DPSCF300646] from pop1:	572
	-> Sites to keep[DPSCF300646] from pop2:	572
	-> [readdata] lastread:572 posi:5759
	-> Comparing positions: 1 with 0 has:22505488
	-> Comparing positions: 2 with 0 has:22505488
	-> Only read nSites: 22505488 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300647
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300647] from pop0:	360
	-> Sites to keep[DPSCF300647] from pop1:	360
	-> Sites to keep[DPSCF300647] from pop2:	360
	-> [readdata] lastread:360 posi:5759
	-> Comparing positions: 1 with 0 has:22505848
	-> Comparing positions: 2 with 0 has:22505848
	-> Only read nSites: 22505848 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300648
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300648] from pop0:	151
	-> Sites to keep[DPSCF300648] from pop1:	151
	-> Sites to keep[DPSCF300648] from pop2:	151
	-> [readdata] lastread:151 posi:5759
	-> Comparing positions: 1 with 0 has:22505999
	-> Comparing positions: 2 with 0 has:22505999
	-> Only read nSites: 22505999 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300649
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300649] from pop0:	210
	-> Sites to keep[DPSCF300649] from pop1:	210
	-> Sites to keep[DPSCF300649] from pop2:	210
	-> [readdata] lastread:210 posi:5759
	-> Comparing positions: 1 with 0 has:22506209
	-> Comparing positions: 2 with 0 has:22506209
	-> Only read nSites: 22506209 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300650
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300650] from pop0:	583
	-> Sites to keep[DPSCF300650] from pop1:	583
	-> Sites to keep[DPSCF300650] from pop2:	583
	-> [readdata] lastread:583 posi:5759
	-> Comparing positions: 1 with 0 has:22506792
	-> Comparing positions: 2 with 0 has:22506792
	-> Only read nSites: 22506792 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300651
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300651' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300652
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300652] from pop0:	485
	-> Sites to keep[DPSCF300652] from pop1:	485
	-> Sites to keep[DPSCF300652] from pop2:	485
	-> [readdata] lastread:485 posi:5759
	-> Comparing positions: 1 with 0 has:22507277
	-> Comparing positions: 2 with 0 has:22507277
	-> Only read nSites: 22507277 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300653
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300653] from pop0:	811
	-> Sites to keep[DPSCF300653] from pop1:	811
	-> Sites to keep[DPSCF300653] from pop2:	811
	-> [readdata] lastread:811 posi:5759
	-> Comparing positions: 1 with 0 has:22508088
	-> Comparing positions: 2 with 0 has:22508088
	-> Only read nSites: 22508088 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300654
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300654] from pop0:	255
	-> Sites to keep[DPSCF300654] from pop1:	255
	-> Sites to keep[DPSCF300654] from pop2:	255
	-> [readdata] lastread:255 posi:5759
	-> Comparing positions: 1 with 0 has:22508343
	-> Comparing positions: 2 with 0 has:22508343
	-> Only read nSites: 22508343 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300655
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300655] from pop0:	938
	-> Sites to keep[DPSCF300655] from pop1:	938
	-> Sites to keep[DPSCF300655] from pop2:	938
	-> [readdata] lastread:938 posi:5759
	-> Comparing positions: 1 with 0 has:22509281
	-> Comparing positions: 2 with 0 has:22509281
	-> Only read nSites: 22509281 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300656
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300656] from pop0:	0
	-> Sites to keep[DPSCF300656] from pop1:	0
	-> Sites to keep[DPSCF300656] from pop2:	0
	-> Only read nSites: 22509281 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300657
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300657] from pop0:	484
	-> Sites to keep[DPSCF300657] from pop1:	484
	-> Sites to keep[DPSCF300657] from pop2:	484
	-> [readdata] lastread:484 posi:5759
	-> Comparing positions: 1 with 0 has:22509765
	-> Comparing positions: 2 with 0 has:22509765
	-> Only read nSites: 22509765 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300658
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300658] from pop0:	373
	-> Sites to keep[DPSCF300658] from pop1:	373
	-> Sites to keep[DPSCF300658] from pop2:	373
	-> [readdata] lastread:373 posi:5759
	-> Comparing positions: 1 with 0 has:22510138
	-> Comparing positions: 2 with 0 has:22510138
	-> Only read nSites: 22510138 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300659
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300659] from pop0:	628
	-> Sites to keep[DPSCF300659] from pop1:	628
	-> Sites to keep[DPSCF300659] from pop2:	628
	-> [readdata] lastread:628 posi:5759
	-> Comparing positions: 1 with 0 has:22510766
	-> Comparing positions: 2 with 0 has:22510766
	-> Only read nSites: 22510766 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300660
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300660] from pop0:	255
	-> Sites to keep[DPSCF300660] from pop1:	255
	-> Sites to keep[DPSCF300660] from pop2:	255
	-> [readdata] lastread:255 posi:5759
	-> Comparing positions: 1 with 0 has:22511021
	-> Comparing positions: 2 with 0 has:22511021
	-> Only read nSites: 22511021 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300661
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300661] from pop0:	252
	-> Sites to keep[DPSCF300661] from pop1:	252
	-> Sites to keep[DPSCF300661] from pop2:	252
	-> [readdata] lastread:252 posi:5759
	-> Comparing positions: 1 with 0 has:22511273
	-> Comparing positions: 2 with 0 has:22511273
	-> Only read nSites: 22511273 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300662
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300662] from pop0:	534
	-> Sites to keep[DPSCF300662] from pop1:	534
	-> Sites to keep[DPSCF300662] from pop2:	534
	-> [readdata] lastread:534 posi:5759
	-> Comparing positions: 1 with 0 has:22511807
	-> Comparing positions: 2 with 0 has:22511807
	-> Only read nSites: 22511807 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300663
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300663] from pop0:	518
	-> Sites to keep[DPSCF300663] from pop1:	518
	-> Sites to keep[DPSCF300663] from pop2:	518
	-> [readdata] lastread:518 posi:5759
	-> Comparing positions: 1 with 0 has:22512325
	-> Comparing positions: 2 with 0 has:22512325
	-> Only read nSites: 22512325 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300664
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300664] from pop0:	1493
	-> Sites to keep[DPSCF300664] from pop1:	1493
	-> Sites to keep[DPSCF300664] from pop2:	1493
	-> [readdata] lastread:1493 posi:5759
	-> Comparing positions: 1 with 0 has:22513818
	-> Comparing positions: 2 with 0 has:22513818
	-> Only read nSites: 22513818 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300665
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300665] from pop0:	1835
	-> Sites to keep[DPSCF300665] from pop1:	1835
	-> Sites to keep[DPSCF300665] from pop2:	1835
	-> [readdata] lastread:1835 posi:5759
	-> Comparing positions: 1 with 0 has:22515653
	-> Comparing positions: 2 with 0 has:22515653
	-> Only read nSites: 22515653 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300666
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300666] from pop0:	389
	-> Sites to keep[DPSCF300666] from pop1:	389
	-> Sites to keep[DPSCF300666] from pop2:	389
	-> [readdata] lastread:389 posi:5759
	-> Comparing positions: 1 with 0 has:22516042
	-> Comparing positions: 2 with 0 has:22516042
	-> Only read nSites: 22516042 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300667
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300667] from pop0:	537
	-> Sites to keep[DPSCF300667] from pop1:	537
	-> Sites to keep[DPSCF300667] from pop2:	537
	-> [readdata] lastread:537 posi:5759
	-> Comparing positions: 1 with 0 has:22516579
	-> Comparing positions: 2 with 0 has:22516579
	-> Only read nSites: 22516579 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300668
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300668] from pop0:	941
	-> Sites to keep[DPSCF300668] from pop1:	941
	-> Sites to keep[DPSCF300668] from pop2:	941
	-> [readdata] lastread:941 posi:5759
	-> Comparing positions: 1 with 0 has:22517520
	-> Comparing positions: 2 with 0 has:22517520
	-> Only read nSites: 22517520 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300669
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300669] from pop0:	156
	-> Sites to keep[DPSCF300669] from pop1:	156
	-> Sites to keep[DPSCF300669] from pop2:	156
	-> [readdata] lastread:156 posi:5759
	-> Comparing positions: 1 with 0 has:22517676
	-> Comparing positions: 2 with 0 has:22517676
	-> Only read nSites: 22517676 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300670
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300670] from pop0:	1228
	-> Sites to keep[DPSCF300670] from pop1:	1228
	-> Sites to keep[DPSCF300670] from pop2:	1228
	-> [readdata] lastread:1228 posi:5759
	-> Comparing positions: 1 with 0 has:22518904
	-> Comparing positions: 2 with 0 has:22518904
	-> Only read nSites: 22518904 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300671
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300671] from pop0:	466
	-> Sites to keep[DPSCF300671] from pop1:	466
	-> Sites to keep[DPSCF300671] from pop2:	466
	-> [readdata] lastread:466 posi:5759
	-> Comparing positions: 1 with 0 has:22519370
	-> Comparing positions: 2 with 0 has:22519370
	-> Only read nSites: 22519370 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300672
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300672] from pop0:	471
	-> Sites to keep[DPSCF300672] from pop1:	471
	-> Sites to keep[DPSCF300672] from pop2:	471
	-> [readdata] lastread:471 posi:5759
	-> Comparing positions: 1 with 0 has:22519841
	-> Comparing positions: 2 with 0 has:22519841
	-> Only read nSites: 22519841 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300673
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300673] from pop0:	856
	-> Sites to keep[DPSCF300673] from pop1:	856
	-> Sites to keep[DPSCF300673] from pop2:	856
	-> [readdata] lastread:856 posi:5759
	-> Comparing positions: 1 with 0 has:22520697
	-> Comparing positions: 2 with 0 has:22520697
	-> Only read nSites: 22520697 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300674
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300674] from pop0:	777
	-> Sites to keep[DPSCF300674] from pop1:	777
	-> Sites to keep[DPSCF300674] from pop2:	777
	-> [readdata] lastread:777 posi:5759
	-> Comparing positions: 1 with 0 has:22521474
	-> Comparing positions: 2 with 0 has:22521474
	-> Only read nSites: 22521474 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300675
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300675] from pop0:	234
	-> Sites to keep[DPSCF300675] from pop1:	234
	-> Sites to keep[DPSCF300675] from pop2:	234
	-> [readdata] lastread:234 posi:5759
	-> Comparing positions: 1 with 0 has:22521708
	-> Comparing positions: 2 with 0 has:22521708
	-> Only read nSites: 22521708 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300676
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300676] from pop0:	1122
	-> Sites to keep[DPSCF300676] from pop1:	1122
	-> Sites to keep[DPSCF300676] from pop2:	1122
	-> [readdata] lastread:1122 posi:5759
	-> Comparing positions: 1 with 0 has:22522830
	-> Comparing positions: 2 with 0 has:22522830
	-> Only read nSites: 22522830 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300677
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300677] from pop0:	443
	-> Sites to keep[DPSCF300677] from pop1:	443
	-> Sites to keep[DPSCF300677] from pop2:	443
	-> [readdata] lastread:443 posi:5759
	-> Comparing positions: 1 with 0 has:22523273
	-> Comparing positions: 2 with 0 has:22523273
	-> Only read nSites: 22523273 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300678
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300678] from pop0:	489
	-> Sites to keep[DPSCF300678] from pop1:	489
	-> Sites to keep[DPSCF300678] from pop2:	489
	-> [readdata] lastread:489 posi:5759
	-> Comparing positions: 1 with 0 has:22523762
	-> Comparing positions: 2 with 0 has:22523762
	-> Only read nSites: 22523762 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300679
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300679] from pop0:	191
	-> Sites to keep[DPSCF300679] from pop1:	191
	-> Sites to keep[DPSCF300679] from pop2:	191
	-> [readdata] lastread:191 posi:5759
	-> Comparing positions: 1 with 0 has:22523953
	-> Comparing positions: 2 with 0 has:22523953
	-> Only read nSites: 22523953 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300680
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300680] from pop0:	0
	-> Sites to keep[DPSCF300680] from pop1:	0
	-> Sites to keep[DPSCF300680] from pop2:	0
	-> Only read nSites: 22523953 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300681
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300681] from pop0:	261
	-> Sites to keep[DPSCF300681] from pop1:	261
	-> Sites to keep[DPSCF300681] from pop2:	261
	-> [readdata] lastread:261 posi:5759
	-> Comparing positions: 1 with 0 has:22524214
	-> Comparing positions: 2 with 0 has:22524214
	-> Only read nSites: 22524214 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300682
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300682' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300683
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300683] from pop0:	968
	-> Sites to keep[DPSCF300683] from pop1:	968
	-> Sites to keep[DPSCF300683] from pop2:	968
	-> [readdata] lastread:968 posi:5759
	-> Comparing positions: 1 with 0 has:22525182
	-> Comparing positions: 2 with 0 has:22525182
	-> Only read nSites: 22525182 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300684
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300684] from pop0:	322
	-> Sites to keep[DPSCF300684] from pop1:	322
	-> Sites to keep[DPSCF300684] from pop2:	322
	-> [readdata] lastread:322 posi:5759
	-> Comparing positions: 1 with 0 has:22525504
	-> Comparing positions: 2 with 0 has:22525504
	-> Only read nSites: 22525504 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300685
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300685' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300686
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300686] from pop0:	64
	-> Sites to keep[DPSCF300686] from pop1:	64
	-> Sites to keep[DPSCF300686] from pop2:	64
	-> [readdata] lastread:64 posi:5759
	-> Comparing positions: 1 with 0 has:22525568
	-> Comparing positions: 2 with 0 has:22525568
	-> Only read nSites: 22525568 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300687
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300687' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300688
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300688] from pop0:	108
	-> Sites to keep[DPSCF300688] from pop1:	108
	-> Sites to keep[DPSCF300688] from pop2:	108
	-> [readdata] lastread:108 posi:5759
	-> Comparing positions: 1 with 0 has:22525676
	-> Comparing positions: 2 with 0 has:22525676
	-> Only read nSites: 22525676 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300689
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300689] from pop0:	1690
	-> Sites to keep[DPSCF300689] from pop1:	1690
	-> Sites to keep[DPSCF300689] from pop2:	1690
	-> [readdata] lastread:1690 posi:5759
	-> Comparing positions: 1 with 0 has:22527366
	-> Comparing positions: 2 with 0 has:22527366
	-> Only read nSites: 22527366 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300690
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300690] from pop0:	365
	-> Sites to keep[DPSCF300690] from pop1:	365
	-> Sites to keep[DPSCF300690] from pop2:	365
	-> [readdata] lastread:365 posi:5759
	-> Comparing positions: 1 with 0 has:22527731
	-> Comparing positions: 2 with 0 has:22527731
	-> Only read nSites: 22527731 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300691
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300691' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300692
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300692] from pop0:	2077
	-> Sites to keep[DPSCF300692] from pop1:	2077
	-> Sites to keep[DPSCF300692] from pop2:	2077
	-> [readdata] lastread:2077 posi:5759
	-> Comparing positions: 1 with 0 has:22529808
	-> Comparing positions: 2 with 0 has:22529808
	-> Only read nSites: 22529808 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300693
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300693] from pop0:	726
	-> Sites to keep[DPSCF300693] from pop1:	726
	-> Sites to keep[DPSCF300693] from pop2:	726
	-> [readdata] lastread:726 posi:5759
	-> Comparing positions: 1 with 0 has:22530534
	-> Comparing positions: 2 with 0 has:22530534
	-> Only read nSites: 22530534 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300694
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300694] from pop0:	167
	-> Sites to keep[DPSCF300694] from pop1:	167
	-> Sites to keep[DPSCF300694] from pop2:	167
	-> [readdata] lastread:167 posi:5759
	-> Comparing positions: 1 with 0 has:22530701
	-> Comparing positions: 2 with 0 has:22530701
	-> Only read nSites: 22530701 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300695
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300695] from pop0:	1757
	-> Sites to keep[DPSCF300695] from pop1:	1757
	-> Sites to keep[DPSCF300695] from pop2:	1757
	-> [readdata] lastread:1757 posi:5759
	-> Comparing positions: 1 with 0 has:22532458
	-> Comparing positions: 2 with 0 has:22532458
	-> Only read nSites: 22532458 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300696
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300696] from pop0:	220
	-> Sites to keep[DPSCF300696] from pop1:	220
	-> Sites to keep[DPSCF300696] from pop2:	220
	-> [readdata] lastread:220 posi:5759
	-> Comparing positions: 1 with 0 has:22532678
	-> Comparing positions: 2 with 0 has:22532678
	-> Only read nSites: 22532678 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300697
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300697] from pop0:	161
	-> Sites to keep[DPSCF300697] from pop1:	161
	-> Sites to keep[DPSCF300697] from pop2:	161
	-> [readdata] lastread:161 posi:5759
	-> Comparing positions: 1 with 0 has:22532839
	-> Comparing positions: 2 with 0 has:22532839
	-> Only read nSites: 22532839 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300698
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300698] from pop0:	0
	-> Sites to keep[DPSCF300698] from pop1:	0
	-> Sites to keep[DPSCF300698] from pop2:	0
	-> Only read nSites: 22532839 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300699
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300699] from pop0:	1575
	-> Sites to keep[DPSCF300699] from pop1:	1575
	-> Sites to keep[DPSCF300699] from pop2:	1575
	-> [readdata] lastread:1575 posi:5759
	-> Comparing positions: 1 with 0 has:22534414
	-> Comparing positions: 2 with 0 has:22534414
	-> Only read nSites: 22534414 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300700
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300700] from pop0:	210
	-> Sites to keep[DPSCF300700] from pop1:	210
	-> Sites to keep[DPSCF300700] from pop2:	210
	-> [readdata] lastread:210 posi:5759
	-> Comparing positions: 1 with 0 has:22534624
	-> Comparing positions: 2 with 0 has:22534624
	-> Only read nSites: 22534624 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300701
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300701] from pop0:	375
	-> Sites to keep[DPSCF300701] from pop1:	375
	-> Sites to keep[DPSCF300701] from pop2:	375
	-> [readdata] lastread:375 posi:5759
	-> Comparing positions: 1 with 0 has:22534999
	-> Comparing positions: 2 with 0 has:22534999
	-> Only read nSites: 22534999 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300702
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300702] from pop0:	478
	-> Sites to keep[DPSCF300702] from pop1:	478
	-> Sites to keep[DPSCF300702] from pop2:	478
	-> [readdata] lastread:478 posi:5759
	-> Comparing positions: 1 with 0 has:22535477
	-> Comparing positions: 2 with 0 has:22535477
	-> Only read nSites: 22535477 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300703
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300703] from pop0:	872
	-> Sites to keep[DPSCF300703] from pop1:	872
	-> Sites to keep[DPSCF300703] from pop2:	872
	-> [readdata] lastread:872 posi:5759
	-> Comparing positions: 1 with 0 has:22536349
	-> Comparing positions: 2 with 0 has:22536349
	-> Only read nSites: 22536349 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300704
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300704] from pop0:	0
	-> Sites to keep[DPSCF300704] from pop1:	0
	-> Sites to keep[DPSCF300704] from pop2:	0
	-> Only read nSites: 22536349 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300705
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300705] from pop0:	930
	-> Sites to keep[DPSCF300705] from pop1:	930
	-> Sites to keep[DPSCF300705] from pop2:	930
	-> [readdata] lastread:930 posi:5759
	-> Comparing positions: 1 with 0 has:22537279
	-> Comparing positions: 2 with 0 has:22537279
	-> Only read nSites: 22537279 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300706
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300706' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300708
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300708] from pop0:	70
	-> Sites to keep[DPSCF300708] from pop1:	70
	-> Sites to keep[DPSCF300708] from pop2:	70
	-> [readdata] lastread:70 posi:5759
	-> Comparing positions: 1 with 0 has:22537349
	-> Comparing positions: 2 with 0 has:22537349
	-> Only read nSites: 22537349 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300709
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300709] from pop0:	237
	-> Sites to keep[DPSCF300709] from pop1:	237
	-> Sites to keep[DPSCF300709] from pop2:	237
	-> [readdata] lastread:237 posi:5759
	-> Comparing positions: 1 with 0 has:22537586
	-> Comparing positions: 2 with 0 has:22537586
	-> Only read nSites: 22537586 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300710
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300710] from pop0:	0
	-> Sites to keep[DPSCF300710] from pop1:	0
	-> Sites to keep[DPSCF300710] from pop2:	0
	-> Only read nSites: 22537586 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300711
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300711' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300712
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300712' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300713
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300713' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300714
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300714] from pop0:	975
	-> Sites to keep[DPSCF300714] from pop1:	975
	-> Sites to keep[DPSCF300714] from pop2:	975
	-> [readdata] lastread:975 posi:5759
	-> Comparing positions: 1 with 0 has:22538561
	-> Comparing positions: 2 with 0 has:22538561
	-> Only read nSites: 22538561 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300715
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300715] from pop0:	1901
	-> Sites to keep[DPSCF300715] from pop1:	1901
	-> Sites to keep[DPSCF300715] from pop2:	1901
	-> [readdata] lastread:1901 posi:5759
	-> Comparing positions: 1 with 0 has:22540462
	-> Comparing positions: 2 with 0 has:22540462
	-> Only read nSites: 22540462 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300716
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300716] from pop0:	224
	-> Sites to keep[DPSCF300716] from pop1:	224
	-> Sites to keep[DPSCF300716] from pop2:	224
	-> [readdata] lastread:224 posi:5759
	-> Comparing positions: 1 with 0 has:22540686
	-> Comparing positions: 2 with 0 has:22540686
	-> Only read nSites: 22540686 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300717
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300717] from pop0:	485
	-> Sites to keep[DPSCF300717] from pop1:	485
	-> Sites to keep[DPSCF300717] from pop2:	485
	-> [readdata] lastread:485 posi:5759
	-> Comparing positions: 1 with 0 has:22541171
	-> Comparing positions: 2 with 0 has:22541171
	-> Only read nSites: 22541171 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300718
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300718' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300719
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300719] from pop0:	962
	-> Sites to keep[DPSCF300719] from pop1:	962
	-> Sites to keep[DPSCF300719] from pop2:	962
	-> [readdata] lastread:962 posi:5759
	-> Comparing positions: 1 with 0 has:22542133
	-> Comparing positions: 2 with 0 has:22542133
	-> Only read nSites: 22542133 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300720
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300720] from pop0:	162
	-> Sites to keep[DPSCF300720] from pop1:	162
	-> Sites to keep[DPSCF300720] from pop2:	162
	-> [readdata] lastread:162 posi:5759
	-> Comparing positions: 1 with 0 has:22542295
	-> Comparing positions: 2 with 0 has:22542295
	-> Only read nSites: 22542295 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300721
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300721] from pop0:	470
	-> Sites to keep[DPSCF300721] from pop1:	470
	-> Sites to keep[DPSCF300721] from pop2:	470
	-> [readdata] lastread:470 posi:5759
	-> Comparing positions: 1 with 0 has:22542765
	-> Comparing positions: 2 with 0 has:22542765
	-> Only read nSites: 22542765 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300723
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300723] from pop0:	384
	-> Sites to keep[DPSCF300723] from pop1:	384
	-> Sites to keep[DPSCF300723] from pop2:	384
	-> [readdata] lastread:384 posi:5759
	-> Comparing positions: 1 with 0 has:22543149
	-> Comparing positions: 2 with 0 has:22543149
	-> Only read nSites: 22543149 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300724
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300724' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300725
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300725] from pop0:	460
	-> Sites to keep[DPSCF300725] from pop1:	460
	-> Sites to keep[DPSCF300725] from pop2:	460
	-> [readdata] lastread:460 posi:5759
	-> Comparing positions: 1 with 0 has:22543609
	-> Comparing positions: 2 with 0 has:22543609
	-> Only read nSites: 22543609 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300726
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300726] from pop0:	263
	-> Sites to keep[DPSCF300726] from pop1:	263
	-> Sites to keep[DPSCF300726] from pop2:	263
	-> [readdata] lastread:263 posi:5759
	-> Comparing positions: 1 with 0 has:22543872
	-> Comparing positions: 2 with 0 has:22543872
	-> Only read nSites: 22543872 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300727
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300727] from pop0:	166
	-> Sites to keep[DPSCF300727] from pop1:	166
	-> Sites to keep[DPSCF300727] from pop2:	166
	-> [readdata] lastread:166 posi:5759
	-> Comparing positions: 1 with 0 has:22544038
	-> Comparing positions: 2 with 0 has:22544038
	-> Only read nSites: 22544038 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300728
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300728] from pop0:	421
	-> Sites to keep[DPSCF300728] from pop1:	421
	-> Sites to keep[DPSCF300728] from pop2:	421
	-> [readdata] lastread:421 posi:5759
	-> Comparing positions: 1 with 0 has:22544459
	-> Comparing positions: 2 with 0 has:22544459
	-> Only read nSites: 22544459 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300729
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300729' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300730
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300730' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300731
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300731] from pop0:	1213
	-> Sites to keep[DPSCF300731] from pop1:	1213
	-> Sites to keep[DPSCF300731] from pop2:	1213
	-> [readdata] lastread:1213 posi:5759
	-> Comparing positions: 1 with 0 has:22545672
	-> Comparing positions: 2 with 0 has:22545672
	-> Only read nSites: 22545672 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300732
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300732' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300733
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300733] from pop0:	460
	-> Sites to keep[DPSCF300733] from pop1:	460
	-> Sites to keep[DPSCF300733] from pop2:	460
	-> [readdata] lastread:460 posi:5759
	-> Comparing positions: 1 with 0 has:22546132
	-> Comparing positions: 2 with 0 has:22546132
	-> Only read nSites: 22546132 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300734
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300734] from pop0:	94
	-> Sites to keep[DPSCF300734] from pop1:	94
	-> Sites to keep[DPSCF300734] from pop2:	94
	-> [readdata] lastread:94 posi:5759
	-> Comparing positions: 1 with 0 has:22546226
	-> Comparing positions: 2 with 0 has:22546226
	-> Only read nSites: 22546226 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300735
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300735] from pop0:	0
	-> Sites to keep[DPSCF300735] from pop1:	0
	-> Sites to keep[DPSCF300735] from pop2:	0
	-> Only read nSites: 22546226 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300737
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300737' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300738
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300738] from pop0:	324
	-> Sites to keep[DPSCF300738] from pop1:	324
	-> Sites to keep[DPSCF300738] from pop2:	324
	-> [readdata] lastread:324 posi:5759
	-> Comparing positions: 1 with 0 has:22546550
	-> Comparing positions: 2 with 0 has:22546550
	-> Only read nSites: 22546550 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300739
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300739] from pop0:	2216
	-> Sites to keep[DPSCF300739] from pop1:	2216
	-> Sites to keep[DPSCF300739] from pop2:	2216
	-> [readdata] lastread:2216 posi:5759
	-> Comparing positions: 1 with 0 has:22548766
	-> Comparing positions: 2 with 0 has:22548766
	-> Only read nSites: 22548766 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300740
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300740] from pop0:	342
	-> Sites to keep[DPSCF300740] from pop1:	342
	-> Sites to keep[DPSCF300740] from pop2:	342
	-> [readdata] lastread:342 posi:5759
	-> Comparing positions: 1 with 0 has:22549108
	-> Comparing positions: 2 with 0 has:22549108
	-> Only read nSites: 22549108 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300741
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300741' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300742
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300742] from pop0:	679
	-> Sites to keep[DPSCF300742] from pop1:	679
	-> Sites to keep[DPSCF300742] from pop2:	679
	-> [readdata] lastread:679 posi:5759
	-> Comparing positions: 1 with 0 has:22549787
	-> Comparing positions: 2 with 0 has:22549787
	-> Only read nSites: 22549787 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300743
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300743] from pop0:	58
	-> Sites to keep[DPSCF300743] from pop1:	58
	-> Sites to keep[DPSCF300743] from pop2:	58
	-> [readdata] lastread:58 posi:5759
	-> Comparing positions: 1 with 0 has:22549845
	-> Comparing positions: 2 with 0 has:22549845
	-> Only read nSites: 22549845 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300744
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300744' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300745
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300745] from pop0:	939
	-> Sites to keep[DPSCF300745] from pop1:	939
	-> Sites to keep[DPSCF300745] from pop2:	939
	-> [readdata] lastread:939 posi:5759
	-> Comparing positions: 1 with 0 has:22550784
	-> Comparing positions: 2 with 0 has:22550784
	-> Only read nSites: 22550784 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300746
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300746' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300747
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300747] from pop0:	0
	-> Sites to keep[DPSCF300747] from pop1:	0
	-> Sites to keep[DPSCF300747] from pop2:	0
	-> Only read nSites: 22550784 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300748
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300748' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300749
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300749' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300750
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300750] from pop0:	515
	-> Sites to keep[DPSCF300750] from pop1:	515
	-> Sites to keep[DPSCF300750] from pop2:	515
	-> [readdata] lastread:515 posi:5759
	-> Comparing positions: 1 with 0 has:22551299
	-> Comparing positions: 2 with 0 has:22551299
	-> Only read nSites: 22551299 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300751
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300751] from pop0:	210
	-> Sites to keep[DPSCF300751] from pop1:	210
	-> Sites to keep[DPSCF300751] from pop2:	210
	-> [readdata] lastread:210 posi:5759
	-> Comparing positions: 1 with 0 has:22551509
	-> Comparing positions: 2 with 0 has:22551509
	-> Only read nSites: 22551509 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300752
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300752] from pop0:	0
	-> Sites to keep[DPSCF300752] from pop1:	0
	-> Sites to keep[DPSCF300752] from pop2:	0
	-> Only read nSites: 22551509 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300753
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300753] from pop0:	881
	-> Sites to keep[DPSCF300753] from pop1:	881
	-> Sites to keep[DPSCF300753] from pop2:	881
	-> [readdata] lastread:881 posi:5759
	-> Comparing positions: 1 with 0 has:22552390
	-> Comparing positions: 2 with 0 has:22552390
	-> Only read nSites: 22552390 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300754
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300754] from pop0:	179
	-> Sites to keep[DPSCF300754] from pop1:	179
	-> Sites to keep[DPSCF300754] from pop2:	179
	-> [readdata] lastread:179 posi:5759
	-> Comparing positions: 1 with 0 has:22552569
	-> Comparing positions: 2 with 0 has:22552569
	-> Only read nSites: 22552569 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300755
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300755] from pop0:	829
	-> Sites to keep[DPSCF300755] from pop1:	829
	-> Sites to keep[DPSCF300755] from pop2:	829
	-> [readdata] lastread:829 posi:5759
	-> Comparing positions: 1 with 0 has:22553398
	-> Comparing positions: 2 with 0 has:22553398
	-> Only read nSites: 22553398 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300756
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300756' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300757
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300757' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300758
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300758' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300759
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300759] from pop0:	155
	-> Sites to keep[DPSCF300759] from pop1:	155
	-> Sites to keep[DPSCF300759] from pop2:	155
	-> [readdata] lastread:155 posi:5759
	-> Comparing positions: 1 with 0 has:22553553
	-> Comparing positions: 2 with 0 has:22553553
	-> Only read nSites: 22553553 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300760
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300760] from pop0:	97
	-> Sites to keep[DPSCF300760] from pop1:	97
	-> Sites to keep[DPSCF300760] from pop2:	97
	-> [readdata] lastread:97 posi:5759
	-> Comparing positions: 1 with 0 has:22553650
	-> Comparing positions: 2 with 0 has:22553650
	-> Only read nSites: 22553650 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300761
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300761' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300762
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300762] from pop0:	115
	-> Sites to keep[DPSCF300762] from pop1:	115
	-> Sites to keep[DPSCF300762] from pop2:	115
	-> [readdata] lastread:115 posi:5759
	-> Comparing positions: 1 with 0 has:22553765
	-> Comparing positions: 2 with 0 has:22553765
	-> Only read nSites: 22553765 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300763
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300763] from pop0:	474
	-> Sites to keep[DPSCF300763] from pop1:	474
	-> Sites to keep[DPSCF300763] from pop2:	474
	-> [readdata] lastread:474 posi:5759
	-> Comparing positions: 1 with 0 has:22554239
	-> Comparing positions: 2 with 0 has:22554239
	-> Only read nSites: 22554239 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300764
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300764' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300765
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300765] from pop0:	640
	-> Sites to keep[DPSCF300765] from pop1:	640
	-> Sites to keep[DPSCF300765] from pop2:	640
	-> [readdata] lastread:640 posi:5759
	-> Comparing positions: 1 with 0 has:22554879
	-> Comparing positions: 2 with 0 has:22554879
	-> Only read nSites: 22554879 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300766
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300766' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300767
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300767] from pop0:	1248
	-> Sites to keep[DPSCF300767] from pop1:	1248
	-> Sites to keep[DPSCF300767] from pop2:	1248
	-> [readdata] lastread:1248 posi:5759
	-> Comparing positions: 1 with 0 has:22556127
	-> Comparing positions: 2 with 0 has:22556127
	-> Only read nSites: 22556127 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300768
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300768] from pop0:	420
	-> Sites to keep[DPSCF300768] from pop1:	420
	-> Sites to keep[DPSCF300768] from pop2:	420
	-> [readdata] lastread:420 posi:5759
	-> Comparing positions: 1 with 0 has:22556547
	-> Comparing positions: 2 with 0 has:22556547
	-> Only read nSites: 22556547 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300769
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300769] from pop0:	153
	-> Sites to keep[DPSCF300769] from pop1:	153
	-> Sites to keep[DPSCF300769] from pop2:	153
	-> [readdata] lastread:153 posi:5759
	-> Comparing positions: 1 with 0 has:22556700
	-> Comparing positions: 2 with 0 has:22556700
	-> Only read nSites: 22556700 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300770
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300770' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300771
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300771] from pop0:	263
	-> Sites to keep[DPSCF300771] from pop1:	263
	-> Sites to keep[DPSCF300771] from pop2:	263
	-> [readdata] lastread:263 posi:5759
	-> Comparing positions: 1 with 0 has:22556963
	-> Comparing positions: 2 with 0 has:22556963
	-> Only read nSites: 22556963 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300773
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300773] from pop0:	411
	-> Sites to keep[DPSCF300773] from pop1:	411
	-> Sites to keep[DPSCF300773] from pop2:	411
	-> [readdata] lastread:411 posi:5759
	-> Comparing positions: 1 with 0 has:22557374
	-> Comparing positions: 2 with 0 has:22557374
	-> Only read nSites: 22557374 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300774
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300774] from pop0:	58
	-> Sites to keep[DPSCF300774] from pop1:	58
	-> Sites to keep[DPSCF300774] from pop2:	58
	-> [readdata] lastread:58 posi:5759
	-> Comparing positions: 1 with 0 has:22557432
	-> Comparing positions: 2 with 0 has:22557432
	-> Only read nSites: 22557432 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300775
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300775' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300776
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300776] from pop0:	0
	-> Sites to keep[DPSCF300776] from pop1:	0
	-> Sites to keep[DPSCF300776] from pop2:	0
	-> Only read nSites: 22557432 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300778
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300778] from pop0:	0
	-> Sites to keep[DPSCF300778] from pop1:	0
	-> Sites to keep[DPSCF300778] from pop2:	0
	-> Only read nSites: 22557432 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300779
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300779] from pop0:	406
	-> Sites to keep[DPSCF300779] from pop1:	406
	-> Sites to keep[DPSCF300779] from pop2:	406
	-> [readdata] lastread:406 posi:5759
	-> Comparing positions: 1 with 0 has:22557838
	-> Comparing positions: 2 with 0 has:22557838
	-> Only read nSites: 22557838 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300780
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300780] from pop0:	1113
	-> Sites to keep[DPSCF300780] from pop1:	1113
	-> Sites to keep[DPSCF300780] from pop2:	1113
	-> [readdata] lastread:1113 posi:5759
	-> Comparing positions: 1 with 0 has:22558951
	-> Comparing positions: 2 with 0 has:22558951
	-> Only read nSites: 22558951 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300781
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300781' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300782
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300782] from pop0:	455
	-> Sites to keep[DPSCF300782] from pop1:	455
	-> Sites to keep[DPSCF300782] from pop2:	455
	-> [readdata] lastread:455 posi:5759
	-> Comparing positions: 1 with 0 has:22559406
	-> Comparing positions: 2 with 0 has:22559406
	-> Only read nSites: 22559406 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300783
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300783] from pop0:	400
	-> Sites to keep[DPSCF300783] from pop1:	400
	-> Sites to keep[DPSCF300783] from pop2:	400
	-> [readdata] lastread:400 posi:5759
	-> Comparing positions: 1 with 0 has:22559806
	-> Comparing positions: 2 with 0 has:22559806
	-> Only read nSites: 22559806 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300785
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300785] from pop0:	722
	-> Sites to keep[DPSCF300785] from pop1:	722
	-> Sites to keep[DPSCF300785] from pop2:	722
	-> [readdata] lastread:722 posi:5759
	-> Comparing positions: 1 with 0 has:22560528
	-> Comparing positions: 2 with 0 has:22560528
	-> Only read nSites: 22560528 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300786
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300786] from pop0:	135
	-> Sites to keep[DPSCF300786] from pop1:	135
	-> Sites to keep[DPSCF300786] from pop2:	135
	-> [readdata] lastread:135 posi:5759
	-> Comparing positions: 1 with 0 has:22560663
	-> Comparing positions: 2 with 0 has:22560663
	-> Only read nSites: 22560663 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300787
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300787] from pop0:	49
	-> Sites to keep[DPSCF300787] from pop1:	49
	-> Sites to keep[DPSCF300787] from pop2:	49
	-> [readdata] lastread:49 posi:5759
	-> Comparing positions: 1 with 0 has:22560712
	-> Comparing positions: 2 with 0 has:22560712
	-> Only read nSites: 22560712 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300788
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300788] from pop0:	0
	-> Sites to keep[DPSCF300788] from pop1:	0
	-> Sites to keep[DPSCF300788] from pop2:	0
	-> Only read nSites: 22560712 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300789
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300789] from pop0:	251
	-> Sites to keep[DPSCF300789] from pop1:	251
	-> Sites to keep[DPSCF300789] from pop2:	251
	-> [readdata] lastread:251 posi:5759
	-> Comparing positions: 1 with 0 has:22560963
	-> Comparing positions: 2 with 0 has:22560963
	-> Only read nSites: 22560963 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300790
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300790' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300791
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300791] from pop0:	424
	-> Sites to keep[DPSCF300791] from pop1:	424
	-> Sites to keep[DPSCF300791] from pop2:	424
	-> [readdata] lastread:424 posi:5759
	-> Comparing positions: 1 with 0 has:22561387
	-> Comparing positions: 2 with 0 has:22561387
	-> Only read nSites: 22561387 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300792
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300792] from pop0:	547
	-> Sites to keep[DPSCF300792] from pop1:	547
	-> Sites to keep[DPSCF300792] from pop2:	547
	-> [readdata] lastread:547 posi:5759
	-> Comparing positions: 1 with 0 has:22561934
	-> Comparing positions: 2 with 0 has:22561934
	-> Only read nSites: 22561934 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300793
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300793] from pop0:	146
	-> Sites to keep[DPSCF300793] from pop1:	146
	-> Sites to keep[DPSCF300793] from pop2:	146
	-> [readdata] lastread:146 posi:5759
	-> Comparing positions: 1 with 0 has:22562080
	-> Comparing positions: 2 with 0 has:22562080
	-> Only read nSites: 22562080 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300794
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300794] from pop0:	1057
	-> Sites to keep[DPSCF300794] from pop1:	1057
	-> Sites to keep[DPSCF300794] from pop2:	1057
	-> [readdata] lastread:1057 posi:5759
	-> Comparing positions: 1 with 0 has:22563137
	-> Comparing positions: 2 with 0 has:22563137
	-> Only read nSites: 22563137 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300795
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300795] from pop0:	99
	-> Sites to keep[DPSCF300795] from pop1:	99
	-> Sites to keep[DPSCF300795] from pop2:	99
	-> [readdata] lastread:99 posi:5759
	-> Comparing positions: 1 with 0 has:22563236
	-> Comparing positions: 2 with 0 has:22563236
	-> Only read nSites: 22563236 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300796
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300796' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300797
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300797' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300798
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300798' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300799
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300799] from pop0:	1753
	-> Sites to keep[DPSCF300799] from pop1:	1753
	-> Sites to keep[DPSCF300799] from pop2:	1753
	-> [readdata] lastread:1753 posi:5759
	-> Comparing positions: 1 with 0 has:22564989
	-> Comparing positions: 2 with 0 has:22564989
	-> Only read nSites: 22564989 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300800
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300800' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300801
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300801] from pop0:	522
	-> Sites to keep[DPSCF300801] from pop1:	522
	-> Sites to keep[DPSCF300801] from pop2:	522
	-> [readdata] lastread:522 posi:5759
	-> Comparing positions: 1 with 0 has:22565511
	-> Comparing positions: 2 with 0 has:22565511
	-> Only read nSites: 22565511 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300802
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300802' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300803
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300803] from pop0:	223
	-> Sites to keep[DPSCF300803] from pop1:	223
	-> Sites to keep[DPSCF300803] from pop2:	223
	-> [readdata] lastread:223 posi:5759
	-> Comparing positions: 1 with 0 has:22565734
	-> Comparing positions: 2 with 0 has:22565734
	-> Only read nSites: 22565734 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300804
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300804] from pop0:	660
	-> Sites to keep[DPSCF300804] from pop1:	660
	-> Sites to keep[DPSCF300804] from pop2:	660
	-> [readdata] lastread:660 posi:5759
	-> Comparing positions: 1 with 0 has:22566394
	-> Comparing positions: 2 with 0 has:22566394
	-> Only read nSites: 22566394 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300805
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300805' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300806
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300806' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300807
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300807] from pop0:	201
	-> Sites to keep[DPSCF300807] from pop1:	201
	-> Sites to keep[DPSCF300807] from pop2:	201
	-> [readdata] lastread:201 posi:5759
	-> Comparing positions: 1 with 0 has:22566595
	-> Comparing positions: 2 with 0 has:22566595
	-> Only read nSites: 22566595 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300808
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300808' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300809
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300809] from pop0:	1128
	-> Sites to keep[DPSCF300809] from pop1:	1128
	-> Sites to keep[DPSCF300809] from pop2:	1128
	-> [readdata] lastread:1128 posi:5759
	-> Comparing positions: 1 with 0 has:22567723
	-> Comparing positions: 2 with 0 has:22567723
	-> Only read nSites: 22567723 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300811
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300811] from pop0:	828
	-> Sites to keep[DPSCF300811] from pop1:	828
	-> Sites to keep[DPSCF300811] from pop2:	828
	-> [readdata] lastread:828 posi:5759
	-> Comparing positions: 1 with 0 has:22568551
	-> Comparing positions: 2 with 0 has:22568551
	-> Only read nSites: 22568551 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300814
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300814] from pop0:	107
	-> Sites to keep[DPSCF300814] from pop1:	107
	-> Sites to keep[DPSCF300814] from pop2:	107
	-> [readdata] lastread:107 posi:5759
	-> Comparing positions: 1 with 0 has:22568658
	-> Comparing positions: 2 with 0 has:22568658
	-> Only read nSites: 22568658 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300815
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300815' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300817
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300817' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300818
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300818] from pop0:	143
	-> Sites to keep[DPSCF300818] from pop1:	143
	-> Sites to keep[DPSCF300818] from pop2:	143
	-> [readdata] lastread:143 posi:5759
	-> Comparing positions: 1 with 0 has:22568801
	-> Comparing positions: 2 with 0 has:22568801
	-> Only read nSites: 22568801 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300820
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300820] from pop0:	99
	-> Sites to keep[DPSCF300820] from pop1:	99
	-> Sites to keep[DPSCF300820] from pop2:	99
	-> [readdata] lastread:99 posi:5759
	-> Comparing positions: 1 with 0 has:22568900
	-> Comparing positions: 2 with 0 has:22568900
	-> Only read nSites: 22568900 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300821
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300821] from pop0:	904
	-> Sites to keep[DPSCF300821] from pop1:	904
	-> Sites to keep[DPSCF300821] from pop2:	904
	-> [readdata] lastread:904 posi:5759
	-> Comparing positions: 1 with 0 has:22569804
	-> Comparing positions: 2 with 0 has:22569804
	-> Only read nSites: 22569804 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300822
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300822' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300823
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300823' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300824
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300824' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300826
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300826] from pop0:	153
	-> Sites to keep[DPSCF300826] from pop1:	153
	-> Sites to keep[DPSCF300826] from pop2:	153
	-> [readdata] lastread:153 posi:5759
	-> Comparing positions: 1 with 0 has:22569957
	-> Comparing positions: 2 with 0 has:22569957
	-> Only read nSites: 22569957 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300827
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300827' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300828
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300828' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300830
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300830' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300831
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300831' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300832
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300832] from pop0:	165
	-> Sites to keep[DPSCF300832] from pop1:	165
	-> Sites to keep[DPSCF300832] from pop2:	165
	-> [readdata] lastread:165 posi:5759
	-> Comparing positions: 1 with 0 has:22570122
	-> Comparing positions: 2 with 0 has:22570122
	-> Only read nSites: 22570122 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300833
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300833] from pop0:	289
	-> Sites to keep[DPSCF300833] from pop1:	289
	-> Sites to keep[DPSCF300833] from pop2:	289
	-> [readdata] lastread:289 posi:5759
	-> Comparing positions: 1 with 0 has:22570411
	-> Comparing positions: 2 with 0 has:22570411
	-> Only read nSites: 22570411 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300834
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300834] from pop0:	251
	-> Sites to keep[DPSCF300834] from pop1:	251
	-> Sites to keep[DPSCF300834] from pop2:	251
	-> [readdata] lastread:251 posi:5759
	-> Comparing positions: 1 with 0 has:22570662
	-> Comparing positions: 2 with 0 has:22570662
	-> Only read nSites: 22570662 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300835
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300835' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300836
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300836] from pop0:	518
	-> Sites to keep[DPSCF300836] from pop1:	518
	-> Sites to keep[DPSCF300836] from pop2:	518
	-> [readdata] lastread:518 posi:5759
	-> Comparing positions: 1 with 0 has:22571180
	-> Comparing positions: 2 with 0 has:22571180
	-> Only read nSites: 22571180 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300837
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300837] from pop0:	252
	-> Sites to keep[DPSCF300837] from pop1:	252
	-> Sites to keep[DPSCF300837] from pop2:	252
	-> [readdata] lastread:252 posi:5759
	-> Comparing positions: 1 with 0 has:22571432
	-> Comparing positions: 2 with 0 has:22571432
	-> Only read nSites: 22571432 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300838
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300838' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300839
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300839] from pop0:	580
	-> Sites to keep[DPSCF300839] from pop1:	580
	-> Sites to keep[DPSCF300839] from pop2:	580
	-> [readdata] lastread:580 posi:5759
	-> Comparing positions: 1 with 0 has:22572012
	-> Comparing positions: 2 with 0 has:22572012
	-> Only read nSites: 22572012 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300840
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300840] from pop0:	57
	-> Sites to keep[DPSCF300840] from pop1:	57
	-> Sites to keep[DPSCF300840] from pop2:	57
	-> [readdata] lastread:57 posi:5759
	-> Comparing positions: 1 with 0 has:22572069
	-> Comparing positions: 2 with 0 has:22572069
	-> Only read nSites: 22572069 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300841
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300841' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300842
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300842' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300843
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300843] from pop0:	443
	-> Sites to keep[DPSCF300843] from pop1:	443
	-> Sites to keep[DPSCF300843] from pop2:	443
	-> [readdata] lastread:443 posi:5759
	-> Comparing positions: 1 with 0 has:22572512
	-> Comparing positions: 2 with 0 has:22572512
	-> Only read nSites: 22572512 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300844
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300844] from pop0:	771
	-> Sites to keep[DPSCF300844] from pop1:	771
	-> Sites to keep[DPSCF300844] from pop2:	771
	-> [readdata] lastread:771 posi:5759
	-> Comparing positions: 1 with 0 has:22573283
	-> Comparing positions: 2 with 0 has:22573283
	-> Only read nSites: 22573283 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300845
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300845] from pop0:	183
	-> Sites to keep[DPSCF300845] from pop1:	183
	-> Sites to keep[DPSCF300845] from pop2:	183
	-> [readdata] lastread:183 posi:5759
	-> Comparing positions: 1 with 0 has:22573466
	-> Comparing positions: 2 with 0 has:22573466
	-> Only read nSites: 22573466 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300846
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300846] from pop0:	707
	-> Sites to keep[DPSCF300846] from pop1:	707
	-> Sites to keep[DPSCF300846] from pop2:	707
	-> [readdata] lastread:707 posi:5759
	-> Comparing positions: 1 with 0 has:22574173
	-> Comparing positions: 2 with 0 has:22574173
	-> Only read nSites: 22574173 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300848
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300848] from pop0:	0
	-> Sites to keep[DPSCF300848] from pop1:	0
	-> Sites to keep[DPSCF300848] from pop2:	0
	-> Only read nSites: 22574173 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300849
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300849] from pop0:	341
	-> Sites to keep[DPSCF300849] from pop1:	341
	-> Sites to keep[DPSCF300849] from pop2:	341
	-> [readdata] lastread:341 posi:5759
	-> Comparing positions: 1 with 0 has:22574514
	-> Comparing positions: 2 with 0 has:22574514
	-> Only read nSites: 22574514 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300851
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300851] from pop0:	588
	-> Sites to keep[DPSCF300851] from pop1:	588
	-> Sites to keep[DPSCF300851] from pop2:	588
	-> [readdata] lastread:588 posi:5759
	-> Comparing positions: 1 with 0 has:22575102
	-> Comparing positions: 2 with 0 has:22575102
	-> Only read nSites: 22575102 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300852
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300852] from pop0:	963
	-> Sites to keep[DPSCF300852] from pop1:	963
	-> Sites to keep[DPSCF300852] from pop2:	963
	-> [readdata] lastread:963 posi:5759
	-> Comparing positions: 1 with 0 has:22576065
	-> Comparing positions: 2 with 0 has:22576065
	-> Only read nSites: 22576065 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300853
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300853' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300854
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300854' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300855
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300855] from pop0:	268
	-> Sites to keep[DPSCF300855] from pop1:	268
	-> Sites to keep[DPSCF300855] from pop2:	268
	-> [readdata] lastread:268 posi:5759
	-> Comparing positions: 1 with 0 has:22576333
	-> Comparing positions: 2 with 0 has:22576333
	-> Only read nSites: 22576333 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300856
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300856' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300859
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300859] from pop0:	70
	-> Sites to keep[DPSCF300859] from pop1:	70
	-> Sites to keep[DPSCF300859] from pop2:	70
	-> [readdata] lastread:70 posi:5759
	-> Comparing positions: 1 with 0 has:22576403
	-> Comparing positions: 2 with 0 has:22576403
	-> Only read nSites: 22576403 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300860
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300860' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300861
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300861' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300862
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300862] from pop0:	0
	-> Sites to keep[DPSCF300862] from pop1:	0
	-> Sites to keep[DPSCF300862] from pop2:	0
	-> Only read nSites: 22576403 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300863
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300863] from pop0:	326
	-> Sites to keep[DPSCF300863] from pop1:	326
	-> Sites to keep[DPSCF300863] from pop2:	326
	-> [readdata] lastread:326 posi:5759
	-> Comparing positions: 1 with 0 has:22576729
	-> Comparing positions: 2 with 0 has:22576729
	-> Only read nSites: 22576729 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300864
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300864' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300865
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300865' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300866
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300866] from pop0:	1071
	-> Sites to keep[DPSCF300866] from pop1:	1071
	-> Sites to keep[DPSCF300866] from pop2:	1071
	-> [readdata] lastread:1071 posi:5759
	-> Comparing positions: 1 with 0 has:22577800
	-> Comparing positions: 2 with 0 has:22577800
	-> Only read nSites: 22577800 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300867
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300867] from pop0:	494
	-> Sites to keep[DPSCF300867] from pop1:	494
	-> Sites to keep[DPSCF300867] from pop2:	494
	-> [readdata] lastread:494 posi:5759
	-> Comparing positions: 1 with 0 has:22578294
	-> Comparing positions: 2 with 0 has:22578294
	-> Only read nSites: 22578294 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300868
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300868' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300869
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300869] from pop0:	581
	-> Sites to keep[DPSCF300869] from pop1:	581
	-> Sites to keep[DPSCF300869] from pop2:	581
	-> [readdata] lastread:581 posi:5759
	-> Comparing positions: 1 with 0 has:22578875
	-> Comparing positions: 2 with 0 has:22578875
	-> Only read nSites: 22578875 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300870
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300870' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300871
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300871] from pop0:	69
	-> Sites to keep[DPSCF300871] from pop1:	69
	-> Sites to keep[DPSCF300871] from pop2:	69
	-> [readdata] lastread:69 posi:5759
	-> Comparing positions: 1 with 0 has:22578944
	-> Comparing positions: 2 with 0 has:22578944
	-> Only read nSites: 22578944 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300872
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300872] from pop0:	83
	-> Sites to keep[DPSCF300872] from pop1:	83
	-> Sites to keep[DPSCF300872] from pop2:	83
	-> [readdata] lastread:83 posi:5759
	-> Comparing positions: 1 with 0 has:22579027
	-> Comparing positions: 2 with 0 has:22579027
	-> Only read nSites: 22579027 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300873
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300873] from pop0:	417
	-> Sites to keep[DPSCF300873] from pop1:	417
	-> Sites to keep[DPSCF300873] from pop2:	417
	-> [readdata] lastread:417 posi:5759
	-> Comparing positions: 1 with 0 has:22579444
	-> Comparing positions: 2 with 0 has:22579444
	-> Only read nSites: 22579444 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300874
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300874' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300875
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300875] from pop0:	395
	-> Sites to keep[DPSCF300875] from pop1:	395
	-> Sites to keep[DPSCF300875] from pop2:	395
	-> [readdata] lastread:395 posi:5759
	-> Comparing positions: 1 with 0 has:22579839
	-> Comparing positions: 2 with 0 has:22579839
	-> Only read nSites: 22579839 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300876
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300876] from pop0:	209
	-> Sites to keep[DPSCF300876] from pop1:	209
	-> Sites to keep[DPSCF300876] from pop2:	209
	-> [readdata] lastread:209 posi:5759
	-> Comparing positions: 1 with 0 has:22580048
	-> Comparing positions: 2 with 0 has:22580048
	-> Only read nSites: 22580048 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300877
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300877] from pop0:	276
	-> Sites to keep[DPSCF300877] from pop1:	276
	-> Sites to keep[DPSCF300877] from pop2:	276
	-> [readdata] lastread:276 posi:5759
	-> Comparing positions: 1 with 0 has:22580324
	-> Comparing positions: 2 with 0 has:22580324
	-> Only read nSites: 22580324 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300878
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300878] from pop0:	89
	-> Sites to keep[DPSCF300878] from pop1:	89
	-> Sites to keep[DPSCF300878] from pop2:	89
	-> [readdata] lastread:89 posi:5759
	-> Comparing positions: 1 with 0 has:22580413
	-> Comparing positions: 2 with 0 has:22580413
	-> Only read nSites: 22580413 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300879
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300879] from pop0:	274
	-> Sites to keep[DPSCF300879] from pop1:	274
	-> Sites to keep[DPSCF300879] from pop2:	274
	-> [readdata] lastread:274 posi:5759
	-> Comparing positions: 1 with 0 has:22580687
	-> Comparing positions: 2 with 0 has:22580687
	-> Only read nSites: 22580687 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300880
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300880] from pop0:	862
	-> Sites to keep[DPSCF300880] from pop1:	862
	-> Sites to keep[DPSCF300880] from pop2:	862
	-> [readdata] lastread:862 posi:5759
	-> Comparing positions: 1 with 0 has:22581549
	-> Comparing positions: 2 with 0 has:22581549
	-> Only read nSites: 22581549 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300881
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300881] from pop0:	286
	-> Sites to keep[DPSCF300881] from pop1:	286
	-> Sites to keep[DPSCF300881] from pop2:	286
	-> [readdata] lastread:286 posi:5759
	-> Comparing positions: 1 with 0 has:22581835
	-> Comparing positions: 2 with 0 has:22581835
	-> Only read nSites: 22581835 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300882
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300882] from pop0:	764
	-> Sites to keep[DPSCF300882] from pop1:	764
	-> Sites to keep[DPSCF300882] from pop2:	764
	-> [readdata] lastread:764 posi:5759
	-> Comparing positions: 1 with 0 has:22582599
	-> Comparing positions: 2 with 0 has:22582599
	-> Only read nSites: 22582599 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300883
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300883] from pop0:	951
	-> Sites to keep[DPSCF300883] from pop1:	951
	-> Sites to keep[DPSCF300883] from pop2:	951
	-> [readdata] lastread:951 posi:5759
	-> Comparing positions: 1 with 0 has:22583550
	-> Comparing positions: 2 with 0 has:22583550
	-> Only read nSites: 22583550 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300884
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300884' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300885
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300885] from pop0:	0
	-> Sites to keep[DPSCF300885] from pop1:	0
	-> Sites to keep[DPSCF300885] from pop2:	0
	-> Only read nSites: 22583550 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300886
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300886] from pop0:	265
	-> Sites to keep[DPSCF300886] from pop1:	265
	-> Sites to keep[DPSCF300886] from pop2:	265
	-> [readdata] lastread:265 posi:5759
	-> Comparing positions: 1 with 0 has:22583815
	-> Comparing positions: 2 with 0 has:22583815
	-> Only read nSites: 22583815 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300887
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300887] from pop0:	829
	-> Sites to keep[DPSCF300887] from pop1:	829
	-> Sites to keep[DPSCF300887] from pop2:	829
	-> [readdata] lastread:829 posi:5759
	-> Comparing positions: 1 with 0 has:22584644
	-> Comparing positions: 2 with 0 has:22584644
	-> Only read nSites: 22584644 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300888
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300888] from pop0:	321
	-> Sites to keep[DPSCF300888] from pop1:	321
	-> Sites to keep[DPSCF300888] from pop2:	321
	-> [readdata] lastread:321 posi:5759
	-> Comparing positions: 1 with 0 has:22584965
	-> Comparing positions: 2 with 0 has:22584965
	-> Only read nSites: 22584965 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300889
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300889] from pop0:	898
	-> Sites to keep[DPSCF300889] from pop1:	898
	-> Sites to keep[DPSCF300889] from pop2:	898
	-> [readdata] lastread:898 posi:5759
	-> Comparing positions: 1 with 0 has:22585863
	-> Comparing positions: 2 with 0 has:22585863
	-> Only read nSites: 22585863 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300890
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300890' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300891
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300891' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300892
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300892] from pop0:	1537
	-> Sites to keep[DPSCF300892] from pop1:	1537
	-> Sites to keep[DPSCF300892] from pop2:	1537
	-> [readdata] lastread:1537 posi:5759
	-> Comparing positions: 1 with 0 has:22587400
	-> Comparing positions: 2 with 0 has:22587400
	-> Only read nSites: 22587400 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300893
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300893] from pop0:	824
	-> Sites to keep[DPSCF300893] from pop1:	824
	-> Sites to keep[DPSCF300893] from pop2:	824
	-> [readdata] lastread:824 posi:5759
	-> Comparing positions: 1 with 0 has:22588224
	-> Comparing positions: 2 with 0 has:22588224
	-> Only read nSites: 22588224 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300894
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300894] from pop0:	242
	-> Sites to keep[DPSCF300894] from pop1:	242
	-> Sites to keep[DPSCF300894] from pop2:	242
	-> [readdata] lastread:242 posi:5759
	-> Comparing positions: 1 with 0 has:22588466
	-> Comparing positions: 2 with 0 has:22588466
	-> Only read nSites: 22588466 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300895
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300895' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300896
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300896] from pop0:	0
	-> Sites to keep[DPSCF300896] from pop1:	0
	-> Sites to keep[DPSCF300896] from pop2:	0
	-> Only read nSites: 22588466 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300897
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300897] from pop0:	130
	-> Sites to keep[DPSCF300897] from pop1:	130
	-> Sites to keep[DPSCF300897] from pop2:	130
	-> [readdata] lastread:130 posi:5759
	-> Comparing positions: 1 with 0 has:22588596
	-> Comparing positions: 2 with 0 has:22588596
	-> Only read nSites: 22588596 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300898
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300898] from pop0:	205
	-> Sites to keep[DPSCF300898] from pop1:	205
	-> Sites to keep[DPSCF300898] from pop2:	205
	-> [readdata] lastread:205 posi:5759
	-> Comparing positions: 1 with 0 has:22588801
	-> Comparing positions: 2 with 0 has:22588801
	-> Only read nSites: 22588801 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300899
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300899] from pop0:	304
	-> Sites to keep[DPSCF300899] from pop1:	304
	-> Sites to keep[DPSCF300899] from pop2:	304
	-> [readdata] lastread:304 posi:5759
	-> Comparing positions: 1 with 0 has:22589105
	-> Comparing positions: 2 with 0 has:22589105
	-> Only read nSites: 22589105 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300900
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300900] from pop0:	558
	-> Sites to keep[DPSCF300900] from pop1:	558
	-> Sites to keep[DPSCF300900] from pop2:	558
	-> [readdata] lastread:558 posi:5759
	-> Comparing positions: 1 with 0 has:22589663
	-> Comparing positions: 2 with 0 has:22589663
	-> Only read nSites: 22589663 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300901
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300901' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300902
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300902] from pop0:	931
	-> Sites to keep[DPSCF300902] from pop1:	931
	-> Sites to keep[DPSCF300902] from pop2:	931
	-> [readdata] lastread:931 posi:5759
	-> Comparing positions: 1 with 0 has:22590594
	-> Comparing positions: 2 with 0 has:22590594
	-> Only read nSites: 22590594 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300903
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300903] from pop0:	320
	-> Sites to keep[DPSCF300903] from pop1:	320
	-> Sites to keep[DPSCF300903] from pop2:	320
	-> [readdata] lastread:320 posi:5759
	-> Comparing positions: 1 with 0 has:22590914
	-> Comparing positions: 2 with 0 has:22590914
	-> Only read nSites: 22590914 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300904
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300904' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300905
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300905' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300906
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300906' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300907
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300907' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300908
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300908] from pop0:	101
	-> Sites to keep[DPSCF300908] from pop1:	101
	-> Sites to keep[DPSCF300908] from pop2:	101
	-> [readdata] lastread:101 posi:5759
	-> Comparing positions: 1 with 0 has:22591015
	-> Comparing positions: 2 with 0 has:22591015
	-> Only read nSites: 22591015 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300909
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300909] from pop0:	422
	-> Sites to keep[DPSCF300909] from pop1:	422
	-> Sites to keep[DPSCF300909] from pop2:	422
	-> [readdata] lastread:422 posi:5759
	-> Comparing positions: 1 with 0 has:22591437
	-> Comparing positions: 2 with 0 has:22591437
	-> Only read nSites: 22591437 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300910
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300910] from pop0:	388
	-> Sites to keep[DPSCF300910] from pop1:	388
	-> Sites to keep[DPSCF300910] from pop2:	388
	-> [readdata] lastread:388 posi:5759
	-> Comparing positions: 1 with 0 has:22591825
	-> Comparing positions: 2 with 0 has:22591825
	-> Only read nSites: 22591825 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300911
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300911' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300912
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300912] from pop0:	224
	-> Sites to keep[DPSCF300912] from pop1:	224
	-> Sites to keep[DPSCF300912] from pop2:	224
	-> [readdata] lastread:224 posi:5759
	-> Comparing positions: 1 with 0 has:22592049
	-> Comparing positions: 2 with 0 has:22592049
	-> Only read nSites: 22592049 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300913
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300913' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300914
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300914] from pop0:	290
	-> Sites to keep[DPSCF300914] from pop1:	290
	-> Sites to keep[DPSCF300914] from pop2:	290
	-> [readdata] lastread:290 posi:5759
	-> Comparing positions: 1 with 0 has:22592339
	-> Comparing positions: 2 with 0 has:22592339
	-> Only read nSites: 22592339 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300915
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300915] from pop0:	174
	-> Sites to keep[DPSCF300915] from pop1:	174
	-> Sites to keep[DPSCF300915] from pop2:	174
	-> [readdata] lastread:174 posi:5759
	-> Comparing positions: 1 with 0 has:22592513
	-> Comparing positions: 2 with 0 has:22592513
	-> Only read nSites: 22592513 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300917
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300917] from pop0:	249
	-> Sites to keep[DPSCF300917] from pop1:	249
	-> Sites to keep[DPSCF300917] from pop2:	249
	-> [readdata] lastread:249 posi:5759
	-> Comparing positions: 1 with 0 has:22592762
	-> Comparing positions: 2 with 0 has:22592762
	-> Only read nSites: 22592762 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300918
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300918' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300919
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300919' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300920
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300920' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300921
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300921] from pop0:	244
	-> Sites to keep[DPSCF300921] from pop1:	244
	-> Sites to keep[DPSCF300921] from pop2:	244
	-> [readdata] lastread:244 posi:5759
	-> Comparing positions: 1 with 0 has:22593006
	-> Comparing positions: 2 with 0 has:22593006
	-> Only read nSites: 22593006 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300922
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300922] from pop0:	136
	-> Sites to keep[DPSCF300922] from pop1:	136
	-> Sites to keep[DPSCF300922] from pop2:	136
	-> [readdata] lastread:136 posi:5759
	-> Comparing positions: 1 with 0 has:22593142
	-> Comparing positions: 2 with 0 has:22593142
	-> Only read nSites: 22593142 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300923
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300923] from pop0:	921
	-> Sites to keep[DPSCF300923] from pop1:	921
	-> Sites to keep[DPSCF300923] from pop2:	921
	-> [readdata] lastread:921 posi:5759
	-> Comparing positions: 1 with 0 has:22594063
	-> Comparing positions: 2 with 0 has:22594063
	-> Only read nSites: 22594063 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300924
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300924' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300925
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300925' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300926
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300926' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300927
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300927] from pop0:	339
	-> Sites to keep[DPSCF300927] from pop1:	339
	-> Sites to keep[DPSCF300927] from pop2:	339
	-> [readdata] lastread:339 posi:5759
	-> Comparing positions: 1 with 0 has:22594402
	-> Comparing positions: 2 with 0 has:22594402
	-> Only read nSites: 22594402 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300928
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300928] from pop0:	212
	-> Sites to keep[DPSCF300928] from pop1:	212
	-> Sites to keep[DPSCF300928] from pop2:	212
	-> [readdata] lastread:212 posi:5759
	-> Comparing positions: 1 with 0 has:22594614
	-> Comparing positions: 2 with 0 has:22594614
	-> Only read nSites: 22594614 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300929
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300929] from pop0:	775
	-> Sites to keep[DPSCF300929] from pop1:	775
	-> Sites to keep[DPSCF300929] from pop2:	775
	-> [readdata] lastread:775 posi:5759
	-> Comparing positions: 1 with 0 has:22595389
	-> Comparing positions: 2 with 0 has:22595389
	-> Only read nSites: 22595389 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300931
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300931] from pop0:	868
	-> Sites to keep[DPSCF300931] from pop1:	868
	-> Sites to keep[DPSCF300931] from pop2:	868
	-> [readdata] lastread:868 posi:5759
	-> Comparing positions: 1 with 0 has:22596257
	-> Comparing positions: 2 with 0 has:22596257
	-> Only read nSites: 22596257 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300932
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300932] from pop0:	103
	-> Sites to keep[DPSCF300932] from pop1:	103
	-> Sites to keep[DPSCF300932] from pop2:	103
	-> [readdata] lastread:103 posi:5759
	-> Comparing positions: 1 with 0 has:22596360
	-> Comparing positions: 2 with 0 has:22596360
	-> Only read nSites: 22596360 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300933
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300933] from pop0:	1334
	-> Sites to keep[DPSCF300933] from pop1:	1334
	-> Sites to keep[DPSCF300933] from pop2:	1334
	-> [readdata] lastread:1334 posi:5759
	-> Comparing positions: 1 with 0 has:22597694
	-> Comparing positions: 2 with 0 has:22597694
	-> Only read nSites: 22597694 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300934
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300934' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300935
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300935' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300936
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300936] from pop0:	650
	-> Sites to keep[DPSCF300936] from pop1:	650
	-> Sites to keep[DPSCF300936] from pop2:	650
	-> [readdata] lastread:650 posi:5759
	-> Comparing positions: 1 with 0 has:22598344
	-> Comparing positions: 2 with 0 has:22598344
	-> Only read nSites: 22598344 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300937
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300937' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300938
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300938] from pop0:	632
	-> Sites to keep[DPSCF300938] from pop1:	632
	-> Sites to keep[DPSCF300938] from pop2:	632
	-> [readdata] lastread:632 posi:5759
	-> Comparing positions: 1 with 0 has:22598976
	-> Comparing positions: 2 with 0 has:22598976
	-> Only read nSites: 22598976 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300939
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300939] from pop0:	98
	-> Sites to keep[DPSCF300939] from pop1:	98
	-> Sites to keep[DPSCF300939] from pop2:	98
	-> [readdata] lastread:98 posi:5759
	-> Comparing positions: 1 with 0 has:22599074
	-> Comparing positions: 2 with 0 has:22599074
	-> Only read nSites: 22599074 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300941
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300941] from pop0:	38
	-> Sites to keep[DPSCF300941] from pop1:	38
	-> Sites to keep[DPSCF300941] from pop2:	38
	-> [readdata] lastread:38 posi:5759
	-> Comparing positions: 1 with 0 has:22599112
	-> Comparing positions: 2 with 0 has:22599112
	-> Only read nSites: 22599112 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300944
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300944' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300945
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300945] from pop0:	234
	-> Sites to keep[DPSCF300945] from pop1:	234
	-> Sites to keep[DPSCF300945] from pop2:	234
	-> [readdata] lastread:234 posi:5759
	-> Comparing positions: 1 with 0 has:22599346
	-> Comparing positions: 2 with 0 has:22599346
	-> Only read nSites: 22599346 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300946
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300946] from pop0:	25
	-> Sites to keep[DPSCF300946] from pop1:	25
	-> Sites to keep[DPSCF300946] from pop2:	25
	-> [readdata] lastread:25 posi:5759
	-> Comparing positions: 1 with 0 has:22599371
	-> Comparing positions: 2 with 0 has:22599371
	-> Only read nSites: 22599371 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300947
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300947' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300948
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300948] from pop0:	782
	-> Sites to keep[DPSCF300948] from pop1:	782
	-> Sites to keep[DPSCF300948] from pop2:	782
	-> [readdata] lastread:782 posi:5759
	-> Comparing positions: 1 with 0 has:22600153
	-> Comparing positions: 2 with 0 has:22600153
	-> Only read nSites: 22600153 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300949
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300949] from pop0:	96
	-> Sites to keep[DPSCF300949] from pop1:	96
	-> Sites to keep[DPSCF300949] from pop2:	96
	-> [readdata] lastread:96 posi:5759
	-> Comparing positions: 1 with 0 has:22600249
	-> Comparing positions: 2 with 0 has:22600249
	-> Only read nSites: 22600249 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300950
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300950' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300951
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300951] from pop0:	445
	-> Sites to keep[DPSCF300951] from pop1:	445
	-> Sites to keep[DPSCF300951] from pop2:	445
	-> [readdata] lastread:445 posi:5759
	-> Comparing positions: 1 with 0 has:22600694
	-> Comparing positions: 2 with 0 has:22600694
	-> Only read nSites: 22600694 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300952
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300952] from pop0:	931
	-> Sites to keep[DPSCF300952] from pop1:	931
	-> Sites to keep[DPSCF300952] from pop2:	931
	-> [readdata] lastread:931 posi:5759
	-> Comparing positions: 1 with 0 has:22601625
	-> Comparing positions: 2 with 0 has:22601625
	-> Only read nSites: 22601625 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300953
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300953' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300954
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300954' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300955
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300955' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300956
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300956] from pop0:	640
	-> Sites to keep[DPSCF300956] from pop1:	640
	-> Sites to keep[DPSCF300956] from pop2:	640
	-> [readdata] lastread:640 posi:5759
	-> Comparing positions: 1 with 0 has:22602265
	-> Comparing positions: 2 with 0 has:22602265
	-> Only read nSites: 22602265 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300957
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300957' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300958
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300958' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300959
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300959] from pop0:	800
	-> Sites to keep[DPSCF300959] from pop1:	800
	-> Sites to keep[DPSCF300959] from pop2:	800
	-> [readdata] lastread:800 posi:5759
	-> Comparing positions: 1 with 0 has:22603065
	-> Comparing positions: 2 with 0 has:22603065
	-> Only read nSites: 22603065 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300960
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300960' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300961
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300961' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300962
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300962] from pop0:	868
	-> Sites to keep[DPSCF300962] from pop1:	868
	-> Sites to keep[DPSCF300962] from pop2:	868
	-> [readdata] lastread:868 posi:5759
	-> Comparing positions: 1 with 0 has:22603933
	-> Comparing positions: 2 with 0 has:22603933
	-> Only read nSites: 22603933 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300963
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300963' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300964
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300964] from pop0:	527
	-> Sites to keep[DPSCF300964] from pop1:	527
	-> Sites to keep[DPSCF300964] from pop2:	527
	-> [readdata] lastread:527 posi:5759
	-> Comparing positions: 1 with 0 has:22604460
	-> Comparing positions: 2 with 0 has:22604460
	-> Only read nSites: 22604460 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300965
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300965] from pop0:	145
	-> Sites to keep[DPSCF300965] from pop1:	145
	-> Sites to keep[DPSCF300965] from pop2:	145
	-> [readdata] lastread:145 posi:5759
	-> Comparing positions: 1 with 0 has:22604605
	-> Comparing positions: 2 with 0 has:22604605
	-> Only read nSites: 22604605 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300966
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300966] from pop0:	915
	-> Sites to keep[DPSCF300966] from pop1:	915
	-> Sites to keep[DPSCF300966] from pop2:	915
	-> [readdata] lastread:915 posi:5759
	-> Comparing positions: 1 with 0 has:22605520
	-> Comparing positions: 2 with 0 has:22605520
	-> Only read nSites: 22605520 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300967
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300967] from pop0:	129
	-> Sites to keep[DPSCF300967] from pop1:	129
	-> Sites to keep[DPSCF300967] from pop2:	129
	-> [readdata] lastread:129 posi:5759
	-> Comparing positions: 1 with 0 has:22605649
	-> Comparing positions: 2 with 0 has:22605649
	-> Only read nSites: 22605649 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300968
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300968] from pop0:	213
	-> Sites to keep[DPSCF300968] from pop1:	213
	-> Sites to keep[DPSCF300968] from pop2:	213
	-> [readdata] lastread:213 posi:5759
	-> Comparing positions: 1 with 0 has:22605862
	-> Comparing positions: 2 with 0 has:22605862
	-> Only read nSites: 22605862 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300969
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300969' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300970
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300970] from pop0:	202
	-> Sites to keep[DPSCF300970] from pop1:	202
	-> Sites to keep[DPSCF300970] from pop2:	202
	-> [readdata] lastread:202 posi:5759
	-> Comparing positions: 1 with 0 has:22606064
	-> Comparing positions: 2 with 0 has:22606064
	-> Only read nSites: 22606064 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300971
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300971] from pop0:	798
	-> Sites to keep[DPSCF300971] from pop1:	798
	-> Sites to keep[DPSCF300971] from pop2:	798
	-> [readdata] lastread:798 posi:5759
	-> Comparing positions: 1 with 0 has:22606862
	-> Comparing positions: 2 with 0 has:22606862
	-> Only read nSites: 22606862 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300972
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300972] from pop0:	215
	-> Sites to keep[DPSCF300972] from pop1:	215
	-> Sites to keep[DPSCF300972] from pop2:	215
	-> [readdata] lastread:215 posi:5759
	-> Comparing positions: 1 with 0 has:22607077
	-> Comparing positions: 2 with 0 has:22607077
	-> Only read nSites: 22607077 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300973
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300973] from pop0:	665
	-> Sites to keep[DPSCF300973] from pop1:	665
	-> Sites to keep[DPSCF300973] from pop2:	665
	-> [readdata] lastread:665 posi:5759
	-> Comparing positions: 1 with 0 has:22607742
	-> Comparing positions: 2 with 0 has:22607742
	-> Only read nSites: 22607742 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300974
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300974] from pop0:	702
	-> Sites to keep[DPSCF300974] from pop1:	702
	-> Sites to keep[DPSCF300974] from pop2:	702
	-> [readdata] lastread:702 posi:5759
	-> Comparing positions: 1 with 0 has:22608444
	-> Comparing positions: 2 with 0 has:22608444
	-> Only read nSites: 22608444 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300975
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300975' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300976
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300976' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300977
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300977] from pop0:	0
	-> Sites to keep[DPSCF300977] from pop1:	0
	-> Sites to keep[DPSCF300977] from pop2:	0
	-> Only read nSites: 22608444 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300978
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300978' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300979
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300979] from pop0:	140
	-> Sites to keep[DPSCF300979] from pop1:	140
	-> Sites to keep[DPSCF300979] from pop2:	140
	-> [readdata] lastread:140 posi:5759
	-> Comparing positions: 1 with 0 has:22608584
	-> Comparing positions: 2 with 0 has:22608584
	-> Only read nSites: 22608584 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300980
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300980] from pop0:	259
	-> Sites to keep[DPSCF300980] from pop1:	259
	-> Sites to keep[DPSCF300980] from pop2:	259
	-> [readdata] lastread:259 posi:5759
	-> Comparing positions: 1 with 0 has:22608843
	-> Comparing positions: 2 with 0 has:22608843
	-> Only read nSites: 22608843 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300981
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300981' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300982
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300982' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300983
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300983' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300984
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300984' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300985
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300985] from pop0:	140
	-> Sites to keep[DPSCF300985] from pop1:	140
	-> Sites to keep[DPSCF300985] from pop2:	140
	-> [readdata] lastread:140 posi:5759
	-> Comparing positions: 1 with 0 has:22608983
	-> Comparing positions: 2 with 0 has:22608983
	-> Only read nSites: 22608983 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300986
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300986] from pop0:	335
	-> Sites to keep[DPSCF300986] from pop1:	335
	-> Sites to keep[DPSCF300986] from pop2:	335
	-> [readdata] lastread:335 posi:5759
	-> Comparing positions: 1 with 0 has:22609318
	-> Comparing positions: 2 with 0 has:22609318
	-> Only read nSites: 22609318 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300987
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300987] from pop0:	227
	-> Sites to keep[DPSCF300987] from pop1:	227
	-> Sites to keep[DPSCF300987] from pop2:	227
	-> [readdata] lastread:227 posi:5759
	-> Comparing positions: 1 with 0 has:22609545
	-> Comparing positions: 2 with 0 has:22609545
	-> Only read nSites: 22609545 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300988
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300988] from pop0:	0
	-> Sites to keep[DPSCF300988] from pop1:	0
	-> Sites to keep[DPSCF300988] from pop2:	0
	-> Only read nSites: 22609545 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300989
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300989] from pop0:	0
	-> Sites to keep[DPSCF300989] from pop1:	0
	-> Sites to keep[DPSCF300989] from pop2:	0
	-> Only read nSites: 22609545 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300990
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300990] from pop0:	47
	-> Sites to keep[DPSCF300990] from pop1:	47
	-> Sites to keep[DPSCF300990] from pop2:	47
	-> [readdata] lastread:47 posi:5759
	-> Comparing positions: 1 with 0 has:22609592
	-> Comparing positions: 2 with 0 has:22609592
	-> Only read nSites: 22609592 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300991
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300991] from pop0:	318
	-> Sites to keep[DPSCF300991] from pop1:	318
	-> Sites to keep[DPSCF300991] from pop2:	318
	-> [readdata] lastread:318 posi:5759
	-> Comparing positions: 1 with 0 has:22609910
	-> Comparing positions: 2 with 0 has:22609910
	-> Only read nSites: 22609910 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300992
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300992] from pop0:	138
	-> Sites to keep[DPSCF300992] from pop1:	138
	-> Sites to keep[DPSCF300992] from pop2:	138
	-> [readdata] lastread:138 posi:5759
	-> Comparing positions: 1 with 0 has:22610048
	-> Comparing positions: 2 with 0 has:22610048
	-> Only read nSites: 22610048 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300993
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300993' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300994
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300994] from pop0:	469
	-> Sites to keep[DPSCF300994] from pop1:	469
	-> Sites to keep[DPSCF300994] from pop2:	469
	-> [readdata] lastread:469 posi:5759
	-> Comparing positions: 1 with 0 has:22610517
	-> Comparing positions: 2 with 0 has:22610517
	-> Only read nSites: 22610517 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF300996
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF300996' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF300998
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF300998] from pop0:	808
	-> Sites to keep[DPSCF300998] from pop1:	808
	-> Sites to keep[DPSCF300998] from pop2:	808
	-> [readdata] lastread:808 posi:5759
	-> Comparing positions: 1 with 0 has:22611325
	-> Comparing positions: 2 with 0 has:22611325
	-> Only read nSites: 22611325 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301000
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301000] from pop0:	335
	-> Sites to keep[DPSCF301000] from pop1:	335
	-> Sites to keep[DPSCF301000] from pop2:	335
	-> [readdata] lastread:335 posi:5759
	-> Comparing positions: 1 with 0 has:22611660
	-> Comparing positions: 2 with 0 has:22611660
	-> Only read nSites: 22611660 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301001
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301001] from pop0:	213
	-> Sites to keep[DPSCF301001] from pop1:	213
	-> Sites to keep[DPSCF301001] from pop2:	213
	-> [readdata] lastread:213 posi:5759
	-> Comparing positions: 1 with 0 has:22611873
	-> Comparing positions: 2 with 0 has:22611873
	-> Only read nSites: 22611873 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301002
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301002' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301005
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301005' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301006
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301006] from pop0:	206
	-> Sites to keep[DPSCF301006] from pop1:	206
	-> Sites to keep[DPSCF301006] from pop2:	206
	-> [readdata] lastread:206 posi:5759
	-> Comparing positions: 1 with 0 has:22612079
	-> Comparing positions: 2 with 0 has:22612079
	-> Only read nSites: 22612079 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301007
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301007] from pop0:	154
	-> Sites to keep[DPSCF301007] from pop1:	154
	-> Sites to keep[DPSCF301007] from pop2:	154
	-> [readdata] lastread:154 posi:5759
	-> Comparing positions: 1 with 0 has:22612233
	-> Comparing positions: 2 with 0 has:22612233
	-> Only read nSites: 22612233 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301008
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301008' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301009
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301009' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301011
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301011] from pop0:	269
	-> Sites to keep[DPSCF301011] from pop1:	269
	-> Sites to keep[DPSCF301011] from pop2:	269
	-> [readdata] lastread:269 posi:5759
	-> Comparing positions: 1 with 0 has:22612502
	-> Comparing positions: 2 with 0 has:22612502
	-> Only read nSites: 22612502 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301012
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301012' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301013
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301013] from pop0:	215
	-> Sites to keep[DPSCF301013] from pop1:	215
	-> Sites to keep[DPSCF301013] from pop2:	215
	-> [readdata] lastread:215 posi:5759
	-> Comparing positions: 1 with 0 has:22612717
	-> Comparing positions: 2 with 0 has:22612717
	-> Only read nSites: 22612717 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301015
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301015] from pop0:	111
	-> Sites to keep[DPSCF301015] from pop1:	111
	-> Sites to keep[DPSCF301015] from pop2:	111
	-> [readdata] lastread:111 posi:5759
	-> Comparing positions: 1 with 0 has:22612828
	-> Comparing positions: 2 with 0 has:22612828
	-> Only read nSites: 22612828 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301016
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301016' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301017
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301017' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301018
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301018' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301019
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301019' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301021
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301021' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301022
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301022] from pop0:	259
	-> Sites to keep[DPSCF301022] from pop1:	259
	-> Sites to keep[DPSCF301022] from pop2:	259
	-> [readdata] lastread:259 posi:5759
	-> Comparing positions: 1 with 0 has:22613087
	-> Comparing positions: 2 with 0 has:22613087
	-> Only read nSites: 22613087 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301023
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301023] from pop0:	218
	-> Sites to keep[DPSCF301023] from pop1:	218
	-> Sites to keep[DPSCF301023] from pop2:	218
	-> [readdata] lastread:218 posi:5759
	-> Comparing positions: 1 with 0 has:22613305
	-> Comparing positions: 2 with 0 has:22613305
	-> Only read nSites: 22613305 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301024
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301024' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301025
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301025] from pop0:	0
	-> Sites to keep[DPSCF301025] from pop1:	0
	-> Sites to keep[DPSCF301025] from pop2:	0
	-> Only read nSites: 22613305 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301029
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301029] from pop0:	31
	-> Sites to keep[DPSCF301029] from pop1:	31
	-> Sites to keep[DPSCF301029] from pop2:	31
	-> [readdata] lastread:31 posi:5759
	-> Comparing positions: 1 with 0 has:22613336
	-> Comparing positions: 2 with 0 has:22613336
	-> Only read nSites: 22613336 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301030
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301030' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301031
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301031' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301032
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301032' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301033
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301033' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301034
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301034] from pop0:	518
	-> Sites to keep[DPSCF301034] from pop1:	518
	-> Sites to keep[DPSCF301034] from pop2:	518
	-> [readdata] lastread:518 posi:5759
	-> Comparing positions: 1 with 0 has:22613854
	-> Comparing positions: 2 with 0 has:22613854
	-> Only read nSites: 22613854 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301035
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301035' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301039
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301039' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301042
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301042] from pop0:	281
	-> Sites to keep[DPSCF301042] from pop1:	281
	-> Sites to keep[DPSCF301042] from pop2:	281
	-> [readdata] lastread:281 posi:5759
	-> Comparing positions: 1 with 0 has:22614135
	-> Comparing positions: 2 with 0 has:22614135
	-> Only read nSites: 22614135 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301043
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301043] from pop0:	215
	-> Sites to keep[DPSCF301043] from pop1:	215
	-> Sites to keep[DPSCF301043] from pop2:	215
	-> [readdata] lastread:215 posi:5759
	-> Comparing positions: 1 with 0 has:22614350
	-> Comparing positions: 2 with 0 has:22614350
	-> Only read nSites: 22614350 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301045
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301045] from pop0:	0
	-> Sites to keep[DPSCF301045] from pop1:	0
	-> Sites to keep[DPSCF301045] from pop2:	0
	-> Only read nSites: 22614350 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301046
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301046' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301047
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301047' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301050
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301050] from pop0:	135
	-> Sites to keep[DPSCF301050] from pop1:	135
	-> Sites to keep[DPSCF301050] from pop2:	135
	-> [readdata] lastread:135 posi:5759
	-> Comparing positions: 1 with 0 has:22614485
	-> Comparing positions: 2 with 0 has:22614485
	-> Only read nSites: 22614485 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301051
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301051] from pop0:	891
	-> Sites to keep[DPSCF301051] from pop1:	891
	-> Sites to keep[DPSCF301051] from pop2:	891
	-> [readdata] lastread:891 posi:5759
	-> Comparing positions: 1 with 0 has:22615376
	-> Comparing positions: 2 with 0 has:22615376
	-> Only read nSites: 22615376 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301052
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301052] from pop0:	1090
	-> Sites to keep[DPSCF301052] from pop1:	1090
	-> Sites to keep[DPSCF301052] from pop2:	1090
	-> [readdata] lastread:1090 posi:5759
	-> Comparing positions: 1 with 0 has:22616466
	-> Comparing positions: 2 with 0 has:22616466
	-> Only read nSites: 22616466 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301054
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301054' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301056
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301056] from pop0:	343
	-> Sites to keep[DPSCF301056] from pop1:	343
	-> Sites to keep[DPSCF301056] from pop2:	343
	-> [readdata] lastread:343 posi:5759
	-> Comparing positions: 1 with 0 has:22616809
	-> Comparing positions: 2 with 0 has:22616809
	-> Only read nSites: 22616809 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301057
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301057' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301058
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301058' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301059
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301059] from pop0:	227
	-> Sites to keep[DPSCF301059] from pop1:	227
	-> Sites to keep[DPSCF301059] from pop2:	227
	-> [readdata] lastread:227 posi:5759
	-> Comparing positions: 1 with 0 has:22617036
	-> Comparing positions: 2 with 0 has:22617036
	-> Only read nSites: 22617036 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301060
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301060' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301062
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301062] from pop0:	432
	-> Sites to keep[DPSCF301062] from pop1:	432
	-> Sites to keep[DPSCF301062] from pop2:	432
	-> [readdata] lastread:432 posi:5759
	-> Comparing positions: 1 with 0 has:22617468
	-> Comparing positions: 2 with 0 has:22617468
	-> Only read nSites: 22617468 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301064
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301064' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301065
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301065' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301066
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301066] from pop0:	425
	-> Sites to keep[DPSCF301066] from pop1:	425
	-> Sites to keep[DPSCF301066] from pop2:	425
	-> [readdata] lastread:425 posi:5759
	-> Comparing positions: 1 with 0 has:22617893
	-> Comparing positions: 2 with 0 has:22617893
	-> Only read nSites: 22617893 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301067
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301067] from pop0:	0
	-> Sites to keep[DPSCF301067] from pop1:	0
	-> Sites to keep[DPSCF301067] from pop2:	0
	-> Only read nSites: 22617893 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301068
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301068] from pop0:	239
	-> Sites to keep[DPSCF301068] from pop1:	239
	-> Sites to keep[DPSCF301068] from pop2:	239
	-> [readdata] lastread:239 posi:5759
	-> Comparing positions: 1 with 0 has:22618132
	-> Comparing positions: 2 with 0 has:22618132
	-> Only read nSites: 22618132 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301070
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301070] from pop0:	241
	-> Sites to keep[DPSCF301070] from pop1:	241
	-> Sites to keep[DPSCF301070] from pop2:	241
	-> [readdata] lastread:241 posi:5759
	-> Comparing positions: 1 with 0 has:22618373
	-> Comparing positions: 2 with 0 has:22618373
	-> Only read nSites: 22618373 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301071
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301071] from pop0:	601
	-> Sites to keep[DPSCF301071] from pop1:	601
	-> Sites to keep[DPSCF301071] from pop2:	601
	-> [readdata] lastread:601 posi:5759
	-> Comparing positions: 1 with 0 has:22618974
	-> Comparing positions: 2 with 0 has:22618974
	-> Only read nSites: 22618974 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301072
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301072' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301073
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301073' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301074
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301074] from pop0:	97
	-> Sites to keep[DPSCF301074] from pop1:	97
	-> Sites to keep[DPSCF301074] from pop2:	97
	-> [readdata] lastread:97 posi:5759
	-> Comparing positions: 1 with 0 has:22619071
	-> Comparing positions: 2 with 0 has:22619071
	-> Only read nSites: 22619071 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301075
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301075' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301076
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301076] from pop0:	135
	-> Sites to keep[DPSCF301076] from pop1:	135
	-> Sites to keep[DPSCF301076] from pop2:	135
	-> [readdata] lastread:135 posi:5759
	-> Comparing positions: 1 with 0 has:22619206
	-> Comparing positions: 2 with 0 has:22619206
	-> Only read nSites: 22619206 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301078
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301078] from pop0:	934
	-> Sites to keep[DPSCF301078] from pop1:	934
	-> Sites to keep[DPSCF301078] from pop2:	934
	-> [readdata] lastread:934 posi:5759
	-> Comparing positions: 1 with 0 has:22620140
	-> Comparing positions: 2 with 0 has:22620140
	-> Only read nSites: 22620140 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301079
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301079' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301080
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301080' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301081
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301081] from pop0:	460
	-> Sites to keep[DPSCF301081] from pop1:	460
	-> Sites to keep[DPSCF301081] from pop2:	460
	-> [readdata] lastread:460 posi:5759
	-> Comparing positions: 1 with 0 has:22620600
	-> Comparing positions: 2 with 0 has:22620600
	-> Only read nSites: 22620600 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301083
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301083] from pop0:	253
	-> Sites to keep[DPSCF301083] from pop1:	253
	-> Sites to keep[DPSCF301083] from pop2:	253
	-> [readdata] lastread:253 posi:5759
	-> Comparing positions: 1 with 0 has:22620853
	-> Comparing positions: 2 with 0 has:22620853
	-> Only read nSites: 22620853 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301084
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301084] from pop0:	0
	-> Sites to keep[DPSCF301084] from pop1:	0
	-> Sites to keep[DPSCF301084] from pop2:	0
	-> Only read nSites: 22620853 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301086
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301086] from pop0:	258
	-> Sites to keep[DPSCF301086] from pop1:	258
	-> Sites to keep[DPSCF301086] from pop2:	258
	-> [readdata] lastread:258 posi:5759
	-> Comparing positions: 1 with 0 has:22621111
	-> Comparing positions: 2 with 0 has:22621111
	-> Only read nSites: 22621111 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301087
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301087] from pop0:	154
	-> Sites to keep[DPSCF301087] from pop1:	154
	-> Sites to keep[DPSCF301087] from pop2:	154
	-> [readdata] lastread:154 posi:5759
	-> Comparing positions: 1 with 0 has:22621265
	-> Comparing positions: 2 with 0 has:22621265
	-> Only read nSites: 22621265 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301088
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301088] from pop0:	967
	-> Sites to keep[DPSCF301088] from pop1:	967
	-> Sites to keep[DPSCF301088] from pop2:	967
	-> [readdata] lastread:967 posi:5759
	-> Comparing positions: 1 with 0 has:22622232
	-> Comparing positions: 2 with 0 has:22622232
	-> Only read nSites: 22622232 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301089
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301089] from pop0:	0
	-> Sites to keep[DPSCF301089] from pop1:	0
	-> Sites to keep[DPSCF301089] from pop2:	0
	-> Only read nSites: 22622232 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301093
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301093] from pop0:	786
	-> Sites to keep[DPSCF301093] from pop1:	786
	-> Sites to keep[DPSCF301093] from pop2:	786
	-> [readdata] lastread:786 posi:5759
	-> Comparing positions: 1 with 0 has:22623018
	-> Comparing positions: 2 with 0 has:22623018
	-> Only read nSites: 22623018 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301094
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301094' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301096
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301096] from pop0:	278
	-> Sites to keep[DPSCF301096] from pop1:	278
	-> Sites to keep[DPSCF301096] from pop2:	278
	-> [readdata] lastread:278 posi:5759
	-> Comparing positions: 1 with 0 has:22623296
	-> Comparing positions: 2 with 0 has:22623296
	-> Only read nSites: 22623296 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301097
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301097] from pop0:	105
	-> Sites to keep[DPSCF301097] from pop1:	105
	-> Sites to keep[DPSCF301097] from pop2:	105
	-> [readdata] lastread:105 posi:5759
	-> Comparing positions: 1 with 0 has:22623401
	-> Comparing positions: 2 with 0 has:22623401
	-> Only read nSites: 22623401 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301098
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301098' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301101
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301101' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301102
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301102' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301103
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301103' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301104
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301104' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301105
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301105] from pop0:	140
	-> Sites to keep[DPSCF301105] from pop1:	140
	-> Sites to keep[DPSCF301105] from pop2:	140
	-> [readdata] lastread:140 posi:5759
	-> Comparing positions: 1 with 0 has:22623541
	-> Comparing positions: 2 with 0 has:22623541
	-> Only read nSites: 22623541 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301106
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301106] from pop0:	228
	-> Sites to keep[DPSCF301106] from pop1:	228
	-> Sites to keep[DPSCF301106] from pop2:	228
	-> [readdata] lastread:228 posi:5759
	-> Comparing positions: 1 with 0 has:22623769
	-> Comparing positions: 2 with 0 has:22623769
	-> Only read nSites: 22623769 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301107
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301107' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301108
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301108' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301110
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301110' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301111
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301111] from pop0:	175
	-> Sites to keep[DPSCF301111] from pop1:	175
	-> Sites to keep[DPSCF301111] from pop2:	175
	-> [readdata] lastread:175 posi:5759
	-> Comparing positions: 1 with 0 has:22623944
	-> Comparing positions: 2 with 0 has:22623944
	-> Only read nSites: 22623944 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301113
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301113' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301114
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301114' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301116
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301116' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301117
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301117' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301119
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301119] from pop0:	387
	-> Sites to keep[DPSCF301119] from pop1:	387
	-> Sites to keep[DPSCF301119] from pop2:	387
	-> [readdata] lastread:387 posi:5759
	-> Comparing positions: 1 with 0 has:22624331
	-> Comparing positions: 2 with 0 has:22624331
	-> Only read nSites: 22624331 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301122
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301122' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301123
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301123' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301124
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301124' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301125
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301125' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301128
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301128' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301129
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301129] from pop0:	93
	-> Sites to keep[DPSCF301129] from pop1:	93
	-> Sites to keep[DPSCF301129] from pop2:	93
	-> [readdata] lastread:93 posi:5759
	-> Comparing positions: 1 with 0 has:22624424
	-> Comparing positions: 2 with 0 has:22624424
	-> Only read nSites: 22624424 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301130
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301130' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301131
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301131] from pop0:	0
	-> Sites to keep[DPSCF301131] from pop1:	0
	-> Sites to keep[DPSCF301131] from pop2:	0
	-> Only read nSites: 22624424 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301132
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301132] from pop0:	895
	-> Sites to keep[DPSCF301132] from pop1:	895
	-> Sites to keep[DPSCF301132] from pop2:	895
	-> [readdata] lastread:895 posi:5759
	-> Comparing positions: 1 with 0 has:22625319
	-> Comparing positions: 2 with 0 has:22625319
	-> Only read nSites: 22625319 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301133
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301133' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301134
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301134] from pop0:	979
	-> Sites to keep[DPSCF301134] from pop1:	979
	-> Sites to keep[DPSCF301134] from pop2:	979
	-> [readdata] lastread:979 posi:5759
	-> Comparing positions: 1 with 0 has:22626298
	-> Comparing positions: 2 with 0 has:22626298
	-> Only read nSites: 22626298 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301135
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301135] from pop0:	708
	-> Sites to keep[DPSCF301135] from pop1:	708
	-> Sites to keep[DPSCF301135] from pop2:	708
	-> [readdata] lastread:708 posi:5759
	-> Comparing positions: 1 with 0 has:22627006
	-> Comparing positions: 2 with 0 has:22627006
	-> Only read nSites: 22627006 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301137
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301137] from pop0:	247
	-> Sites to keep[DPSCF301137] from pop1:	247
	-> Sites to keep[DPSCF301137] from pop2:	247
	-> [readdata] lastread:247 posi:5759
	-> Comparing positions: 1 with 0 has:22627253
	-> Comparing positions: 2 with 0 has:22627253
	-> Only read nSites: 22627253 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301138
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301138] from pop0:	948
	-> Sites to keep[DPSCF301138] from pop1:	948
	-> Sites to keep[DPSCF301138] from pop2:	948
	-> [readdata] lastread:948 posi:5759
	-> Comparing positions: 1 with 0 has:22628201
	-> Comparing positions: 2 with 0 has:22628201
	-> Only read nSites: 22628201 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301140
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301140] from pop0:	134
	-> Sites to keep[DPSCF301140] from pop1:	134
	-> Sites to keep[DPSCF301140] from pop2:	134
	-> [readdata] lastread:134 posi:5759
	-> Comparing positions: 1 with 0 has:22628335
	-> Comparing positions: 2 with 0 has:22628335
	-> Only read nSites: 22628335 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301141
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301141' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301142
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301142' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301143
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301143' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301145
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301145' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301146
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301146] from pop0:	0
	-> Sites to keep[DPSCF301146] from pop1:	0
	-> Sites to keep[DPSCF301146] from pop2:	0
	-> Only read nSites: 22628335 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301147
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301147] from pop0:	119
	-> Sites to keep[DPSCF301147] from pop1:	119
	-> Sites to keep[DPSCF301147] from pop2:	119
	-> [readdata] lastread:119 posi:5759
	-> Comparing positions: 1 with 0 has:22628454
	-> Comparing positions: 2 with 0 has:22628454
	-> Only read nSites: 22628454 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301148
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301148] from pop0:	1073
	-> Sites to keep[DPSCF301148] from pop1:	1073
	-> Sites to keep[DPSCF301148] from pop2:	1073
	-> [readdata] lastread:1073 posi:5759
	-> Comparing positions: 1 with 0 has:22629527
	-> Comparing positions: 2 with 0 has:22629527
	-> Only read nSites: 22629527 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301149
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301149' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301150
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301150] from pop0:	154
	-> Sites to keep[DPSCF301150] from pop1:	154
	-> Sites to keep[DPSCF301150] from pop2:	154
	-> [readdata] lastread:154 posi:5759
	-> Comparing positions: 1 with 0 has:22629681
	-> Comparing positions: 2 with 0 has:22629681
	-> Only read nSites: 22629681 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301151
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301151' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301152
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301152] from pop0:	545
	-> Sites to keep[DPSCF301152] from pop1:	545
	-> Sites to keep[DPSCF301152] from pop2:	545
	-> [readdata] lastread:545 posi:5759
	-> Comparing positions: 1 with 0 has:22630226
	-> Comparing positions: 2 with 0 has:22630226
	-> Only read nSites: 22630226 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301153
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301153' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301154
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301154' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301156
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301156] from pop0:	261
	-> Sites to keep[DPSCF301156] from pop1:	261
	-> Sites to keep[DPSCF301156] from pop2:	261
	-> [readdata] lastread:261 posi:5759
	-> Comparing positions: 1 with 0 has:22630487
	-> Comparing positions: 2 with 0 has:22630487
	-> Only read nSites: 22630487 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301157
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301157' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301158
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301158' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301159
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301159] from pop0:	233
	-> Sites to keep[DPSCF301159] from pop1:	233
	-> Sites to keep[DPSCF301159] from pop2:	233
	-> [readdata] lastread:233 posi:5759
	-> Comparing positions: 1 with 0 has:22630720
	-> Comparing positions: 2 with 0 has:22630720
	-> Only read nSites: 22630720 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301160
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301160] from pop0:	353
	-> Sites to keep[DPSCF301160] from pop1:	353
	-> Sites to keep[DPSCF301160] from pop2:	353
	-> [readdata] lastread:353 posi:5759
	-> Comparing positions: 1 with 0 has:22631073
	-> Comparing positions: 2 with 0 has:22631073
	-> Only read nSites: 22631073 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301161
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301161' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301162
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301162' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301163
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301163] from pop0:	275
	-> Sites to keep[DPSCF301163] from pop1:	275
	-> Sites to keep[DPSCF301163] from pop2:	275
	-> [readdata] lastread:275 posi:5759
	-> Comparing positions: 1 with 0 has:22631348
	-> Comparing positions: 2 with 0 has:22631348
	-> Only read nSites: 22631348 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301164
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301164' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301166
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301166' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301167
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301167' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301168
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301168] from pop0:	114
	-> Sites to keep[DPSCF301168] from pop1:	114
	-> Sites to keep[DPSCF301168] from pop2:	114
	-> [readdata] lastread:114 posi:5759
	-> Comparing positions: 1 with 0 has:22631462
	-> Comparing positions: 2 with 0 has:22631462
	-> Only read nSites: 22631462 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301169
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301169' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301170
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301170] from pop0:	526
	-> Sites to keep[DPSCF301170] from pop1:	526
	-> Sites to keep[DPSCF301170] from pop2:	526
	-> [readdata] lastread:526 posi:5759
	-> Comparing positions: 1 with 0 has:22631988
	-> Comparing positions: 2 with 0 has:22631988
	-> Only read nSites: 22631988 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301171
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301171' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301172
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301172' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301173
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301173] from pop0:	102
	-> Sites to keep[DPSCF301173] from pop1:	102
	-> Sites to keep[DPSCF301173] from pop2:	102
	-> [readdata] lastread:102 posi:5759
	-> Comparing positions: 1 with 0 has:22632090
	-> Comparing positions: 2 with 0 has:22632090
	-> Only read nSites: 22632090 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301174
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301174] from pop0:	384
	-> Sites to keep[DPSCF301174] from pop1:	384
	-> Sites to keep[DPSCF301174] from pop2:	384
	-> [readdata] lastread:384 posi:5759
	-> Comparing positions: 1 with 0 has:22632474
	-> Comparing positions: 2 with 0 has:22632474
	-> Only read nSites: 22632474 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301175
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301175] from pop0:	288
	-> Sites to keep[DPSCF301175] from pop1:	288
	-> Sites to keep[DPSCF301175] from pop2:	288
	-> [readdata] lastread:288 posi:5759
	-> Comparing positions: 1 with 0 has:22632762
	-> Comparing positions: 2 with 0 has:22632762
	-> Only read nSites: 22632762 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301176
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301176] from pop0:	454
	-> Sites to keep[DPSCF301176] from pop1:	454
	-> Sites to keep[DPSCF301176] from pop2:	454
	-> [readdata] lastread:454 posi:5759
	-> Comparing positions: 1 with 0 has:22633216
	-> Comparing positions: 2 with 0 has:22633216
	-> Only read nSites: 22633216 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301177
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301177] from pop0:	422
	-> Sites to keep[DPSCF301177] from pop1:	422
	-> Sites to keep[DPSCF301177] from pop2:	422
	-> [readdata] lastread:422 posi:5759
	-> Comparing positions: 1 with 0 has:22633638
	-> Comparing positions: 2 with 0 has:22633638
	-> Only read nSites: 22633638 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301179
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301179' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301180
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301180] from pop0:	65
	-> Sites to keep[DPSCF301180] from pop1:	65
	-> Sites to keep[DPSCF301180] from pop2:	65
	-> [readdata] lastread:65 posi:5759
	-> Comparing positions: 1 with 0 has:22633703
	-> Comparing positions: 2 with 0 has:22633703
	-> Only read nSites: 22633703 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301181
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301181] from pop0:	0
	-> Sites to keep[DPSCF301181] from pop1:	0
	-> Sites to keep[DPSCF301181] from pop2:	0
	-> Only read nSites: 22633703 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301182
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301182] from pop0:	16
	-> Sites to keep[DPSCF301182] from pop1:	16
	-> Sites to keep[DPSCF301182] from pop2:	16
	-> [readdata] lastread:16 posi:5759
	-> Comparing positions: 1 with 0 has:22633719
	-> Comparing positions: 2 with 0 has:22633719
	-> Only read nSites: 22633719 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301183
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301183' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301184
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301184' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301187
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301187' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301188
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301188] from pop0:	3
	-> Sites to keep[DPSCF301188] from pop1:	3
	-> Sites to keep[DPSCF301188] from pop2:	3
	-> [readdata] lastread:3 posi:5759
	-> Comparing positions: 1 with 0 has:22633722
	-> Comparing positions: 2 with 0 has:22633722
	-> Only read nSites: 22633722 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301189
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301189] from pop0:	819
	-> Sites to keep[DPSCF301189] from pop1:	819
	-> Sites to keep[DPSCF301189] from pop2:	819
	-> [readdata] lastread:819 posi:5759
	-> Comparing positions: 1 with 0 has:22634541
	-> Comparing positions: 2 with 0 has:22634541
	-> Only read nSites: 22634541 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301190
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301190' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301191
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301191] from pop0:	166
	-> Sites to keep[DPSCF301191] from pop1:	166
	-> Sites to keep[DPSCF301191] from pop2:	166
	-> [readdata] lastread:166 posi:5759
	-> Comparing positions: 1 with 0 has:22634707
	-> Comparing positions: 2 with 0 has:22634707
	-> Only read nSites: 22634707 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301194
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301194' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301195
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301195] from pop0:	190
	-> Sites to keep[DPSCF301195] from pop1:	190
	-> Sites to keep[DPSCF301195] from pop2:	190
	-> [readdata] lastread:190 posi:5759
	-> Comparing positions: 1 with 0 has:22634897
	-> Comparing positions: 2 with 0 has:22634897
	-> Only read nSites: 22634897 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301196
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301196] from pop0:	171
	-> Sites to keep[DPSCF301196] from pop1:	171
	-> Sites to keep[DPSCF301196] from pop2:	171
	-> [readdata] lastread:171 posi:5759
	-> Comparing positions: 1 with 0 has:22635068
	-> Comparing positions: 2 with 0 has:22635068
	-> Only read nSites: 22635068 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301197
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301197] from pop0:	157
	-> Sites to keep[DPSCF301197] from pop1:	157
	-> Sites to keep[DPSCF301197] from pop2:	157
	-> [readdata] lastread:157 posi:5759
	-> Comparing positions: 1 with 0 has:22635225
	-> Comparing positions: 2 with 0 has:22635225
	-> Only read nSites: 22635225 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301198
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301198] from pop0:	840
	-> Sites to keep[DPSCF301198] from pop1:	840
	-> Sites to keep[DPSCF301198] from pop2:	840
	-> [readdata] lastread:840 posi:5759
	-> Comparing positions: 1 with 0 has:22636065
	-> Comparing positions: 2 with 0 has:22636065
	-> Only read nSites: 22636065 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301199
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301199] from pop0:	112
	-> Sites to keep[DPSCF301199] from pop1:	112
	-> Sites to keep[DPSCF301199] from pop2:	112
	-> [readdata] lastread:112 posi:5759
	-> Comparing positions: 1 with 0 has:22636177
	-> Comparing positions: 2 with 0 has:22636177
	-> Only read nSites: 22636177 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301201
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301201' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301202
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301202] from pop0:	344
	-> Sites to keep[DPSCF301202] from pop1:	344
	-> Sites to keep[DPSCF301202] from pop2:	344
	-> [readdata] lastread:344 posi:5759
	-> Comparing positions: 1 with 0 has:22636521
	-> Comparing positions: 2 with 0 has:22636521
	-> Only read nSites: 22636521 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301203
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301203' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301204
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301204' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301207
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301207] from pop0:	0
	-> Sites to keep[DPSCF301207] from pop1:	0
	-> Sites to keep[DPSCF301207] from pop2:	0
	-> Only read nSites: 22636521 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301208
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301208' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301209
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301209' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301211
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301211' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301212
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301212] from pop0:	183
	-> Sites to keep[DPSCF301212] from pop1:	183
	-> Sites to keep[DPSCF301212] from pop2:	183
	-> [readdata] lastread:183 posi:5759
	-> Comparing positions: 1 with 0 has:22636704
	-> Comparing positions: 2 with 0 has:22636704
	-> Only read nSites: 22636704 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301213
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301213' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301214
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301214] from pop0:	319
	-> Sites to keep[DPSCF301214] from pop1:	319
	-> Sites to keep[DPSCF301214] from pop2:	319
	-> [readdata] lastread:319 posi:5759
	-> Comparing positions: 1 with 0 has:22637023
	-> Comparing positions: 2 with 0 has:22637023
	-> Only read nSites: 22637023 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301219
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301219' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301222
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301222' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301223
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301223] from pop0:	330
	-> Sites to keep[DPSCF301223] from pop1:	330
	-> Sites to keep[DPSCF301223] from pop2:	330
	-> [readdata] lastread:330 posi:5759
	-> Comparing positions: 1 with 0 has:22637353
	-> Comparing positions: 2 with 0 has:22637353
	-> Only read nSites: 22637353 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301224
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301224] from pop0:	170
	-> Sites to keep[DPSCF301224] from pop1:	170
	-> Sites to keep[DPSCF301224] from pop2:	170
	-> [readdata] lastread:170 posi:5759
	-> Comparing positions: 1 with 0 has:22637523
	-> Comparing positions: 2 with 0 has:22637523
	-> Only read nSites: 22637523 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301225
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301225] from pop0:	211
	-> Sites to keep[DPSCF301225] from pop1:	211
	-> Sites to keep[DPSCF301225] from pop2:	211
	-> [readdata] lastread:211 posi:5759
	-> Comparing positions: 1 with 0 has:22637734
	-> Comparing positions: 2 with 0 has:22637734
	-> Only read nSites: 22637734 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301226
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301226' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301227
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301227' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301228
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301228' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301229
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301229] from pop0:	558
	-> Sites to keep[DPSCF301229] from pop1:	558
	-> Sites to keep[DPSCF301229] from pop2:	558
	-> [readdata] lastread:558 posi:5759
	-> Comparing positions: 1 with 0 has:22638292
	-> Comparing positions: 2 with 0 has:22638292
	-> Only read nSites: 22638292 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301231
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301231] from pop0:	761
	-> Sites to keep[DPSCF301231] from pop1:	761
	-> Sites to keep[DPSCF301231] from pop2:	761
	-> [readdata] lastread:761 posi:5759
	-> Comparing positions: 1 with 0 has:22639053
	-> Comparing positions: 2 with 0 has:22639053
	-> Only read nSites: 22639053 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301232
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301232] from pop0:	726
	-> Sites to keep[DPSCF301232] from pop1:	726
	-> Sites to keep[DPSCF301232] from pop2:	726
	-> [readdata] lastread:726 posi:5759
	-> Comparing positions: 1 with 0 has:22639779
	-> Comparing positions: 2 with 0 has:22639779
	-> Only read nSites: 22639779 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301233
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301233] from pop0:	92
	-> Sites to keep[DPSCF301233] from pop1:	92
	-> Sites to keep[DPSCF301233] from pop2:	92
	-> [readdata] lastread:92 posi:5759
	-> Comparing positions: 1 with 0 has:22639871
	-> Comparing positions: 2 with 0 has:22639871
	-> Only read nSites: 22639871 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301234
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301234] from pop0:	191
	-> Sites to keep[DPSCF301234] from pop1:	191
	-> Sites to keep[DPSCF301234] from pop2:	191
	-> [readdata] lastread:191 posi:5759
	-> Comparing positions: 1 with 0 has:22640062
	-> Comparing positions: 2 with 0 has:22640062
	-> Only read nSites: 22640062 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301235
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301235] from pop0:	853
	-> Sites to keep[DPSCF301235] from pop1:	853
	-> Sites to keep[DPSCF301235] from pop2:	853
	-> [readdata] lastread:853 posi:5759
	-> Comparing positions: 1 with 0 has:22640915
	-> Comparing positions: 2 with 0 has:22640915
	-> Only read nSites: 22640915 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301237
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301237' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301239
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301239] from pop0:	408
	-> Sites to keep[DPSCF301239] from pop1:	408
	-> Sites to keep[DPSCF301239] from pop2:	408
	-> [readdata] lastread:408 posi:5759
	-> Comparing positions: 1 with 0 has:22641323
	-> Comparing positions: 2 with 0 has:22641323
	-> Only read nSites: 22641323 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301240
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301240] from pop0:	426
	-> Sites to keep[DPSCF301240] from pop1:	426
	-> Sites to keep[DPSCF301240] from pop2:	426
	-> [readdata] lastread:426 posi:5759
	-> Comparing positions: 1 with 0 has:22641749
	-> Comparing positions: 2 with 0 has:22641749
	-> Only read nSites: 22641749 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301242
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301242' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301243
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301243] from pop0:	766
	-> Sites to keep[DPSCF301243] from pop1:	766
	-> Sites to keep[DPSCF301243] from pop2:	766
	-> [readdata] lastread:766 posi:5759
	-> Comparing positions: 1 with 0 has:22642515
	-> Comparing positions: 2 with 0 has:22642515
	-> Only read nSites: 22642515 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301244
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301244] from pop0:	43
	-> Sites to keep[DPSCF301244] from pop1:	43
	-> Sites to keep[DPSCF301244] from pop2:	43
	-> [readdata] lastread:43 posi:5759
	-> Comparing positions: 1 with 0 has:22642558
	-> Comparing positions: 2 with 0 has:22642558
	-> Only read nSites: 22642558 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301246
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301246] from pop0:	869
	-> Sites to keep[DPSCF301246] from pop1:	869
	-> Sites to keep[DPSCF301246] from pop2:	869
	-> [readdata] lastread:869 posi:5759
	-> Comparing positions: 1 with 0 has:22643427
	-> Comparing positions: 2 with 0 has:22643427
	-> Only read nSites: 22643427 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301249
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301249' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301251
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301251' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301252
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301252' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301253
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301253' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301254
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301254' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301255
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301255] from pop0:	680
	-> Sites to keep[DPSCF301255] from pop1:	680
	-> Sites to keep[DPSCF301255] from pop2:	680
	-> [readdata] lastread:680 posi:5759
	-> Comparing positions: 1 with 0 has:22644107
	-> Comparing positions: 2 with 0 has:22644107
	-> Only read nSites: 22644107 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301256
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301256] from pop0:	135
	-> Sites to keep[DPSCF301256] from pop1:	135
	-> Sites to keep[DPSCF301256] from pop2:	135
	-> [readdata] lastread:135 posi:5759
	-> Comparing positions: 1 with 0 has:22644242
	-> Comparing positions: 2 with 0 has:22644242
	-> Only read nSites: 22644242 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301257
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301257' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301258
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301258' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301262
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301262' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301263
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301263] from pop0:	813
	-> Sites to keep[DPSCF301263] from pop1:	813
	-> Sites to keep[DPSCF301263] from pop2:	813
	-> [readdata] lastread:813 posi:5759
	-> Comparing positions: 1 with 0 has:22645055
	-> Comparing positions: 2 with 0 has:22645055
	-> Only read nSites: 22645055 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301264
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301264' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301270
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301270] from pop0:	384
	-> Sites to keep[DPSCF301270] from pop1:	384
	-> Sites to keep[DPSCF301270] from pop2:	384
	-> [readdata] lastread:384 posi:5759
	-> Comparing positions: 1 with 0 has:22645439
	-> Comparing positions: 2 with 0 has:22645439
	-> Only read nSites: 22645439 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301271
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301271' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301272
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301272] from pop0:	314
	-> Sites to keep[DPSCF301272] from pop1:	314
	-> Sites to keep[DPSCF301272] from pop2:	314
	-> [readdata] lastread:314 posi:5759
	-> Comparing positions: 1 with 0 has:22645753
	-> Comparing positions: 2 with 0 has:22645753
	-> Only read nSites: 22645753 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301275
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301275' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301276
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301276' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301277
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301277' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301278
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301278' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301279
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301279' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301280
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301280' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301282
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301282' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301283
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301283] from pop0:	345
	-> Sites to keep[DPSCF301283] from pop1:	345
	-> Sites to keep[DPSCF301283] from pop2:	345
	-> [readdata] lastread:345 posi:5759
	-> Comparing positions: 1 with 0 has:22646098
	-> Comparing positions: 2 with 0 has:22646098
	-> Only read nSites: 22646098 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301284
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301284] from pop0:	476
	-> Sites to keep[DPSCF301284] from pop1:	476
	-> Sites to keep[DPSCF301284] from pop2:	476
	-> [readdata] lastread:476 posi:5759
	-> Comparing positions: 1 with 0 has:22646574
	-> Comparing positions: 2 with 0 has:22646574
	-> Only read nSites: 22646574 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301285
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301285' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301286
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301286] from pop0:	0
	-> Sites to keep[DPSCF301286] from pop1:	0
	-> Sites to keep[DPSCF301286] from pop2:	0
	-> Only read nSites: 22646574 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301287
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301287' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301291
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301291' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301292
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301292' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301293
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301293' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301297
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301297] from pop0:	122
	-> Sites to keep[DPSCF301297] from pop1:	122
	-> Sites to keep[DPSCF301297] from pop2:	122
	-> [readdata] lastread:122 posi:5759
	-> Comparing positions: 1 with 0 has:22646696
	-> Comparing positions: 2 with 0 has:22646696
	-> Only read nSites: 22646696 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301299
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301299' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301300
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301300' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301301
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301301' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301302
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301302' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301303
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301303' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301304
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301304' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301305
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301305' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301309
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301309] from pop0:	0
	-> Sites to keep[DPSCF301309] from pop1:	0
	-> Sites to keep[DPSCF301309] from pop2:	0
	-> Only read nSites: 22646696 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301313
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301313' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301315
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301315] from pop0:	245
	-> Sites to keep[DPSCF301315] from pop1:	245
	-> Sites to keep[DPSCF301315] from pop2:	245
	-> [readdata] lastread:245 posi:5759
	-> Comparing positions: 1 with 0 has:22646941
	-> Comparing positions: 2 with 0 has:22646941
	-> Only read nSites: 22646941 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301316
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301316] from pop0:	227
	-> Sites to keep[DPSCF301316] from pop1:	227
	-> Sites to keep[DPSCF301316] from pop2:	227
	-> [readdata] lastread:227 posi:5759
	-> Comparing positions: 1 with 0 has:22647168
	-> Comparing positions: 2 with 0 has:22647168
	-> Only read nSites: 22647168 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301321
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301321' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301323
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301323' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301324
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301324' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301326
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301326] from pop0:	432
	-> Sites to keep[DPSCF301326] from pop1:	432
	-> Sites to keep[DPSCF301326] from pop2:	432
	-> [readdata] lastread:432 posi:5759
	-> Comparing positions: 1 with 0 has:22647600
	-> Comparing positions: 2 with 0 has:22647600
	-> Only read nSites: 22647600 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301327
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301327] from pop0:	106
	-> Sites to keep[DPSCF301327] from pop1:	106
	-> Sites to keep[DPSCF301327] from pop2:	106
	-> [readdata] lastread:106 posi:5759
	-> Comparing positions: 1 with 0 has:22647706
	-> Comparing positions: 2 with 0 has:22647706
	-> Only read nSites: 22647706 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301328
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301328' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301330
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301330' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301331
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301331' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301335
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301335] from pop0:	388
	-> Sites to keep[DPSCF301335] from pop1:	388
	-> Sites to keep[DPSCF301335] from pop2:	388
	-> [readdata] lastread:388 posi:5759
	-> Comparing positions: 1 with 0 has:22648094
	-> Comparing positions: 2 with 0 has:22648094
	-> Only read nSites: 22648094 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301336
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301336] from pop0:	401
	-> Sites to keep[DPSCF301336] from pop1:	401
	-> Sites to keep[DPSCF301336] from pop2:	401
	-> [readdata] lastread:401 posi:5759
	-> Comparing positions: 1 with 0 has:22648495
	-> Comparing positions: 2 with 0 has:22648495
	-> Only read nSites: 22648495 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301337
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301337] from pop0:	421
	-> Sites to keep[DPSCF301337] from pop1:	421
	-> Sites to keep[DPSCF301337] from pop2:	421
	-> [readdata] lastread:421 posi:5759
	-> Comparing positions: 1 with 0 has:22648916
	-> Comparing positions: 2 with 0 has:22648916
	-> Only read nSites: 22648916 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301338
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301338] from pop0:	109
	-> Sites to keep[DPSCF301338] from pop1:	109
	-> Sites to keep[DPSCF301338] from pop2:	109
	-> [readdata] lastread:109 posi:5759
	-> Comparing positions: 1 with 0 has:22649025
	-> Comparing positions: 2 with 0 has:22649025
	-> Only read nSites: 22649025 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301340
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301340] from pop0:	166
	-> Sites to keep[DPSCF301340] from pop1:	166
	-> Sites to keep[DPSCF301340] from pop2:	166
	-> [readdata] lastread:166 posi:5759
	-> Comparing positions: 1 with 0 has:22649191
	-> Comparing positions: 2 with 0 has:22649191
	-> Only read nSites: 22649191 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301342
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301342' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301345
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301345' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301346
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301346] from pop0:	252
	-> Sites to keep[DPSCF301346] from pop1:	252
	-> Sites to keep[DPSCF301346] from pop2:	252
	-> [readdata] lastread:252 posi:5759
	-> Comparing positions: 1 with 0 has:22649443
	-> Comparing positions: 2 with 0 has:22649443
	-> Only read nSites: 22649443 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301349
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301349' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301351
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301351' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301352
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301352] from pop0:	451
	-> Sites to keep[DPSCF301352] from pop1:	451
	-> Sites to keep[DPSCF301352] from pop2:	451
	-> [readdata] lastread:451 posi:5759
	-> Comparing positions: 1 with 0 has:22649894
	-> Comparing positions: 2 with 0 has:22649894
	-> Only read nSites: 22649894 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301358
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301358' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301359
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301359' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301362
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301362] from pop0:	720
	-> Sites to keep[DPSCF301362] from pop1:	720
	-> Sites to keep[DPSCF301362] from pop2:	720
	-> [readdata] lastread:720 posi:5759
	-> Comparing positions: 1 with 0 has:22650614
	-> Comparing positions: 2 with 0 has:22650614
	-> Only read nSites: 22650614 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301363
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301363] from pop0:	876
	-> Sites to keep[DPSCF301363] from pop1:	876
	-> Sites to keep[DPSCF301363] from pop2:	876
	-> [readdata] lastread:876 posi:5759
	-> Comparing positions: 1 with 0 has:22651490
	-> Comparing positions: 2 with 0 has:22651490
	-> Only read nSites: 22651490 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301364
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301364' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301366
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301366' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301367
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301367] from pop0:	184
	-> Sites to keep[DPSCF301367] from pop1:	184
	-> Sites to keep[DPSCF301367] from pop2:	184
	-> [readdata] lastread:184 posi:5759
	-> Comparing positions: 1 with 0 has:22651674
	-> Comparing positions: 2 with 0 has:22651674
	-> Only read nSites: 22651674 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301368
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301368' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301372
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301372' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301373
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301373] from pop0:	644
	-> Sites to keep[DPSCF301373] from pop1:	644
	-> Sites to keep[DPSCF301373] from pop2:	644
	-> [readdata] lastread:644 posi:5759
	-> Comparing positions: 1 with 0 has:22652318
	-> Comparing positions: 2 with 0 has:22652318
	-> Only read nSites: 22652318 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301374
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301374] from pop0:	597
	-> Sites to keep[DPSCF301374] from pop1:	597
	-> Sites to keep[DPSCF301374] from pop2:	597
	-> [readdata] lastread:597 posi:5759
	-> Comparing positions: 1 with 0 has:22652915
	-> Comparing positions: 2 with 0 has:22652915
	-> Only read nSites: 22652915 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301376
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301376' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301379
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301379' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301380
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301380' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301381
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301381' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301382
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301382] from pop0:	547
	-> Sites to keep[DPSCF301382] from pop1:	547
	-> Sites to keep[DPSCF301382] from pop2:	547
	-> [readdata] lastread:547 posi:5759
	-> Comparing positions: 1 with 0 has:22653462
	-> Comparing positions: 2 with 0 has:22653462
	-> Only read nSites: 22653462 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301383
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301383] from pop0:	0
	-> Sites to keep[DPSCF301383] from pop1:	0
	-> Sites to keep[DPSCF301383] from pop2:	0
	-> Only read nSites: 22653462 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301384
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301384' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301386
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301386' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301387
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301387' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301390
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301390' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301392
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301392] from pop0:	1087
	-> Sites to keep[DPSCF301392] from pop1:	1087
	-> Sites to keep[DPSCF301392] from pop2:	1087
	-> [readdata] lastread:1087 posi:5759
	-> Comparing positions: 1 with 0 has:22654549
	-> Comparing positions: 2 with 0 has:22654549
	-> Only read nSites: 22654549 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301393
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301393' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301395
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301395' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301396
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301396] from pop0:	631
	-> Sites to keep[DPSCF301396] from pop1:	631
	-> Sites to keep[DPSCF301396] from pop2:	631
	-> [readdata] lastread:631 posi:5759
	-> Comparing positions: 1 with 0 has:22655180
	-> Comparing positions: 2 with 0 has:22655180
	-> Only read nSites: 22655180 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301399
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301399' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301403
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301403] from pop0:	249
	-> Sites to keep[DPSCF301403] from pop1:	249
	-> Sites to keep[DPSCF301403] from pop2:	249
	-> [readdata] lastread:249 posi:5759
	-> Comparing positions: 1 with 0 has:22655429
	-> Comparing positions: 2 with 0 has:22655429
	-> Only read nSites: 22655429 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301404
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301404' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301405
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301405' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301408
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301408' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301410
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301410' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301411
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301411' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301412
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301412' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301413
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301413' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301414
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301414] from pop0:	488
	-> Sites to keep[DPSCF301414] from pop1:	488
	-> Sites to keep[DPSCF301414] from pop2:	488
	-> [readdata] lastread:488 posi:5759
	-> Comparing positions: 1 with 0 has:22655917
	-> Comparing positions: 2 with 0 has:22655917
	-> Only read nSites: 22655917 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301416
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301416] from pop0:	216
	-> Sites to keep[DPSCF301416] from pop1:	216
	-> Sites to keep[DPSCF301416] from pop2:	216
	-> [readdata] lastread:216 posi:5759
	-> Comparing positions: 1 with 0 has:22656133
	-> Comparing positions: 2 with 0 has:22656133
	-> Only read nSites: 22656133 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301417
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301417' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301418
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301418' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301421
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301421' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301422
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301422] from pop0:	200
	-> Sites to keep[DPSCF301422] from pop1:	200
	-> Sites to keep[DPSCF301422] from pop2:	200
	-> [readdata] lastread:200 posi:5759
	-> Comparing positions: 1 with 0 has:22656333
	-> Comparing positions: 2 with 0 has:22656333
	-> Only read nSites: 22656333 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301423
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301423' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301424
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301424] from pop0:	433
	-> Sites to keep[DPSCF301424] from pop1:	433
	-> Sites to keep[DPSCF301424] from pop2:	433
	-> [readdata] lastread:433 posi:5759
	-> Comparing positions: 1 with 0 has:22656766
	-> Comparing positions: 2 with 0 has:22656766
	-> Only read nSites: 22656766 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301425
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301425] from pop0:	405
	-> Sites to keep[DPSCF301425] from pop1:	405
	-> Sites to keep[DPSCF301425] from pop2:	405
	-> [readdata] lastread:405 posi:5759
	-> Comparing positions: 1 with 0 has:22657171
	-> Comparing positions: 2 with 0 has:22657171
	-> Only read nSites: 22657171 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301427
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301427' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301429
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301429' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301431
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301431' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301432
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301432' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301433
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301433] from pop0:	135
	-> Sites to keep[DPSCF301433] from pop1:	135
	-> Sites to keep[DPSCF301433] from pop2:	135
	-> [readdata] lastread:135 posi:5759
	-> Comparing positions: 1 with 0 has:22657306
	-> Comparing positions: 2 with 0 has:22657306
	-> Only read nSites: 22657306 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301435
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301435] from pop0:	1336
	-> Sites to keep[DPSCF301435] from pop1:	1336
	-> Sites to keep[DPSCF301435] from pop2:	1336
	-> [readdata] lastread:1336 posi:5759
	-> Comparing positions: 1 with 0 has:22658642
	-> Comparing positions: 2 with 0 has:22658642
	-> Only read nSites: 22658642 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301436
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301436' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301437
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301437' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301438
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301438] from pop0:	199
	-> Sites to keep[DPSCF301438] from pop1:	199
	-> Sites to keep[DPSCF301438] from pop2:	199
	-> [readdata] lastread:199 posi:5759
	-> Comparing positions: 1 with 0 has:22658841
	-> Comparing positions: 2 with 0 has:22658841
	-> Only read nSites: 22658841 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301439
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301439' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301440
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301440' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301441
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301441' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301443
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301443] from pop0:	200
	-> Sites to keep[DPSCF301443] from pop1:	200
	-> Sites to keep[DPSCF301443] from pop2:	200
	-> [readdata] lastread:200 posi:5759
	-> Comparing positions: 1 with 0 has:22659041
	-> Comparing positions: 2 with 0 has:22659041
	-> Only read nSites: 22659041 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301444
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301444] from pop0:	123
	-> Sites to keep[DPSCF301444] from pop1:	123
	-> Sites to keep[DPSCF301444] from pop2:	123
	-> [readdata] lastread:123 posi:5759
	-> Comparing positions: 1 with 0 has:22659164
	-> Comparing positions: 2 with 0 has:22659164
	-> Only read nSites: 22659164 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301445
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301445] from pop0:	216
	-> Sites to keep[DPSCF301445] from pop1:	216
	-> Sites to keep[DPSCF301445] from pop2:	216
	-> [readdata] lastread:216 posi:5759
	-> Comparing positions: 1 with 0 has:22659380
	-> Comparing positions: 2 with 0 has:22659380
	-> Only read nSites: 22659380 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301448
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301448' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301451
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301451' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301453
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301453' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301455
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301455] from pop0:	702
	-> Sites to keep[DPSCF301455] from pop1:	702
	-> Sites to keep[DPSCF301455] from pop2:	702
	-> [readdata] lastread:702 posi:5759
	-> Comparing positions: 1 with 0 has:22660082
	-> Comparing positions: 2 with 0 has:22660082
	-> Only read nSites: 22660082 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301456
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301456' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301460
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301460] from pop0:	841
	-> Sites to keep[DPSCF301460] from pop1:	841
	-> Sites to keep[DPSCF301460] from pop2:	841
	-> [readdata] lastread:841 posi:5759
	-> Comparing positions: 1 with 0 has:22660923
	-> Comparing positions: 2 with 0 has:22660923
	-> Only read nSites: 22660923 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301461
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301461] from pop0:	695
	-> Sites to keep[DPSCF301461] from pop1:	695
	-> Sites to keep[DPSCF301461] from pop2:	695
	-> [readdata] lastread:695 posi:5759
	-> Comparing positions: 1 with 0 has:22661618
	-> Comparing positions: 2 with 0 has:22661618
	-> Only read nSites: 22661618 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301462
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301462' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301464
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301464] from pop0:	623
	-> Sites to keep[DPSCF301464] from pop1:	623
	-> Sites to keep[DPSCF301464] from pop2:	623
	-> [readdata] lastread:623 posi:5759
	-> Comparing positions: 1 with 0 has:22662241
	-> Comparing positions: 2 with 0 has:22662241
	-> Only read nSites: 22662241 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301467
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301467' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301468
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301468' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301469
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301469' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301471
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301471] from pop0:	154
	-> Sites to keep[DPSCF301471] from pop1:	154
	-> Sites to keep[DPSCF301471] from pop2:	154
	-> [readdata] lastread:154 posi:5759
	-> Comparing positions: 1 with 0 has:22662395
	-> Comparing positions: 2 with 0 has:22662395
	-> Only read nSites: 22662395 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301472
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301472' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301473
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301473] from pop0:	197
	-> Sites to keep[DPSCF301473] from pop1:	197
	-> Sites to keep[DPSCF301473] from pop2:	197
	-> [readdata] lastread:197 posi:5759
	-> Comparing positions: 1 with 0 has:22662592
	-> Comparing positions: 2 with 0 has:22662592
	-> Only read nSites: 22662592 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301474
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301474] from pop0:	394
	-> Sites to keep[DPSCF301474] from pop1:	394
	-> Sites to keep[DPSCF301474] from pop2:	394
	-> [readdata] lastread:394 posi:5759
	-> Comparing positions: 1 with 0 has:22662986
	-> Comparing positions: 2 with 0 has:22662986
	-> Only read nSites: 22662986 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301475
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301475' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301477
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301477' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301478
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301478' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301479
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301479] from pop0:	570
	-> Sites to keep[DPSCF301479] from pop1:	570
	-> Sites to keep[DPSCF301479] from pop2:	570
	-> [readdata] lastread:570 posi:5759
	-> Comparing positions: 1 with 0 has:22663556
	-> Comparing positions: 2 with 0 has:22663556
	-> Only read nSites: 22663556 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301480
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301480' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301483
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301483' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301487
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301487' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301488
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301488] from pop0:	650
	-> Sites to keep[DPSCF301488] from pop1:	650
	-> Sites to keep[DPSCF301488] from pop2:	650
	-> [readdata] lastread:650 posi:5759
	-> Comparing positions: 1 with 0 has:22664206
	-> Comparing positions: 2 with 0 has:22664206
	-> Only read nSites: 22664206 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301491
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301491' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301492
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301492' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301493
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301493] from pop0:	321
	-> Sites to keep[DPSCF301493] from pop1:	321
	-> Sites to keep[DPSCF301493] from pop2:	321
	-> [readdata] lastread:321 posi:5759
	-> Comparing positions: 1 with 0 has:22664527
	-> Comparing positions: 2 with 0 has:22664527
	-> Only read nSites: 22664527 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301494
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301494] from pop0:	893
	-> Sites to keep[DPSCF301494] from pop1:	893
	-> Sites to keep[DPSCF301494] from pop2:	893
	-> [readdata] lastread:893 posi:5759
	-> Comparing positions: 1 with 0 has:22665420
	-> Comparing positions: 2 with 0 has:22665420
	-> Only read nSites: 22665420 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301495
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301495' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301497
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301497' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301503
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301503] from pop0:	188
	-> Sites to keep[DPSCF301503] from pop1:	188
	-> Sites to keep[DPSCF301503] from pop2:	188
	-> [readdata] lastread:188 posi:5759
	-> Comparing positions: 1 with 0 has:22665608
	-> Comparing positions: 2 with 0 has:22665608
	-> Only read nSites: 22665608 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301504
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301504] from pop0:	1021
	-> Sites to keep[DPSCF301504] from pop1:	1021
	-> Sites to keep[DPSCF301504] from pop2:	1021
	-> [readdata] lastread:1021 posi:5759
	-> Comparing positions: 1 with 0 has:22666629
	-> Comparing positions: 2 with 0 has:22666629
	-> Only read nSites: 22666629 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301509
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301509] from pop0:	0
	-> Sites to keep[DPSCF301509] from pop1:	0
	-> Sites to keep[DPSCF301509] from pop2:	0
	-> Only read nSites: 22666629 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301511
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301511' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301513
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301513' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301518
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301518' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301520
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301520' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301521
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301521] from pop0:	763
	-> Sites to keep[DPSCF301521] from pop1:	763
	-> Sites to keep[DPSCF301521] from pop2:	763
	-> [readdata] lastread:763 posi:5759
	-> Comparing positions: 1 with 0 has:22667392
	-> Comparing positions: 2 with 0 has:22667392
	-> Only read nSites: 22667392 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301522
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301522' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301523
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301523' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301528
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301528' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301529
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301529' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301531
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301531] from pop0:	134
	-> Sites to keep[DPSCF301531] from pop1:	134
	-> Sites to keep[DPSCF301531] from pop2:	134
	-> [readdata] lastread:134 posi:5759
	-> Comparing positions: 1 with 0 has:22667526
	-> Comparing positions: 2 with 0 has:22667526
	-> Only read nSites: 22667526 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301534
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301534' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301535
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301535] from pop0:	588
	-> Sites to keep[DPSCF301535] from pop1:	588
	-> Sites to keep[DPSCF301535] from pop2:	588
	-> [readdata] lastread:588 posi:5759
	-> Comparing positions: 1 with 0 has:22668114
	-> Comparing positions: 2 with 0 has:22668114
	-> Only read nSites: 22668114 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301539
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301539' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301541
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301541' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301544
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301544' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301546
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301546' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301549
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301549] from pop0:	764
	-> Sites to keep[DPSCF301549] from pop1:	764
	-> Sites to keep[DPSCF301549] from pop2:	764
	-> [readdata] lastread:764 posi:5759
	-> Comparing positions: 1 with 0 has:22668878
	-> Comparing positions: 2 with 0 has:22668878
	-> Only read nSites: 22668878 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301554
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301554' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301557
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301557] from pop0:	216
	-> Sites to keep[DPSCF301557] from pop1:	216
	-> Sites to keep[DPSCF301557] from pop2:	216
	-> [readdata] lastread:216 posi:5759
	-> Comparing positions: 1 with 0 has:22669094
	-> Comparing positions: 2 with 0 has:22669094
	-> Only read nSites: 22669094 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301559
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301559' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301561
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301561] from pop0:	674
	-> Sites to keep[DPSCF301561] from pop1:	674
	-> Sites to keep[DPSCF301561] from pop2:	674
	-> [readdata] lastread:674 posi:5759
	-> Comparing positions: 1 with 0 has:22669768
	-> Comparing positions: 2 with 0 has:22669768
	-> Only read nSites: 22669768 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301562
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301562] from pop0:	822
	-> Sites to keep[DPSCF301562] from pop1:	822
	-> Sites to keep[DPSCF301562] from pop2:	822
	-> [readdata] lastread:822 posi:5759
	-> Comparing positions: 1 with 0 has:22670590
	-> Comparing positions: 2 with 0 has:22670590
	-> Only read nSites: 22670590 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301564
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301564' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301566
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301566] from pop0:	572
	-> Sites to keep[DPSCF301566] from pop1:	572
	-> Sites to keep[DPSCF301566] from pop2:	572
	-> [readdata] lastread:572 posi:5759
	-> Comparing positions: 1 with 0 has:22671162
	-> Comparing positions: 2 with 0 has:22671162
	-> Only read nSites: 22671162 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301567
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301567' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301568
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301568' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301569
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301569' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301571
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301571] from pop0:	273
	-> Sites to keep[DPSCF301571] from pop1:	273
	-> Sites to keep[DPSCF301571] from pop2:	273
	-> [readdata] lastread:273 posi:5759
	-> Comparing positions: 1 with 0 has:22671435
	-> Comparing positions: 2 with 0 has:22671435
	-> Only read nSites: 22671435 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301572
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301572] from pop0:	664
	-> Sites to keep[DPSCF301572] from pop1:	664
	-> Sites to keep[DPSCF301572] from pop2:	664
	-> [readdata] lastread:664 posi:5759
	-> Comparing positions: 1 with 0 has:22672099
	-> Comparing positions: 2 with 0 has:22672099
	-> Only read nSites: 22672099 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301574
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301574] from pop0:	149
	-> Sites to keep[DPSCF301574] from pop1:	149
	-> Sites to keep[DPSCF301574] from pop2:	149
	-> [readdata] lastread:149 posi:5759
	-> Comparing positions: 1 with 0 has:22672248
	-> Comparing positions: 2 with 0 has:22672248
	-> Only read nSites: 22672248 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301575
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301575' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301576
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301576' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301577
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301577' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301580
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301580' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301581
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301581] from pop0:	950
	-> Sites to keep[DPSCF301581] from pop1:	950
	-> Sites to keep[DPSCF301581] from pop2:	950
	-> [readdata] lastread:950 posi:5759
	-> Comparing positions: 1 with 0 has:22673198
	-> Comparing positions: 2 with 0 has:22673198
	-> Only read nSites: 22673198 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301582
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301582' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301583
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301583] from pop0:	668
	-> Sites to keep[DPSCF301583] from pop1:	668
	-> Sites to keep[DPSCF301583] from pop2:	668
	-> [readdata] lastread:668 posi:5759
	-> Comparing positions: 1 with 0 has:22673866
	-> Comparing positions: 2 with 0 has:22673866
	-> Only read nSites: 22673866 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301585
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301585] from pop0:	264
	-> Sites to keep[DPSCF301585] from pop1:	264
	-> Sites to keep[DPSCF301585] from pop2:	264
	-> [readdata] lastread:264 posi:5759
	-> Comparing positions: 1 with 0 has:22674130
	-> Comparing positions: 2 with 0 has:22674130
	-> Only read nSites: 22674130 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301586
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301586' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301588
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301588] from pop0:	1102
	-> Sites to keep[DPSCF301588] from pop1:	1102
	-> Sites to keep[DPSCF301588] from pop2:	1102
	-> [readdata] lastread:1102 posi:5759
	-> Comparing positions: 1 with 0 has:22675232
	-> Comparing positions: 2 with 0 has:22675232
	-> Only read nSites: 22675232 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301589
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301589' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301590
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301590] from pop0:	37
	-> Sites to keep[DPSCF301590] from pop1:	37
	-> Sites to keep[DPSCF301590] from pop2:	37
	-> [readdata] lastread:37 posi:5759
	-> Comparing positions: 1 with 0 has:22675269
	-> Comparing positions: 2 with 0 has:22675269
	-> Only read nSites: 22675269 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301591
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301591] from pop0:	846
	-> Sites to keep[DPSCF301591] from pop1:	846
	-> Sites to keep[DPSCF301591] from pop2:	846
	-> [readdata] lastread:846 posi:5759
	-> Comparing positions: 1 with 0 has:22676115
	-> Comparing positions: 2 with 0 has:22676115
	-> Only read nSites: 22676115 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301593
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301593' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301594
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301594' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301595
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301595] from pop0:	197
	-> Sites to keep[DPSCF301595] from pop1:	197
	-> Sites to keep[DPSCF301595] from pop2:	197
	-> [readdata] lastread:197 posi:5759
	-> Comparing positions: 1 with 0 has:22676312
	-> Comparing positions: 2 with 0 has:22676312
	-> Only read nSites: 22676312 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301596
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301596] from pop0:	663
	-> Sites to keep[DPSCF301596] from pop1:	663
	-> Sites to keep[DPSCF301596] from pop2:	663
	-> [readdata] lastread:663 posi:5759
	-> Comparing positions: 1 with 0 has:22676975
	-> Comparing positions: 2 with 0 has:22676975
	-> Only read nSites: 22676975 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301600
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301600' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301601
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301601' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301602
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301602' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301603
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301603] from pop0:	3
	-> Sites to keep[DPSCF301603] from pop1:	3
	-> Sites to keep[DPSCF301603] from pop2:	3
	-> [readdata] lastread:3 posi:5759
	-> Comparing positions: 1 with 0 has:22676978
	-> Comparing positions: 2 with 0 has:22676978
	-> Only read nSites: 22676978 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301605
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301605] from pop0:	507
	-> Sites to keep[DPSCF301605] from pop1:	507
	-> Sites to keep[DPSCF301605] from pop2:	507
	-> [readdata] lastread:507 posi:5759
	-> Comparing positions: 1 with 0 has:22677485
	-> Comparing positions: 2 with 0 has:22677485
	-> Only read nSites: 22677485 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301606
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301606' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301608
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301608] from pop0:	302
	-> Sites to keep[DPSCF301608] from pop1:	302
	-> Sites to keep[DPSCF301608] from pop2:	302
	-> [readdata] lastread:302 posi:5759
	-> Comparing positions: 1 with 0 has:22677787
	-> Comparing positions: 2 with 0 has:22677787
	-> Only read nSites: 22677787 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301609
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301609' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301611
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301611' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301612
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301612' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301613
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301613' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301614
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301614] from pop0:	707
	-> Sites to keep[DPSCF301614] from pop1:	707
	-> Sites to keep[DPSCF301614] from pop2:	707
	-> [readdata] lastread:707 posi:5759
	-> Comparing positions: 1 with 0 has:22678494
	-> Comparing positions: 2 with 0 has:22678494
	-> Only read nSites: 22678494 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301618
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301618' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301621
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301621' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301622
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301622' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301625
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301625] from pop0:	564
	-> Sites to keep[DPSCF301625] from pop1:	564
	-> Sites to keep[DPSCF301625] from pop2:	564
	-> [readdata] lastread:564 posi:5759
	-> Comparing positions: 1 with 0 has:22679058
	-> Comparing positions: 2 with 0 has:22679058
	-> Only read nSites: 22679058 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301626
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301626' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301631
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301631] from pop0:	853
	-> Sites to keep[DPSCF301631] from pop1:	853
	-> Sites to keep[DPSCF301631] from pop2:	853
	-> [readdata] lastread:853 posi:5759
	-> Comparing positions: 1 with 0 has:22679911
	-> Comparing positions: 2 with 0 has:22679911
	-> Only read nSites: 22679911 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301632
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301632' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301634
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301634] from pop0:	204
	-> Sites to keep[DPSCF301634] from pop1:	204
	-> Sites to keep[DPSCF301634] from pop2:	204
	-> [readdata] lastread:204 posi:5759
	-> Comparing positions: 1 with 0 has:22680115
	-> Comparing positions: 2 with 0 has:22680115
	-> Only read nSites: 22680115 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301635
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301635' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301637
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301637] from pop0:	270
	-> Sites to keep[DPSCF301637] from pop1:	270
	-> Sites to keep[DPSCF301637] from pop2:	270
	-> [readdata] lastread:270 posi:5759
	-> Comparing positions: 1 with 0 has:22680385
	-> Comparing positions: 2 with 0 has:22680385
	-> Only read nSites: 22680385 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301638
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301638' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301645
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301645' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301646
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301646' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301647
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301647' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301648
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301648] from pop0:	660
	-> Sites to keep[DPSCF301648] from pop1:	660
	-> Sites to keep[DPSCF301648] from pop2:	660
	-> [readdata] lastread:660 posi:5759
	-> Comparing positions: 1 with 0 has:22681045
	-> Comparing positions: 2 with 0 has:22681045
	-> Only read nSites: 22681045 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301652
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301652' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301653
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301653] from pop0:	157
	-> Sites to keep[DPSCF301653] from pop1:	157
	-> Sites to keep[DPSCF301653] from pop2:	157
	-> [readdata] lastread:157 posi:5759
	-> Comparing positions: 1 with 0 has:22681202
	-> Comparing positions: 2 with 0 has:22681202
	-> Only read nSites: 22681202 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301660
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301660' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301661
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301661] from pop0:	594
	-> Sites to keep[DPSCF301661] from pop1:	594
	-> Sites to keep[DPSCF301661] from pop2:	594
	-> [readdata] lastread:594 posi:5759
	-> Comparing positions: 1 with 0 has:22681796
	-> Comparing positions: 2 with 0 has:22681796
	-> Only read nSites: 22681796 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301665
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301665' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301666
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301666' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301667
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301667' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301668
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301668' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301669
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301669' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301671
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301671' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301672
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301672' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301673
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301673' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301676
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301676] from pop0:	492
	-> Sites to keep[DPSCF301676] from pop1:	492
	-> Sites to keep[DPSCF301676] from pop2:	492
	-> [readdata] lastread:492 posi:5759
	-> Comparing positions: 1 with 0 has:22682288
	-> Comparing positions: 2 with 0 has:22682288
	-> Only read nSites: 22682288 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301677
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301677' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301678
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301678' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301679
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301679' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301680
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301680' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301681
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301681] from pop0:	182
	-> Sites to keep[DPSCF301681] from pop1:	182
	-> Sites to keep[DPSCF301681] from pop2:	182
	-> [readdata] lastread:182 posi:5759
	-> Comparing positions: 1 with 0 has:22682470
	-> Comparing positions: 2 with 0 has:22682470
	-> Only read nSites: 22682470 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301683
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301683] from pop0:	670
	-> Sites to keep[DPSCF301683] from pop1:	670
	-> Sites to keep[DPSCF301683] from pop2:	670
	-> [readdata] lastread:670 posi:5759
	-> Comparing positions: 1 with 0 has:22683140
	-> Comparing positions: 2 with 0 has:22683140
	-> Only read nSites: 22683140 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301685
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301685' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301692
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301692' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301693
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301693' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301694
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301694' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301695
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301695' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301696
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301696' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301697
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301697' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301698
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301698] from pop0:	552
	-> Sites to keep[DPSCF301698] from pop1:	552
	-> Sites to keep[DPSCF301698] from pop2:	552
	-> [readdata] lastread:552 posi:5759
	-> Comparing positions: 1 with 0 has:22683692
	-> Comparing positions: 2 with 0 has:22683692
	-> Only read nSites: 22683692 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301699
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301699] from pop0:	279
	-> Sites to keep[DPSCF301699] from pop1:	279
	-> Sites to keep[DPSCF301699] from pop2:	279
	-> [readdata] lastread:279 posi:5759
	-> Comparing positions: 1 with 0 has:22683971
	-> Comparing positions: 2 with 0 has:22683971
	-> Only read nSites: 22683971 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301700
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301700' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301701
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301701' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301702
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301702] from pop0:	470
	-> Sites to keep[DPSCF301702] from pop1:	470
	-> Sites to keep[DPSCF301702] from pop2:	470
	-> [readdata] lastread:470 posi:5759
	-> Comparing positions: 1 with 0 has:22684441
	-> Comparing positions: 2 with 0 has:22684441
	-> Only read nSites: 22684441 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301704
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301704] from pop0:	171
	-> Sites to keep[DPSCF301704] from pop1:	171
	-> Sites to keep[DPSCF301704] from pop2:	171
	-> [readdata] lastread:171 posi:5759
	-> Comparing positions: 1 with 0 has:22684612
	-> Comparing positions: 2 with 0 has:22684612
	-> Only read nSites: 22684612 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301707
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301707' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301712
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301712' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301713
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301713] from pop0:	446
	-> Sites to keep[DPSCF301713] from pop1:	446
	-> Sites to keep[DPSCF301713] from pop2:	446
	-> [readdata] lastread:446 posi:5759
	-> Comparing positions: 1 with 0 has:22685058
	-> Comparing positions: 2 with 0 has:22685058
	-> Only read nSites: 22685058 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301714
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301714' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301715
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301715' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301716
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301716' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301717
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301717' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301718
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301718] from pop0:	191
	-> Sites to keep[DPSCF301718] from pop1:	191
	-> Sites to keep[DPSCF301718] from pop2:	191
	-> [readdata] lastread:191 posi:5759
	-> Comparing positions: 1 with 0 has:22685249
	-> Comparing positions: 2 with 0 has:22685249
	-> Only read nSites: 22685249 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301720
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301720' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301721
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301721] from pop0:	609
	-> Sites to keep[DPSCF301721] from pop1:	609
	-> Sites to keep[DPSCF301721] from pop2:	609
	-> [readdata] lastread:609 posi:5759
	-> Comparing positions: 1 with 0 has:22685858
	-> Comparing positions: 2 with 0 has:22685858
	-> Only read nSites: 22685858 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301724
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301724' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301725
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301725' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301728
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301728' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301732
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301732] from pop0:	370
	-> Sites to keep[DPSCF301732] from pop1:	370
	-> Sites to keep[DPSCF301732] from pop2:	370
	-> [readdata] lastread:370 posi:5759
	-> Comparing positions: 1 with 0 has:22686228
	-> Comparing positions: 2 with 0 has:22686228
	-> Only read nSites: 22686228 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301735
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301735' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301736
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301736' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301737
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301737' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301738
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301738' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301739
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301739] from pop0:	0
	-> Sites to keep[DPSCF301739] from pop1:	0
	-> Sites to keep[DPSCF301739] from pop2:	0
	-> Only read nSites: 22686228 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301740
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301740] from pop0:	553
	-> Sites to keep[DPSCF301740] from pop1:	553
	-> Sites to keep[DPSCF301740] from pop2:	553
	-> [readdata] lastread:553 posi:5759
	-> Comparing positions: 1 with 0 has:22686781
	-> Comparing positions: 2 with 0 has:22686781
	-> Only read nSites: 22686781 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301743
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301743' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301744
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301744' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301750
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301750] from pop0:	218
	-> Sites to keep[DPSCF301750] from pop1:	218
	-> Sites to keep[DPSCF301750] from pop2:	218
	-> [readdata] lastread:218 posi:5759
	-> Comparing positions: 1 with 0 has:22686999
	-> Comparing positions: 2 with 0 has:22686999
	-> Only read nSites: 22686999 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301753
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301753' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301755
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301755' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301760
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301760' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301762
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301762' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301766
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301766' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301767
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301767] from pop0:	289
	-> Sites to keep[DPSCF301767] from pop1:	289
	-> Sites to keep[DPSCF301767] from pop2:	289
	-> [readdata] lastread:289 posi:5759
	-> Comparing positions: 1 with 0 has:22687288
	-> Comparing positions: 2 with 0 has:22687288
	-> Only read nSites: 22687288 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301768
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301768' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301773
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301773' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301775
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301775' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301776
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301776] from pop0:	0
	-> Sites to keep[DPSCF301776] from pop1:	0
	-> Sites to keep[DPSCF301776] from pop2:	0
	-> Only read nSites: 22687288 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301779
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301779' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301780
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301780' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301782
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301782' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301784
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301784' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301785
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301785] from pop0:	415
	-> Sites to keep[DPSCF301785] from pop1:	415
	-> Sites to keep[DPSCF301785] from pop2:	415
	-> [readdata] lastread:415 posi:5759
	-> Comparing positions: 1 with 0 has:22687703
	-> Comparing positions: 2 with 0 has:22687703
	-> Only read nSites: 22687703 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301787
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301787] from pop0:	132
	-> Sites to keep[DPSCF301787] from pop1:	132
	-> Sites to keep[DPSCF301787] from pop2:	132
	-> [readdata] lastread:132 posi:5759
	-> Comparing positions: 1 with 0 has:22687835
	-> Comparing positions: 2 with 0 has:22687835
	-> Only read nSites: 22687835 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301788
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301788] from pop0:	339
	-> Sites to keep[DPSCF301788] from pop1:	339
	-> Sites to keep[DPSCF301788] from pop2:	339
	-> [readdata] lastread:339 posi:5759
	-> Comparing positions: 1 with 0 has:22688174
	-> Comparing positions: 2 with 0 has:22688174
	-> Only read nSites: 22688174 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301789
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301789' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301790
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301790' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301791
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301791' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301793
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301793] from pop0:	393
	-> Sites to keep[DPSCF301793] from pop1:	393
	-> Sites to keep[DPSCF301793] from pop2:	393
	-> [readdata] lastread:393 posi:5759
	-> Comparing positions: 1 with 0 has:22688567
	-> Comparing positions: 2 with 0 has:22688567
	-> Only read nSites: 22688567 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301797
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301797' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301801
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301801' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301802
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301802] from pop0:	836
	-> Sites to keep[DPSCF301802] from pop1:	836
	-> Sites to keep[DPSCF301802] from pop2:	836
	-> [readdata] lastread:836 posi:5759
	-> Comparing positions: 1 with 0 has:22689403
	-> Comparing positions: 2 with 0 has:22689403
	-> Only read nSites: 22689403 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301804
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301804' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301805
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301805' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301808
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301808' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301812
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301812] from pop0:	102
	-> Sites to keep[DPSCF301812] from pop1:	102
	-> Sites to keep[DPSCF301812] from pop2:	102
	-> [readdata] lastread:102 posi:5759
	-> Comparing positions: 1 with 0 has:22689505
	-> Comparing positions: 2 with 0 has:22689505
	-> Only read nSites: 22689505 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301813
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301813' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301814
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301814' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301815
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301815] from pop0:	380
	-> Sites to keep[DPSCF301815] from pop1:	380
	-> Sites to keep[DPSCF301815] from pop2:	380
	-> [readdata] lastread:380 posi:5759
	-> Comparing positions: 1 with 0 has:22689885
	-> Comparing positions: 2 with 0 has:22689885
	-> Only read nSites: 22689885 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301816
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301816' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301818
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301818] from pop0:	450
	-> Sites to keep[DPSCF301818] from pop1:	450
	-> Sites to keep[DPSCF301818] from pop2:	450
	-> [readdata] lastread:450 posi:5759
	-> Comparing positions: 1 with 0 has:22690335
	-> Comparing positions: 2 with 0 has:22690335
	-> Only read nSites: 22690335 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301821
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301821] from pop0:	195
	-> Sites to keep[DPSCF301821] from pop1:	195
	-> Sites to keep[DPSCF301821] from pop2:	195
	-> [readdata] lastread:195 posi:5759
	-> Comparing positions: 1 with 0 has:22690530
	-> Comparing positions: 2 with 0 has:22690530
	-> Only read nSites: 22690530 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301825
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301825] from pop0:	606
	-> Sites to keep[DPSCF301825] from pop1:	606
	-> Sites to keep[DPSCF301825] from pop2:	606
	-> [readdata] lastread:606 posi:5759
	-> Comparing positions: 1 with 0 has:22691136
	-> Comparing positions: 2 with 0 has:22691136
	-> Only read nSites: 22691136 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301826
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301826' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301828
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301828' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301830
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301830' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301831
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301831' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301835
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301835] from pop0:	361
	-> Sites to keep[DPSCF301835] from pop1:	361
	-> Sites to keep[DPSCF301835] from pop2:	361
	-> [readdata] lastread:361 posi:5759
	-> Comparing positions: 1 with 0 has:22691497
	-> Comparing positions: 2 with 0 has:22691497
	-> Only read nSites: 22691497 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301838
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301838] from pop0:	727
	-> Sites to keep[DPSCF301838] from pop1:	727
	-> Sites to keep[DPSCF301838] from pop2:	727
	-> [readdata] lastread:727 posi:5759
	-> Comparing positions: 1 with 0 has:22692224
	-> Comparing positions: 2 with 0 has:22692224
	-> Only read nSites: 22692224 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301847
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301847] from pop0:	222
	-> Sites to keep[DPSCF301847] from pop1:	222
	-> Sites to keep[DPSCF301847] from pop2:	222
	-> [readdata] lastread:222 posi:5759
	-> Comparing positions: 1 with 0 has:22692446
	-> Comparing positions: 2 with 0 has:22692446
	-> Only read nSites: 22692446 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301848
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301848' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301849
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301849' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301861
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301861' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301864
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301864' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301867
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301867' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301870
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301870' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301871
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301871] from pop0:	140
	-> Sites to keep[DPSCF301871] from pop1:	140
	-> Sites to keep[DPSCF301871] from pop2:	140
	-> [readdata] lastread:140 posi:5759
	-> Comparing positions: 1 with 0 has:22692586
	-> Comparing positions: 2 with 0 has:22692586
	-> Only read nSites: 22692586 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301872
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301872' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301876
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301876' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301877
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301877' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301885
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301885] from pop0:	609
	-> Sites to keep[DPSCF301885] from pop1:	609
	-> Sites to keep[DPSCF301885] from pop2:	609
	-> [readdata] lastread:609 posi:5759
	-> Comparing positions: 1 with 0 has:22693195
	-> Comparing positions: 2 with 0 has:22693195
	-> Only read nSites: 22693195 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301886
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301886' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301887
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301887' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301889
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301889' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301890
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301890' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301891
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301891] from pop0:	147
	-> Sites to keep[DPSCF301891] from pop1:	147
	-> Sites to keep[DPSCF301891] from pop2:	147
	-> [readdata] lastread:147 posi:5759
	-> Comparing positions: 1 with 0 has:22693342
	-> Comparing positions: 2 with 0 has:22693342
	-> Only read nSites: 22693342 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301892
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301892' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301896
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301896] from pop0:	473
	-> Sites to keep[DPSCF301896] from pop1:	473
	-> Sites to keep[DPSCF301896] from pop2:	473
	-> [readdata] lastread:473 posi:5759
	-> Comparing positions: 1 with 0 has:22693815
	-> Comparing positions: 2 with 0 has:22693815
	-> Only read nSites: 22693815 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301898
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301898' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301899
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301899' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301900
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301900] from pop0:	225
	-> Sites to keep[DPSCF301900] from pop1:	225
	-> Sites to keep[DPSCF301900] from pop2:	225
	-> [readdata] lastread:225 posi:5759
	-> Comparing positions: 1 with 0 has:22694040
	-> Comparing positions: 2 with 0 has:22694040
	-> Only read nSites: 22694040 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301902
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301902' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301903
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301903' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301905
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301905] from pop0:	243
	-> Sites to keep[DPSCF301905] from pop1:	243
	-> Sites to keep[DPSCF301905] from pop2:	243
	-> [readdata] lastread:243 posi:5759
	-> Comparing positions: 1 with 0 has:22694283
	-> Comparing positions: 2 with 0 has:22694283
	-> Only read nSites: 22694283 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301907
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301907' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301908
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301908] from pop0:	755
	-> Sites to keep[DPSCF301908] from pop1:	755
	-> Sites to keep[DPSCF301908] from pop2:	755
	-> [readdata] lastread:755 posi:5759
	-> Comparing positions: 1 with 0 has:22695038
	-> Comparing positions: 2 with 0 has:22695038
	-> Only read nSites: 22695038 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301915
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301915' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301921
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301921' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301922
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301922' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301923
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301923' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301924
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301924' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301926
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301926' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301928
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301928' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301930
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301930] from pop0:	0
	-> Sites to keep[DPSCF301930] from pop1:	0
	-> Sites to keep[DPSCF301930] from pop2:	0
	-> Only read nSites: 22695038 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301932
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301932' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301938
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301938] from pop0:	386
	-> Sites to keep[DPSCF301938] from pop1:	386
	-> Sites to keep[DPSCF301938] from pop2:	386
	-> [readdata] lastread:386 posi:5759
	-> Comparing positions: 1 with 0 has:22695424
	-> Comparing positions: 2 with 0 has:22695424
	-> Only read nSites: 22695424 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301939
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301939' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301942
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301942' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301943
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301943' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301945
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301945' does not exists in population: ../DADI/safs/GUA.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301946
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301946] from pop0:	345
	-> Sites to keep[DPSCF301946] from pop1:	345
	-> Sites to keep[DPSCF301946] from pop2:	345
	-> [readdata] lastread:345 posi:5759
	-> Comparing positions: 1 with 0 has:22695769
	-> Comparing positions: 2 with 0 has:22695769
	-> Only read nSites: 22695769 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301947
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301947] from pop0:	741
	-> Sites to keep[DPSCF301947] from pop1:	741
	-> Sites to keep[DPSCF301947] from pop2:	741
	-> [readdata] lastread:741 posi:5759
	-> Comparing positions: 1 with 0 has:22696510
	-> Comparing positions: 2 with 0 has:22696510
	-> Only read nSites: 22696510 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301948
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301948' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301949
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301949' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301952
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301952] from pop0:	106
	-> Sites to keep[DPSCF301952] from pop1:	106
	-> Sites to keep[DPSCF301952] from pop2:	106
	-> [readdata] lastread:106 posi:5759
	-> Comparing positions: 1 with 0 has:22696616
	-> Comparing positions: 2 with 0 has:22696616
	-> Only read nSites: 22696616 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301954
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301954] from pop0:	482
	-> Sites to keep[DPSCF301954] from pop1:	482
	-> Sites to keep[DPSCF301954] from pop2:	482
	-> [readdata] lastread:482 posi:5759
	-> Comparing positions: 1 with 0 has:22697098
	-> Comparing positions: 2 with 0 has:22697098
	-> Only read nSites: 22697098 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Is in multi sfs, will now read data from chr:DPSCF301956
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Chromosome: 'DPSCF301956' does not exists in population: ../DADI/safs/HAW.saf.idx will skip it
	-> Is in multi sfs, will now read data from chr:DPSCF301957
	-> hello Im the master merge part of realSFS. and I'll now do a tripple bypass to find intersect 
	-> 1) Will set iter according to chooseChr and start and stop, and possibly using -sites
	-> Sites to keep[DPSCF301957] from pop0:	499
	-> Sites to keep[DPSCF301957] from pop1:	499
	-> Sites to keep[DPSCF301957] from pop2:	499
	-> [readdata] lastread:499 posi:5759
	-> Comparing positions: 1 with 0 has:22697597
	-> Comparing positions: 2 with 0 has:22697597
	-> Only read nSites: 22697597 will therefore prepare next chromosome (or exit)
	-> Done reading data from chromosome will prepare next chromosome
	-> Will run optimization on nSites: 22697597
------------
startlik=-200955486.112045
lik[2]=-16965175.588566 diff=1.839903e+08 alpha:1.000000 sr2:1.055658e-01
lik[5]=-14584276.245751 diff=2.380899e+06 alpha:1.561905 sr2:1.254476e-02
lik[8]=-14546717.027614 diff=3.755922e+04 alpha:1.999430 sr2:5.493976e-06
lik[11]=-14540307.661260 diff=6.409366e+03 alpha:3.925164 sr2:7.091636e-08
lik[14]=-14539024.881528 diff=1.282780e+03 alpha:1.900605 sr2:3.751941e-09
lik[17]=-14537509.745536 diff=1.515136e+03 alpha:4.000000 sr2:5.926202e-10
slurmstepd: error: *** JOB 19030733 ON bigmem1 CANCELLED AT 2018-05-02T10:34:29 ***

===========================================================================
Job Finished

Name                : 3d_unf_SFS
User                : hemstrow
Partition           : bigmemm
Nodes               : bigmem1
Cores               : 12
State               : CANCELLED,CANCELLED by 917150
Submit              : 2018-04-23T10:27:35
Start               : 2018-04-23T10:27:36
End                 : 2018-05-02T10:34:29
Reserved walltime   : 40-12:00:00
Used walltime       : 9-00:06:53
Used CPU time       : 54-02:19:47
% User (Computation): 97.78%
% System (I/O)      :  2.22%
Mem reserved        : 96G/node
Max Mem used        : 63.53G (bigmem1)
Max Disk Write      : 860.16K (bigmem1)
Max Disk Read       : 23.53G (bigmem1)
