}
fix_clust <- function(x){
#loop through each q object
for (i in 2:length(x)){
#see which columns in the previous run are the most similar to each column
#initialize mapping df
mdf <- data.frame(tcol = 1:ncol(x[[i]]), pcol = numeric(ncol(x[[i]])),
ed = numeric(ncol(x[[i]])))
#loop through each column and find where to map it.
for (j in 1:ncol(x[[i]])){
#intialize euc distance vector
elist <- numeric(ncol(x[[i - 1]]))
#compare to each other col.
for(k in 1:ncol(x[[i-1]])){
#save euclidian dist
elist[k] <- sum((x[[i]][,j] - x[[i-1]][,k])^2)
}
#save results
mdf[j,2] <- which.min(elist)
mdf[j,3] <- min(elist)
}
#reassign clusters in this qdf
##which is the new cluster? Probably that with the most distance to any original clusters.
dups <- duplicated(mdf[,2]) | duplicated(mdf[,2], fromLast = T)
nc <- which.max(mdf[dups,3])
mdf[dups,2][nc] <- nrow(mdf)
mdf <- mdf[order(mdf[,2]),]
##reasign clusters
tdf <- x[[i]]
tdf <- tdf[,mdf[,1]]
##replace object in x with the re-arranged qfile.
colnames(tdf) <- colnames(x[[i]])
x[[i]] <- tdf
}
return(x)
}
mqf <- fix_clust(mq)
pop <- as.data.frame(spmeta[,2], stringsAsFactors = F)
colnames(pop) <- "pop"
sort_inds <- function(x, pop, cluster = "first", q = "last"){
#get which pop to use
if(q == "last"){
q <- length(x)
}
#get order to stick individual in
lx <- x[[q]]
upops <- unique(pop)
lx$s <- 1:nrow(lx)
#get the sorting cluster priority:
if(cluster == "first"){
cseq <- (ncol(lx)-1):1
}
else if (cluster == "last"){
cseq <- 1:(ncol(lx)-1)
}
else if (is.numeric(cluster)){
if(length(cluster) == ncol(lx)){
cseq <- cluster
}
else{
if(length(cluster) < ncol(lx)){
cseq <- c((1:ncol(lx))[-which(1:ncol(lx) %in% cluster)], rev(cluster))
}
else{
stop("Cluster length is longer than number of clusters in x element q.\n")
}
}
}
for(i in 1:nrow(upops)){
tx <- lx[which(pop == upops[i,]),]
for(j in cseq){
tx <- tx[order(tx[,j]),]
}
lx[which(pop == upops[i,]),] <- tx
}
#order all the datasets like this.
ord <- lx$s
for(i in 1:(length(x))){
x[[i]] <- x[[i]][ord,]
}
return(x)
}
mqs <- sort_inds(mqf, pop, cluster = c(6,7,8), q = 7) #using the k = 6 plot, which is the last one where anything new shows up, sort by clusters 4(UPD/ASP), 5(CLF), then 6 (OPL)
p <- plotQ(mqs,
returnplot = T, exportplot = F, imgoutput = "join", clustercol = cbp,
grplab = pop,
grplabsize = 3, grplabcol = "black", splabcol = "black", splabsize = 15,
grplabangle = 90, grplabpos = 1, grplabheight = 1,gr
splab = paste0("K ", 2:9), pointsize = 8, divsize = 1)
p <- plotQ(mqs,
returnplot = T, exportplot = F, imgoutput = "join", clustercol = cbp,
grplab = pop,
grplabsize = 3, grplabcol = "black", splabcol = "black", splabsize = 15,
grplabangle = 90, grplabpos = 1, grplabheight = 1,
splab = paste0("K ", 2:9), pointsize = 8, divsize = 1)
S1 <- grid.arrange(p$plot[[1]])
ord.pop <- c('ENA','WNA','HAW','GUA','ROT','SAI','SAM','FIJ','NCA','QLD','NSW','VIC','NZL','NOR')
p1 <- factor(pop$pop, levels = ord.pop)
pop2 <- sort(p1)
pop2 <- as.character(pop)
pop2
pop2 <- sort(p1)
pop2
pop2 <- as.data.frame(sort(p1))
pop2
mqs2 <- sort_inds(mqf, pop2, cluster = c(6,7,8), q = 7) #using the k = 6 plot, which is the last one where anything new shows up, sort by clusters 4(UPD/ASP), 5(CLF), then 6 (OPL)
pop2
spmeta
setwd("../NGSadmix/full/")
setwd('~/Documents/GitHub/F-H_2018/')
setwd("../NGSadmix/full/")
setwd('~/Documents/GitHub/F-H_2018/NGSadmix/full/')
qfiles <- list.files(full.names = T, pattern = "qopt")
qlist <- readQ(qfiles)
collectClumppOutput(filetype = "both")
cbp <- brewer.pal(9, "Set1")
spmeta <- data.frame(ind = combplates$ID,
pop = combplates$Pop,
stringsAsFactors = F)
setwd('~/Documents/GitHub/F-H_2018/)
)
)))
''
'
setwd("../Raw_data/")
setwd('~/Documents/GitHub/F-H_2018/')
setwd("../Raw_data/")
setwd('~/Documents/GitHub/F-H_2018/Raw_data/')
bamlist <- read.table("../NGSadmix/gbamlist_only_good_sorted.txt")
bamlist <- cbind(bamlist, ord = 1:nrow(bamlist))
plate1 <- read.csv("plate1.csv", header = T)
plate2 <- read.csv("plate2_MFMB1.csv", header = T, skip = 1)
plate3 <- read.csv("plate3_MFMB2.csv", header = T, skip = 1)
DNA274 <- "ACAGTG"
DNA275 <- "CAGATC"
plate2 <- rbind(plate2[,1:3], setNames(plate2[,4:6], colnames(plate2)[1:3]))
plate3 <- rbind(plate3[,1:3], setNames(plate3[,4:6], colnames(plate3)[1:3]))
barcodes <- read.table("RAD barcodes.txt", header = T)
plate2 <- merge(plate2, barcodes, by = "Well")
plate3 <- merge(plate3, barcodes, by = "Well")
plate1 <- merge(plate1, barcodes, by = "Well")
sampinfo <- data.frame(plate = substr(bamlist[,1], 8, 13), ind = substr(bamlist[,1], 20, 27), ord = bamlist$ord, bam = bamlist$V1, stringsAsFactors = FALSE)
sampinfo$plate[sampinfo$plate == "_split"] <- "plate1"
plate2 <- merge(sampinfo[sampinfo$plate == DNA274,], plate2, by.x = "ind", by.y = "Index")
plate3 <- merge(sampinfo[sampinfo$plate == DNA275,], plate3, by.x = "ind", by.y = "Index")
plate1 <- merge(sampinfo[sampinfo$plate == "plate1",], plate1, by.x = "ind", by.y = "Index")
combplates <- rbind(plate2, plate3, plate1)
combplates <- dplyr::arrange(combplates, ord)
pops <- substr(combplates$Pop, 1, 3)
table(pops)
pops[pops == "Gua"] <- "GUA"
pops[pops == "New"] <- "NCA"
pops[pops == "Nor"] <- "NOR"
pops[pops == "NZ2"] <- "NZL"
pops[pops == "NZR"] <- "NZL"
pops[pops == "Rot"] <- "ROT"
pops[pops == "Sai"] <- "SAI"
pops[pops == "Sam"] <- "SAM"
table(pops)
combplates$Pop <- pops
library(pophelper)
setwd("../NGSadmix/full/")
qfiles <- list.files(full.names = T, pattern = "qopt")
qlist <- readQ(qfiles)
collectClumppOutput(filetype = "both")
cbp <- brewer.pal(9, "Set1")
spmeta <- data.frame(ind = combplates$ID,
pop = combplates$Pop,
stringsAsFactors = F)
spmeta
spmeta <- spmeta[order(pops),]
spmeta
mq <- readQ(list.files("pop-both/", full.names = T, pattern = "merged"))
mq
head(mq)
for(i in 1:length(mq)){
mq[[i]] <- mq[[i]][order(pops),]
}
fix_clust <- function(x){
#loop through each q object
for (i in 2:length(x)){
#see which columns in the previous run are the most similar to each column
#initialize mapping df
mdf <- data.frame(tcol = 1:ncol(x[[i]]), pcol = numeric(ncol(x[[i]])),
ed = numeric(ncol(x[[i]])))
#loop through each column and find where to map it.
for (j in 1:ncol(x[[i]])){
#intialize euc distance vector
elist <- numeric(ncol(x[[i - 1]]))
#compare to each other col.
for(k in 1:ncol(x[[i-1]])){
#save euclidian dist
elist[k] <- sum((x[[i]][,j] - x[[i-1]][,k])^2)
}
#save results
mdf[j,2] <- which.min(elist)
mdf[j,3] <- min(elist)
}
#reassign clusters in this qdf
##which is the new cluster? Probably that with the most distance to any original clusters.
dups <- duplicated(mdf[,2]) | duplicated(mdf[,2], fromLast = T)
nc <- which.max(mdf[dups,3])
mdf[dups,2][nc] <- nrow(mdf)
mdf <- mdf[order(mdf[,2]),]
##reasign clusters
tdf <- x[[i]]
tdf <- tdf[,mdf[,1]]
##replace object in x with the re-arranged qfile.
colnames(tdf) <- colnames(x[[i]])
x[[i]] <- tdf
}
return(x)
}
mqf <- fix_clust(mq)
pop <- as.data.frame(spmeta[,2], stringsAsFactors = F)
colnames(pop) <- "pop"
sort_inds <- function(x, pop, cluster = "first", q = "last"){
#get which pop to use
if(q == "last"){
q <- length(x)
}
#get order to stick individual in
lx <- x[[q]]
upops <- unique(pop)
lx$s <- 1:nrow(lx)
#get the sorting cluster priority:
if(cluster == "first"){
cseq <- (ncol(lx)-1):1
}
else if (cluster == "last"){
cseq <- 1:(ncol(lx)-1)
}
else if (is.numeric(cluster)){
if(length(cluster) == ncol(lx)){
cseq <- cluster
}
else{
if(length(cluster) < ncol(lx)){
cseq <- c((1:ncol(lx))[-which(1:ncol(lx) %in% cluster)], rev(cluster))
}
else{
stop("Cluster length is longer than number of clusters in x element q.\n")
}
}
}
for(i in 1:nrow(upops)){
tx <- lx[which(pop == upops[i,]),]
for(j in cseq){
tx <- tx[order(tx[,j]),]
}
lx[which(pop == upops[i,]),] <- tx
}
#order all the datasets like this.
ord <- lx$s
for(i in 1:(length(x))){
x[[i]] <- x[[i]][ord,]
}
return(x)
}
mqs <- sort_inds(mqf, pop, cluster = c(6,7,8), q = 7) #using the k = 6 plot, which is the last one where anything new shows up, sort by clusters 4(UPD/ASP), 5(CLF), then 6 (OPL)
p <- plotQ(mqs,
returnplot = T, exportplot = F, imgoutput = "join", clustercol = cbp,
grplab = pop,
grplabsize = 3, grplabcol = "black", splabcol = "black", splabsize = 15,
grplabangle = 90, grplabpos = 1, grplabheight = 1,
splab = paste0("K ", 2:9), pointsize = 8, divsize = 1)
S1 <- grid.arrange(p$plot[[1]])
p <- plotQ(mqs,
returnplot = T, exportplot = F, imgoutput = "join", clustercol = cbp,
grplab = pop,
grplabsize = 3, grplabcol = "black", splabcol = "black", splabsize = 10,
grplabangle = 90, grplabpos = 1, grplabheight = 1,
splab = paste0("K=", 2:9), pointsize = 8, divsize = 1)
S1 <- grid.arrange(p$plot[[1]])
combplates$Pop
combplates$bam
combplates$ID
spmeta[,2]
head(spmeta)
str(spmeta)
spmeta$pop <- factor(spmeta$pop, levels = c('ENA','WNA','HAW','GUA','ROT','SAI','SAM','FIJ','NCA','QLD','NSW','VIC','NZL','NOR'))
spmeta
str(spmeta)
spmeta[order(spmeta$pop),]
spmeta <- spmeta[order(spmeta$pop),]
mqs <- sort_inds(mqf, pop, cluster = c(6,7,8), q = 7) #using the k = 6 plot, which is the last one where anything new shows up, sort by clusters 4(UPD/ASP), 5(CLF), then 6 (OPL)
p <- plotQ(mqs,
returnplot = T, exportplot = F, imgoutput = "join", clustercol = cbp,
grplab = pop,
grplabsize = 3, grplabcol = "black", splabcol = "black", splabsize = 10,
grplabangle = 90, grplabpos = 1, grplabheight = 1,
splab = paste0("K=", 2:9), pointsize = 8, divsize = 1)
S1 <- grid.arrange(p$plot[[1]])
pop
pop <- as.data.frame(spmeta[,2], stringsAsFactors = F)
pop
colnames(pop) <- "pop"
mqs <- sort_inds(mqf, pop, cluster = c(6,7,8), q = 7) #using the k = 6 plot, which is the last one where anything new shows up, sort by clusters 4(UPD/ASP), 5(CLF), then 6 (OPL)
unique(pop)
qfiles <- list.files(full.names = T, pattern = "qopt")
qlist <- readQ(qfiles)
collectClumppOutput(filetype = "both")
cbp <- brewer.pal(9, "Set1")
spmeta <- data.frame(ind = combplates$ID,
pop = combplates$Pop,
stringsAsFactors = F)
spmeta
spmeta$pop <- factor(spmeta$pop, levels = c('ENA','WNA','HAW','GUA','ROT','SAI','SAM','FIJ','NCA','QLD','NSW','VIC','NZL','NOR'))
spmeta <- spmeta[order(spmeta$pop),]
mq <- readQ(list.files("pop-both/", full.names = T, pattern = "merged"))
for(i in 1:length(mq)){
mq[[i]] <- mq[[i]][order(pops),]
}
mqf <- fix_clust(mq)
pop <- as.data.frame(spmeta[,2], stringsAsFactors = F)
colnames(pop) <- "pop"
mqs <- sort_inds(mqf, pop, cluster = c(6,7,8), q = 7) #using the k = 6 plot, which is the last one where anything new shows up, sort by clusters 4(UPD/ASP), 5(CLF), then 6 (OPL)
pop
unique(pop)
q
plot.phylo(nj, no.margin = TRUE, cex = .5, type = "unrooted",
tip.color = combplates$color, lab4ut = "axial",
x.lim = c(0, .4), edge.color = tcols)
library(ape); library(gridExtra); library(RColorBrewer); library(colorRamps)
setwd("Raw_data/")
setwd("..Raw_data/")
setwd('~/Documents/GitHub/F-H_2018/Raw_data/')
bamlist <- read.table("gbamlist.txt")
poorlist <- read.table("poorlist.txt")
bamlist$poor <- bamlist$V1 %in% poorlist$V1
bamlist$ord <- 1:nrow(bamlist)
plate1 <- read.csv("plate1.csv", header = T)
plate2 <- read.csv("plate2_MFMB1.csv", header = T, skip = 1)
plate3 <- read.csv("plate3_MFMB2.csv", header = T, skip = 1)
DNA274 <- "ACAGTG"
DNA275 <- "CAGATC"
plate2 <- rbind(plate2[,1:3], setNames(plate2[,4:6], colnames(plate2)[1:3]))
plate3 <- rbind(plate3[,1:3], setNames(plate3[,4:6], colnames(plate3)[1:3]))
barcodes <- read.table("RAD barcodes.txt", header = T)
plate2 <- merge(plate2, barcodes, by = "Well")
plate3 <- merge(plate3, barcodes, by = "Well")
plate1 <- merge(plate1, barcodes, by = "Well")
sampinfo <- data.frame(plate = substr(bamlist[,1], 8, 13), ind = substr(bamlist[,1], 20, 27), ord = bamlist$ord, poor = bamlist$poor, stringsAsFactors = FALSE)
sampinfo$plate[sampinfo$plate == "_split"] <- "plate1"
plate2 <- merge(sampinfo[sampinfo$plate == DNA274,], plate2, by.x = "ind", by.y = "Index")
plate3 <- merge(sampinfo[sampinfo$plate == DNA275,], plate3, by.x = "ind", by.y = "Index")
plate1 <- merge(sampinfo[sampinfo$plate == "plate1",], plate1, by.x = "ind", by.y = "Index")
combplates <- rbind(plate2, plate3, plate1)
pops <- substr(combplates$Pop, 1, 3)
table(pops)
pops[pops == "Gua"] <- "GUA"
pops[pops == "New"] <- "NCA"
pops[pops == "Nor"] <- "NOR"
pops[pops == "NZ2"] <- "NZL"
pops[pops == "NZR"] <- "NZL"
pops[pops == "Rot"] <- "ROT"
pops[pops == "Sai"] <- "SAI"
pops[pops == "Sam"] <- "SAM"
table(pops)
combplates$Pop <- pops
setwd("data/IBS/")
setwd("..data/IBS/")
setwd('~/Documents/GitHub/F-H_2018/data/IBS/')
m <- read.table("monIBS_clean.ibsMat")
m <- as.matrix(m)
m <- m[-which(combplates$poor),-which(combplates$poor)]
combplates <- combplates[-which(combplates$poor),]
pal <- colorRampPalette(brewer.pal(9, "Set1"))(14) #palette to use
combplates$color <- pal[as.numeric(as.factor(combplates$Pop))]
colnames(m) <- combplates$Pop
rownames(m) <- combplates$Pop
nj <- nj(m) #make tree
tcols <- rep("black", length(nj$edge.length))
indices <- nj$edge[nj$edge[,2] <= 281, 2]
pcols <- combplates$color[indices]
tcols[which(nj$edge[,2] <= 281)] <- pcols
plot.phylo(nj, no.margin = TRUE, cex = .5, type = "unrooted",
tip.color = combplates$color, lab4ut = "axial",
x.lim = c(0, .4), edge.color = tcols)
legend(.33, 0.31, legend = sort(unique(combplates$Pop)), fill = pal, title = "Population", cex = 0.9)
plot.phylo(nj, no.margin = TRUE, cex = .5, type = "unrooted",
tip.color = combplates$color, lab4ut = "axial",
x.lim = c(0, .4), edge.color = tcols)+legend(.33, 0.31, legend = sort(unique(combplates$Pop)), fill = pal, title = "Population", cex = 0.9)
nrow(wings)
#### temporary wing measurements, to be updated ######
require(ggplot2)
require(lme4)
require(lmerTest)
library(plyr)
#require(devtools)
#devtools::install_github("dkahle/ggmap", ref = "tidyup")
library(ggmap)
register_google(key = "AIzaSyB5lTW12MLtkc40A3ZPGs5qaVfUcmIsS-M")
wings = read.csv(file="~/Downloads/wings_06.18.19.csv",header=TRUE)
### split collection date column into collection year, collection month, and day
date.split = t(sapply(wings$Collection_Date, function(x) substring(x, first=c(1,5,7), last=c(4,6,8))))
wings = cbind(wings, date.split)
names(wings)[names(wings) == '1'] <- 'year'
names(wings)[names(wings) == '2'] <- 'month'
names(wings)[names(wings) == '3'] <- 'day'
names(wings)
#change year back into a continuous numeric variable
wings$year = as.numeric(levels(wings$year))[wings$year]
#do the same for day
wings$day = as.numeric(levels(wings$day))[wings$day]
#replace 0s with NA and get rid of any values greater than 31
wings$day[wings$day == 0] = NA
wings$day[wings$day >= 32] = NA
#replace number with months
months = c("January","February","March","April","May","June","July","August",
"September","October","November","December")
wings$month <- months[ wings$month ]
wings$month
names(wings)
#arrange months chronologically
wings$month = factor(wings$month, levels = c("January","February","March","April","May","June","July","August","September","October","November","December"))
####
levels(wings$Collection)
### change regions to remove underscore
wings$Region <- revalue(wings$Region, c("North_America" = "North America", "Central_America"="Central America", "South_America"="South America", "Pacific_Islands"="Pacific Islands"))
###
#temporarily assign all miscellaneous contemporary collections to a single collection ID level
tbl <- table(wings$Collection)
wings.hist <- droplevels(wings[wings$Collection %in% names(tbl)[tbl >= 5],,drop=TRUE])
levels(wings.hist$Collection) <- c(levels(wings.hist$Collection), 'contemporary')
wings.hist[wings.hist$Collection %in% c('Australia_2016','Australia_2017','California_Miscellaneous','Hawaii_2016','Hawaii_2017','Hawaii_Contemporary','LA_expt_2017','Marianas_Contemporary','MF','New_Caledonia_2007','Norfolk_Island','Puerto_Rico_Contemporary','Samoa_2007','Samoa_2016','Li_et_al_2016','MZ','Zalucki_Paine_Malcolm','Miscellaneous','JSH','LHY','Mexico'),]$Collection <- 'contemporary'
ggplot(wings.hist, aes( x = year))+
geom_histogram(aes(col = Collection))+
facet_wrap(~Collection)+
theme(legend.position = 'none')
wings.hist$Collection2 <- ifelse(wings.hist$Collection == 'contemporary', 'contemporary', 'museum')
ggplot(wings.hist, aes(x = year))+
geom_histogram(aes (col = Collection2))+
theme_bw()+
theme(legend.position = 'none')+
facet_wrap(~Collection2, nrow =2)
#replace contemporary specimens and randomly assign to other collections to eliminate recency bias
#collection.replace <- subset(wings, !(wings$Collection %in% c('Australia_2016','Australia_2017','California_Miscellaneous','Hawaii_2016','Hawaii_2017','Hawaii_Contemporary','LA_expt_2017','Marianas_Contemporary','MF','New_Caledonia_2007','Norfolk_Island','Puerto_Rico_Contemporary','Samoa_2007','Samoa_2016','Li_et_al_2016','MZ','Zalucki_Paine_Malcolm','Miscellaneous','JSH','LHY','Mexico')))
#wings$Collection[which(wings$Collection %in% c('Australia_2016','Australia_2017','California_Miscellaneous','Hawaii_2016','Hawaii_2017','Hawaii_Contemporary','LA_expt_2017','Marianas_Contemporary','MF','New_Caledonia_2007','Norfolk_Island','Puerto_Rico_Contemporary','Samoa_2007','Samoa_2016','Li_et_al_2016','MZ','Zalucki_Paine_Malcolm','Miscellaneous','JSH','LHY','Mexico'))] <- sample(collection.replace$Collection, replace = F, size = length(wings$Collection[which(wings$Collection %in% c('Australia_2016','Australia_2017','California_Miscellaneous','Hawaii_2016','Hawaii_2017','Hawaii_Contemporary','LA_expt_2017','Marianas_Contemporary','MF','New_Caledonia_2007','Norfolk_Island','Puerto_Rico_Contemporary','Samoa_2007','Samoa_2016','Li_et_al_2016','MZ','Zalucki_Paine_Malcolm','Miscellaneous','JSH','LHY','Mexico'))]))
wings[wings$Collection %in% c('Australia_2016','Australia_2017','California_Miscellaneous','Hawaii_2016','Hawaii_2017','Hawaii_Contemporary','LA_expt_2017','Marianas_Contemporary','MF','New_Caledonia_2007','Norfolk_Island','Puerto_Rico_Contemporary','Samoa_2007','Samoa_2016','Li_et_al_2016','MZ','Zalucki_Paine_Malcolm','Miscellaneous','JSH','LHY','Mexico','Contemporary'),]$Collection <- 'Contemporary'
###.................
## Add average columns
wings$MLength = rowMeans(cbind(wings$LLength, wings$RLength),na.rm=T)
wings$MWidth = rowMeans(cbind(wings$LWidth, wings$RWidth),na.rm=T)
wings$MArea = rowMeans(cbind(wings$LArea, wings$RArea),na.rm=T)
wings$MPerimeter = rowMeans(cbind(wings$LPerimeter,wings$RPerimeter),na.rm=T)
wings$aspectratio = wings$MLength/wings$MWidth
wings$roundness = (4*pi*wings$MArea)/(wings$MPerimeter)^2
names(wings)
### Add geocode column ###
for (i in 1:nrow(wings))
wings$geocode_location_full[i]<-paste(wings$Country.Archipelago[i], wings$Island.State[i], wings$Site.City[i], sep=" ")
wings$geocode_location_full
#which locations are too vague for geocoding?  omit all entries that are NA for both County/District and Site/City
#gc_locations <- wings[!is.na(wings$Site.City) | !is.na(wings$County.District),]
library(mapproj)
#register_google(key = "AIzaSyB0BpX3YsWF3Cv0pKeunUis3vyMjdcOr8c")
#coordinates1 <- geocode(gc_locations[1:2000,]$geocode_location_full)
#wset1 <- cbind(gc_locations[1:2000,], coordinates1)
#block1 <- cbind(gc_locations[1:2000,], coordinates1) #missing some index values contained in original dataframe
#zz <- merge(wings, block1, all = TRUE)
#write.csv(zz, file = "~/Desktop/coords11.csv")
###second batch
#coordinates2 <- geocode(gc_locations[2001:4000,]$geocode_location_full)
#block2 <- cbind(gc_locations[2001:4000,], coordinates2) #missing some index values contained in original dataframe
#yy <- merge(wings, block2, all = TRUE)
#write.csv(yy, file = "~/Desktop/coords2.csv")
#coordinates3 <- geocode(gc_locations[4001:nrow(gc_locations),]$geocode_location_full)
#block3 <- cbind(gc_locations[4001:nrow(gc_locations),], coordinates3) #missing some index values contained in original dataframe
#xx <- merge(wings, block3, all = TRUE)
#write.csv(xx, file = "~/Desktop/coords3.csv")
#final block
#block4 <- wings[wings$Index>=6770,]
#block4.coordinates <- geocode(block4$geocode_location_full)
#block4$lat <- block4.coordinates[[2]]
#block4$lon <- block4.coordinates[[1]]
#write.csv(block4, file = '~/Desktop/block4.coordinates.csv')
library('sf')
library("rnaturalearth")
library("rnaturalearthdata")
library('rgeos')
world <- ne_countries(scale= 'medium',returnclass = 'sf') #scale = 110 or scale = 'medium' seem to work well; scale = 10 takes a long time
ggplot(data = world)+
geom_sf()+
theme_bw()+
geom_point(data = wings[!(wings$Region %in% c('Asia',"Indian_Ocean")),],
aes(x = lon, y = lat, col = Region), size = 0.8)+
theme(legend.position = 'none')+
theme(axis.title = element_blank())+
scale_color_manual(values = c('gold', 'orange','cornflowerblue','limegreen','blueviolet','brown1'))
####add column for julian dates
date<-as.Date(as.character(wings$Collection_Date), "%Y%m%d")
wings$julian.date <- as.numeric(format(date, "%j"))
wings$julian.date.continuous <- abs(wings$julian.date - 183)
hist(wings$julian.date.continuous)
wings$julian.date.cycle <- cos(pi*(wings$julian.date.continuous)/182)
####
####
#Temporarily omit reared specimens so as to only focus on wild-caught individuals
#first, duplicate original dataset for further stats later
wings=subset(wings,wings$Wild.Caught. == "yes")
nrow(wings)
table(wings$Region)
table(wings$Country.Archipelago)
#temporarily omit David M specimens because of huge size discrepancy
wings = subset(wings, wings$Collection != 'David_M')
#excluse sole gyandromorph from data
wings = subset(wings, wings$Sex != "gyandromorph")
nrow(wings)
nrow(wings)
head(wings)
names(wings)
